
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ProgramleftORleftANDrightNOTnonassocEQUALNOTEQUAL<>LESSEQUALGREATEREQUALleft+-left*DIVIDE%rightEXPrightUMINUSAND BOOL BREAK DIVIDE ELSE EQUAL EXP FALSE FOR FUNCTION GREATEREQUAL ID IF INT INTEGER LESSEQUAL NOT NOTEQUAL OR PRINT PROGRAM READ RETURN TO TRUE VAR VOID WHILE\n   Program : ProgramHeader ProgramBody\n   \n   ProgramHeader : PROGRAM ID ';' \n   \n   ProgramBody : FuncDecls VarDecls Cmds\n   \n   FuncDecls : empty \n             | Function FuncDecls\n   \n   Function : FunctionHeader \n            | FunctionBody\n   \n   FunctionHeader : FunctionType FUNCTION ID '(' ParamList ')' ':' \n   \n   FunctionType : INTEGER \n                | BOOL\n                | VOID\n   \n   FunctionBody : '{' VarDecls CmdList '}' \n   \n   ParamList : empty \n             | ParamList1\n   \n   ParamList1 : Param ',' ParamList1 \n              | Param\n   \n   Param : ID ':' Type\n   \n    Cmds : CmdSeq\n         | Cmd\n    \n    Cmd : CmdAtrib \n        | CmdIf\n        | CmdWhile\n        | CmdFor\n        | CmdBreak\n        | CmdPrint\n        | CmdReturn\n        | CmdSeq\n    \n    CmdAtrib : ID '=' Expr\n    \n    CmdIf : IF Expr ':' Cmd \n          | IF Expr ':' Cmd ELSE ':' \n    \n    CmdWhile : WHILE Expr ':' Cmds \n    \n    CmdFor : FOR CmdAtrib TO Expr ':' Cmd \n    \n    CmdBreak : BREAK \n    \n    CmdPrint : PRINT '(' ExprList ')' \n    \n    CmdReturn : RETURN Expr \n    \n    CmdSeq : '{' CmdList '}' \n    \n    CmdList : Cmd ';' CmdList \n            | Cmd\n    \n    Expr : INT \n         | TRUE\n         | FALSE\n         | ID\n         | Expr BinOp Expr\n         | UnOp Expr  %prec UMINUS\n         | '(' Expr ')'\n         | ID '(' ExprList ')'\n         | READ '(' ')'\n    \n    BinOp : '+' \n          | '-'\n          | '*'\n          | DIVIDE\n          | EXP\n          | '%'\n          | EQUAL\n          | NOTEQUAL\n          | '<'\n          | '>'\n          | LESSEQUAL\n          | GREATEREQUAL\n          | AND\n          | OR\n    \n    UnOp : '-' \n         | NOT \n    \n    ExprList : empty \n             | ExprList1 \n    \n    ExprList1 : Expr\n              | Expr ',' ExprList1 \n    \n    VarDecls : empty \n             | VarDecl VarDecls\n    \n    VarDecl : VAR ID ':' Type ';' \n    \n    Type : INTEGER \n         | BOOL\n    \n    empty :\n    "
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,4,24,25,26,28,29,30,31,32,33,34,39,47,51,52,53,54,63,68,69,87,105,106,108,109,110,112,119,125,126,],[0,-1,-3,-18,-19,-20,-21,-22,-23,-24,-25,-26,-33,-27,-39,-40,-41,-42,-35,-36,-28,-44,-29,-43,-45,-47,-31,-34,-46,-30,-32,]),'VAR':([2,5,6,7,8,9,11,18,20,23,66,114,123,],[-73,19,-4,-73,-6,-7,19,19,-5,-2,-12,-70,-8,]),'{':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[11,-73,-4,11,-6,-7,-73,27,-68,-73,-5,27,-2,27,-69,-12,27,27,27,-70,27,-8,]),'ID':([2,3,5,6,7,8,9,11,16,17,18,19,20,21,22,23,27,36,37,38,41,42,49,55,56,58,59,62,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,91,113,114,117,120,123,],[-73,15,-73,-4,-73,-6,-7,-73,35,-68,-73,43,-5,44,35,-2,35,54,54,35,54,-69,54,54,54,-62,-63,54,99,-12,35,35,54,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,54,35,54,54,-70,99,35,-8,]),'IF':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,36,-68,-73,-5,36,-2,36,-69,-12,36,36,36,-70,36,-8,]),'WHILE':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,37,-68,-73,-5,37,-2,37,-69,-12,37,37,37,-70,37,-8,]),'FOR':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,38,-68,-73,-5,38,-2,38,-69,-12,38,38,38,-70,38,-8,]),'BREAK':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,39,-68,-73,-5,39,-2,39,-69,-12,39,39,39,-70,39,-8,]),'PRINT':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,40,-68,-73,-5,40,-2,40,-69,-12,40,40,40,-70,40,-8,]),'RETURN':([2,5,6,7,8,9,11,16,17,18,20,22,23,27,42,66,67,70,90,114,120,123,],[-73,-73,-4,-73,-6,-7,-73,41,-68,-73,-5,41,-2,41,-69,-12,41,41,41,-70,41,-8,]),'INTEGER':([2,7,8,9,23,64,66,115,123,],[12,12,-6,-7,-2,97,-12,97,-8,]),'BOOL':([2,7,8,9,23,64,66,115,123,],[13,13,-6,-7,-2,98,-12,98,-8,]),'VOID':([2,7,8,9,23,66,123,],[14,14,-6,-7,-2,-12,-8,]),'FUNCTION':([10,12,13,14,],[21,-9,-10,-11,]),';':([15,25,26,28,29,30,31,32,33,34,39,46,47,51,52,53,54,63,68,69,87,96,97,98,105,106,108,109,110,112,119,125,126,],[23,-18,-19,-20,-21,-22,-23,-24,-25,-26,-33,67,-27,-39,-40,-41,-42,-35,-36,-28,-44,114,-71,-72,-29,-43,-45,-47,-31,-34,-46,-30,-32,]),'ELSE':([25,26,28,29,30,31,32,33,34,39,47,51,52,53,54,63,68,69,87,105,106,108,109,110,112,119,125,126,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-33,-27,-39,-40,-41,-42,-35,-36,-28,-44,118,-43,-45,-47,-31,-34,-46,-30,-32,]),'}':([25,26,28,29,30,31,32,33,34,39,45,46,47,48,51,52,53,54,63,68,69,87,104,105,106,108,109,110,112,119,125,126,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-33,66,-38,-27,68,-39,-40,-41,-42,-35,-36,-28,-44,-37,-29,-43,-45,-47,-31,-34,-46,-30,-32,]),'=':([35,],[49,]),'INT':([36,37,41,49,55,56,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[51,51,51,51,51,51,-62,-63,51,51,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,51,51,51,]),'TRUE':([36,37,41,49,55,56,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[52,52,52,52,52,52,-62,-63,52,52,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,52,52,52,]),'FALSE':([36,37,41,49,55,56,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[53,53,53,53,53,53,-62,-63,53,53,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,53,53,53,]),'(':([36,37,40,41,44,49,54,55,56,57,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[56,56,62,56,65,56,86,56,56,89,-62,-63,56,56,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,56,56,56,]),'READ':([36,37,41,49,55,56,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[57,57,57,57,57,57,-62,-63,57,57,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,57,57,57,]),'-':([36,37,41,49,50,51,52,53,54,55,56,58,59,60,62,63,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,95,106,108,109,111,113,119,],[58,58,58,58,73,-39,-40,-41,-42,58,58,-62,-63,73,58,73,73,58,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,58,-44,73,58,73,73,-45,-47,73,58,-46,]),'NOT':([36,37,41,49,55,56,58,59,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,113,],[59,59,59,59,59,59,-62,-63,59,59,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,59,59,59,]),':':([43,50,51,52,53,54,60,87,99,106,108,109,111,116,118,119,],[64,70,-39,-40,-41,-42,90,-44,115,-43,-45,-47,120,123,125,-46,]),'+':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[72,-39,-40,-41,-42,72,72,72,-44,72,72,72,-45,-47,72,-46,]),'*':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[74,-39,-40,-41,-42,74,74,74,-44,74,74,74,-45,-47,74,-46,]),'DIVIDE':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[75,-39,-40,-41,-42,75,75,75,-44,75,75,75,-45,-47,75,-46,]),'EXP':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[76,-39,-40,-41,-42,76,76,76,-44,76,76,76,-45,-47,76,-46,]),'%':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[77,-39,-40,-41,-42,77,77,77,-44,77,77,77,-45,-47,77,-46,]),'EQUAL':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[78,-39,-40,-41,-42,78,78,78,-44,78,78,78,-45,-47,78,-46,]),'NOTEQUAL':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[79,-39,-40,-41,-42,79,79,79,-44,79,79,79,-45,-47,79,-46,]),'<':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[80,-39,-40,-41,-42,80,80,80,-44,80,80,80,-45,-47,80,-46,]),'>':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[81,-39,-40,-41,-42,81,81,81,-44,81,81,81,-45,-47,81,-46,]),'LESSEQUAL':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[82,-39,-40,-41,-42,82,82,82,-44,82,82,82,-45,-47,82,-46,]),'GREATEREQUAL':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[83,-39,-40,-41,-42,83,83,83,-44,83,83,83,-45,-47,83,-46,]),'AND':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[84,-39,-40,-41,-42,84,84,84,-44,84,84,84,-45,-47,84,-46,]),'OR':([50,51,52,53,54,60,63,69,87,88,95,106,108,109,111,119,],[85,-39,-40,-41,-42,85,85,85,-44,85,85,85,-45,-47,85,-46,]),'TO':([51,52,53,54,61,69,87,106,108,109,119,],[-39,-40,-41,-42,91,-28,-44,-43,-45,-47,-46,]),')':([51,52,53,54,62,65,86,87,88,89,92,93,94,95,97,98,100,101,102,103,106,107,108,109,119,121,122,124,],[-39,-40,-41,-42,-73,-73,-73,-44,108,109,112,-64,-65,-66,-71,-72,116,-13,-14,-16,-43,119,-45,-47,-46,-67,-17,-15,]),',':([51,52,53,54,87,95,97,98,103,106,108,109,119,122,],[-39,-40,-41,-42,-44,113,-71,-72,117,-43,-45,-47,-46,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ProgramHeader':([0,],[2,]),'ProgramBody':([2,],[4,]),'FuncDecls':([2,7,],[5,20,]),'empty':([2,5,7,11,18,62,65,86,],[6,17,6,17,17,93,101,93,]),'Function':([2,7,],[7,7,]),'FunctionHeader':([2,7,],[8,8,]),'FunctionBody':([2,7,],[9,9,]),'FunctionType':([2,7,],[10,10,]),'VarDecls':([5,11,18,],[16,22,42,]),'VarDecl':([5,11,18,],[18,18,18,]),'Cmds':([16,90,],[24,110,]),'CmdSeq':([16,22,27,67,70,90,120,],[25,47,47,47,47,25,47,]),'Cmd':([16,22,27,67,70,90,120,],[26,46,46,46,105,26,126,]),'CmdAtrib':([16,22,27,38,67,70,90,120,],[28,28,28,61,28,28,28,28,]),'CmdIf':([16,22,27,67,70,90,120,],[29,29,29,29,29,29,29,]),'CmdWhile':([16,22,27,67,70,90,120,],[30,30,30,30,30,30,30,]),'CmdFor':([16,22,27,67,70,90,120,],[31,31,31,31,31,31,31,]),'CmdBreak':([16,22,27,67,70,90,120,],[32,32,32,32,32,32,32,]),'CmdPrint':([16,22,27,67,70,90,120,],[33,33,33,33,33,33,33,]),'CmdReturn':([16,22,27,67,70,90,120,],[34,34,34,34,34,34,34,]),'CmdList':([22,27,67,],[45,48,104,]),'Expr':([36,37,41,49,55,56,62,71,86,91,113,],[50,60,63,69,87,88,95,106,95,111,95,]),'UnOp':([36,37,41,49,55,56,62,71,86,91,113,],[55,55,55,55,55,55,55,55,55,55,55,]),'BinOp':([50,60,63,69,87,88,95,106,111,],[71,71,71,71,71,71,71,71,71,]),'ExprList':([62,86,],[92,107,]),'ExprList1':([62,86,113,],[94,94,121,]),'Type':([64,115,],[96,122,]),'ParamList':([65,],[100,]),'ParamList1':([65,117,],[102,124,]),'Param':([65,117,],[103,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ProgramHeader ProgramBody','Program',2,'p_program','uptparser.py',21),
  ('ProgramHeader -> PROGRAM ID ;','ProgramHeader',3,'p_ProgramHeader','uptparser.py',27),
  ('ProgramBody -> FuncDecls VarDecls Cmds','ProgramBody',3,'p_ProgramBody','uptparser.py',33),
  ('FuncDecls -> empty','FuncDecls',1,'p_FuncDecls','uptparser.py',39),
  ('FuncDecls -> Function FuncDecls','FuncDecls',2,'p_FuncDecls','uptparser.py',40),
  ('Function -> FunctionHeader','Function',1,'p_Function','uptparser.py',48),
  ('Function -> FunctionBody','Function',1,'p_Function','uptparser.py',49),
  ('FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :','FunctionHeader',7,'p_FunctionHeader','uptparser.py',55),
  ('FunctionType -> INTEGER','FunctionType',1,'p_FunctionType','uptparser.py',61),
  ('FunctionType -> BOOL','FunctionType',1,'p_FunctionType','uptparser.py',62),
  ('FunctionType -> VOID','FunctionType',1,'p_FunctionType','uptparser.py',63),
  ('FunctionBody -> { VarDecls CmdList }','FunctionBody',4,'p_FunctionBody','uptparser.py',69),
  ('ParamList -> empty','ParamList',1,'p_ParamList','uptparser.py',75),
  ('ParamList -> ParamList1','ParamList',1,'p_ParamList','uptparser.py',76),
  ('ParamList1 -> Param , ParamList1','ParamList1',3,'p_ParamList1','uptparser.py',82),
  ('ParamList1 -> Param','ParamList1',1,'p_ParamList1','uptparser.py',83),
  ('Param -> ID : Type','Param',3,'p_Param','uptparser.py',93),
  ('Cmds -> CmdSeq','Cmds',1,'p_Cmds','uptparser.py',101),
  ('Cmds -> Cmd','Cmds',1,'p_Cmds','uptparser.py',102),
  ('Cmd -> CmdAtrib','Cmd',1,'p_Cmd','uptparser.py',108),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','uptparser.py',109),
  ('Cmd -> CmdWhile','Cmd',1,'p_Cmd','uptparser.py',110),
  ('Cmd -> CmdFor','Cmd',1,'p_Cmd','uptparser.py',111),
  ('Cmd -> CmdBreak','Cmd',1,'p_Cmd','uptparser.py',112),
  ('Cmd -> CmdPrint','Cmd',1,'p_Cmd','uptparser.py',113),
  ('Cmd -> CmdReturn','Cmd',1,'p_Cmd','uptparser.py',114),
  ('Cmd -> CmdSeq','Cmd',1,'p_Cmd','uptparser.py',115),
  ('CmdAtrib -> ID = Expr','CmdAtrib',3,'p_CmdAtrib','uptparser.py',121),
  ('CmdIf -> IF Expr : Cmd','CmdIf',4,'p_CmdIf','uptparser.py',127),
  ('CmdIf -> IF Expr : Cmd ELSE :','CmdIf',6,'p_CmdIf','uptparser.py',128),
  ('CmdWhile -> WHILE Expr : Cmds','CmdWhile',4,'p_CmdWhile','uptparser.py',134),
  ('CmdFor -> FOR CmdAtrib TO Expr : Cmd','CmdFor',6,'p_CmdFor','uptparser.py',140),
  ('CmdBreak -> BREAK','CmdBreak',1,'p_CmdBreak','uptparser.py',146),
  ('CmdPrint -> PRINT ( ExprList )','CmdPrint',4,'p_CmdPrint','uptparser.py',152),
  ('CmdReturn -> RETURN Expr','CmdReturn',2,'p_CmdReturn','uptparser.py',158),
  ('CmdSeq -> { CmdList }','CmdSeq',3,'p_CmdSeq','uptparser.py',164),
  ('CmdList -> Cmd ; CmdList','CmdList',3,'p_CmdList','uptparser.py',170),
  ('CmdList -> Cmd','CmdList',1,'p_CmdList','uptparser.py',171),
  ('Expr -> INT','Expr',1,'p_Expr','uptparser.py',182),
  ('Expr -> TRUE','Expr',1,'p_Expr','uptparser.py',183),
  ('Expr -> FALSE','Expr',1,'p_Expr','uptparser.py',184),
  ('Expr -> ID','Expr',1,'p_Expr','uptparser.py',185),
  ('Expr -> Expr BinOp Expr','Expr',3,'p_Expr','uptparser.py',186),
  ('Expr -> UnOp Expr','Expr',2,'p_Expr','uptparser.py',187),
  ('Expr -> ( Expr )','Expr',3,'p_Expr','uptparser.py',188),
  ('Expr -> ID ( ExprList )','Expr',4,'p_Expr','uptparser.py',189),
  ('Expr -> READ ( )','Expr',3,'p_Expr','uptparser.py',190),
  ('BinOp -> +','BinOp',1,'p_BinOp','uptparser.py',209),
  ('BinOp -> -','BinOp',1,'p_BinOp','uptparser.py',210),
  ('BinOp -> *','BinOp',1,'p_BinOp','uptparser.py',211),
  ('BinOp -> DIVIDE','BinOp',1,'p_BinOp','uptparser.py',212),
  ('BinOp -> EXP','BinOp',1,'p_BinOp','uptparser.py',213),
  ('BinOp -> %','BinOp',1,'p_BinOp','uptparser.py',214),
  ('BinOp -> EQUAL','BinOp',1,'p_BinOp','uptparser.py',215),
  ('BinOp -> NOTEQUAL','BinOp',1,'p_BinOp','uptparser.py',216),
  ('BinOp -> <','BinOp',1,'p_BinOp','uptparser.py',217),
  ('BinOp -> >','BinOp',1,'p_BinOp','uptparser.py',218),
  ('BinOp -> LESSEQUAL','BinOp',1,'p_BinOp','uptparser.py',219),
  ('BinOp -> GREATEREQUAL','BinOp',1,'p_BinOp','uptparser.py',220),
  ('BinOp -> AND','BinOp',1,'p_BinOp','uptparser.py',221),
  ('BinOp -> OR','BinOp',1,'p_BinOp','uptparser.py',222),
  ('UnOp -> -','UnOp',1,'p_UnOp','uptparser.py',228),
  ('UnOp -> NOT','UnOp',1,'p_UnOp','uptparser.py',229),
  ('ExprList -> empty','ExprList',1,'p_ExprList','uptparser.py',235),
  ('ExprList -> ExprList1','ExprList',1,'p_ExprList','uptparser.py',236),
  ('ExprList1 -> Expr','ExprList1',1,'p_ExprList1','uptparser.py',242),
  ('ExprList1 -> Expr , ExprList1','ExprList1',3,'p_ExprList1','uptparser.py',243),
  ('VarDecls -> empty','VarDecls',1,'p_VarDecls','uptparser.py',254),
  ('VarDecls -> VarDecl VarDecls','VarDecls',2,'p_VarDecls','uptparser.py',255),
  ('VarDecl -> VAR ID : Type ;','VarDecl',5,'p_VarDecl','uptparser.py',262),
  ('Type -> INTEGER','Type',1,'p_Type','uptparser.py',268),
  ('Type -> BOOL','Type',1,'p_Type','uptparser.py',269),
  ('empty -> <empty>','empty',0,'p_empty','uptparser.py',277),
]
