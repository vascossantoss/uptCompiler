
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ProgramleftORleftANDrightNOTnonassocEQUALNOTEQUAL<>LESSEQUALGREATEREQUALleft+-left*DIVIDE%rightEXPrightUMINUSAND BOOL BREAK DIVIDE ELSE EQUAL EXP FALSE FOR FUNCTION GREATEREQUAL ID IF INT INTEGER LESSEQUAL NOT NOTEQUAL OR PRINT PROGRAM READ RETURN TO TRUE VAR VOID WHILE\n   Program : ProgramHeader ProgramBody\n   \n   ProgramHeader : PROGRAM ID ';' \n   \n   ProgramBody : FuncDecls VarDecls Cmd\n   \n   FuncDecls : empty \n             | Function FuncDecls\n   \n   Function : FunctionHeader \n            | FunctionBody\n   \n   FunctionHeader : FunctionType FUNCTION ID '(' ParamList ')' ':' \n   \n   FunctionType : INTEGER \n                | BOOL\n                | VOID\n   \n   FunctionBody : '{' VarDecls CmdList '}' \n   \n   ParamList : empty \n             | ParamList1\n   \n   ParamList1 : Param ',' ParamList1 \n              | Param\n   \n   Param : ID ':' Type\n   \n    Cmd : CmdAtrib \n        | CmdIf\n        | CmdWhile\n        | CmdFor\n        | CmdBreak\n        | CmdPrint\n        | CmdReturn\n        | CmdSeq\n    \n    CmdAtrib : ID '=' Expr\n    \n    CmdIf : IF Expr ':' Cmd \n          | IF Expr ':' Cmd ELSE ':' \n    \n    CmdWhile : WHILE Expr ':' Cmd \n    \n    CmdFor : FOR CmdAtrib TO Expr ':' Cmd \n    \n    CmdBreak : BREAK \n    \n    CmdPrint : PRINT '(' ExprList ')' \n    \n    CmdReturn : RETURN Expr \n    \n    CmdSeq : '{' CmdList '}' \n    \n    CmdList : Cmd ';' CmdList \n            | Cmd\n    \n    Expr : INT \n         | TRUE\n         | FALSE\n         | ID\n         | Expr BinOp Expr\n         | UnOp Expr  %prec UMINUS\n         | '(' Expr ')'\n         | ID '(' ExprList ')'\n         | READ '(' ')'\n    \n    BinOp : '+' \n          | '-'\n          | '*'\n          | DIVIDE\n          | EXP\n          | '%'\n          | EQUAL\n          | NOTEQUAL\n          | '<'\n          | '>'\n          | LESSEQUAL\n          | GREATEREQUAL\n          | AND\n          | OR\n    \n    UnOp : '-' \n         | NOT \n    \n    ExprList : empty \n             | ExprList1 \n    \n    ExprList1 : Expr\n              | Expr ',' ExprList1 \n    \n    VarDecls : empty \n             | VarDecl VarDecls\n    \n    VarDecl : VAR ID ':' Type ';' \n    \n    Type : INTEGER \n         | BOOL\n    \n    empty :\n    "
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,4,24,25,26,27,28,29,30,31,32,37,48,49,50,51,60,66,84,93,103,104,106,107,108,110,117,123,124,],[0,-1,-3,-18,-19,-20,-21,-22,-23,-24,-25,-31,-37,-38,-39,-40,-33,-26,-42,-34,-27,-41,-43,-45,-29,-32,-44,-28,-30,]),'VAR':([2,5,6,7,8,9,11,18,20,23,64,112,121,],[-71,19,-4,-71,-6,-7,19,19,-5,-2,-12,-68,-8,]),'ID':([2,3,5,6,7,8,9,11,16,17,18,19,20,21,22,23,34,35,36,39,40,41,46,52,53,55,56,59,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,111,112,115,118,121,],[-71,15,-71,-4,-71,-6,-7,-71,33,-66,-71,42,-5,43,33,-2,51,51,33,51,33,-67,51,51,51,-60,-61,51,97,-12,33,33,51,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,51,33,51,51,-68,97,33,-8,]),'IF':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,34,-66,-71,-5,34,-2,34,-67,-12,34,34,34,-68,34,-8,]),'WHILE':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,35,-66,-71,-5,35,-2,35,-67,-12,35,35,35,-68,35,-8,]),'FOR':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,36,-66,-71,-5,36,-2,36,-67,-12,36,36,36,-68,36,-8,]),'BREAK':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,37,-66,-71,-5,37,-2,37,-67,-12,37,37,37,-68,37,-8,]),'PRINT':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,38,-66,-71,-5,38,-2,38,-67,-12,38,38,38,-68,38,-8,]),'RETURN':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[-71,-71,-4,-71,-6,-7,-71,39,-66,-71,-5,39,-2,39,-67,-12,39,39,39,-68,39,-8,]),'{':([2,5,6,7,8,9,11,16,17,18,20,22,23,40,41,64,65,67,87,112,118,121,],[11,-71,-4,11,-6,-7,-71,40,-66,-71,-5,40,-2,40,-67,-12,40,40,40,-68,40,-8,]),'INTEGER':([2,7,8,9,23,62,64,113,121,],[12,12,-6,-7,-2,95,-12,95,-8,]),'BOOL':([2,7,8,9,23,62,64,113,121,],[13,13,-6,-7,-2,96,-12,96,-8,]),'VOID':([2,7,8,9,23,64,121,],[14,14,-6,-7,-2,-12,-8,]),'FUNCTION':([10,12,13,14,],[21,-9,-10,-11,]),';':([15,25,26,27,28,29,30,31,32,37,45,48,49,50,51,60,66,84,93,94,95,96,103,104,106,107,108,110,117,123,124,],[23,-18,-19,-20,-21,-22,-23,-24,-25,-31,65,-37,-38,-39,-40,-33,-26,-42,-34,112,-69,-70,-27,-41,-43,-45,-29,-32,-44,-28,-30,]),'}':([25,26,27,28,29,30,31,32,37,44,45,48,49,50,51,60,61,66,84,93,102,103,104,106,107,108,110,117,123,124,],[-18,-19,-20,-21,-22,-23,-24,-25,-31,64,-36,-37,-38,-39,-40,-33,93,-26,-42,-34,-35,-27,-41,-43,-45,-29,-32,-44,-28,-30,]),'ELSE':([25,26,27,28,29,30,31,32,37,48,49,50,51,60,66,84,93,103,104,106,107,108,110,117,123,124,],[-18,-19,-20,-21,-22,-23,-24,-25,-31,-37,-38,-39,-40,-33,-26,-42,-34,116,-41,-43,-45,-29,-32,-44,-28,-30,]),'=':([33,],[46,]),'INT':([34,35,39,46,52,53,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[48,48,48,48,48,48,-60,-61,48,48,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,48,48,48,]),'TRUE':([34,35,39,46,52,53,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[49,49,49,49,49,49,-60,-61,49,49,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,49,49,49,]),'FALSE':([34,35,39,46,52,53,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[50,50,50,50,50,50,-60,-61,50,50,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,50,50,50,]),'(':([34,35,38,39,43,46,51,52,53,54,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[53,53,59,53,63,53,83,53,53,86,-60,-61,53,53,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,53,53,53,]),'READ':([34,35,39,46,52,53,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[54,54,54,54,54,54,-60,-61,54,54,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,54,54,54,]),'-':([34,35,39,46,47,48,49,50,51,52,53,55,56,57,59,60,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,92,104,106,107,109,111,117,],[55,55,55,55,70,-37,-38,-39,-40,55,55,-60,-61,70,55,70,70,55,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,55,-42,70,55,70,70,-43,-45,70,55,-44,]),'NOT':([34,35,39,46,52,53,55,56,59,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,111,],[56,56,56,56,56,56,-60,-61,56,56,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,56,56,56,]),':':([42,47,48,49,50,51,57,84,97,104,106,107,109,114,116,117,],[62,67,-37,-38,-39,-40,87,-42,113,-41,-43,-45,118,121,123,-44,]),'+':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[69,-37,-38,-39,-40,69,69,69,-42,69,69,69,-43,-45,69,-44,]),'*':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[71,-37,-38,-39,-40,71,71,71,-42,71,71,71,-43,-45,71,-44,]),'DIVIDE':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[72,-37,-38,-39,-40,72,72,72,-42,72,72,72,-43,-45,72,-44,]),'EXP':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[73,-37,-38,-39,-40,73,73,73,-42,73,73,73,-43,-45,73,-44,]),'%':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[74,-37,-38,-39,-40,74,74,74,-42,74,74,74,-43,-45,74,-44,]),'EQUAL':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[75,-37,-38,-39,-40,75,75,75,-42,75,75,75,-43,-45,75,-44,]),'NOTEQUAL':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[76,-37,-38,-39,-40,76,76,76,-42,76,76,76,-43,-45,76,-44,]),'<':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[77,-37,-38,-39,-40,77,77,77,-42,77,77,77,-43,-45,77,-44,]),'>':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[78,-37,-38,-39,-40,78,78,78,-42,78,78,78,-43,-45,78,-44,]),'LESSEQUAL':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[79,-37,-38,-39,-40,79,79,79,-42,79,79,79,-43,-45,79,-44,]),'GREATEREQUAL':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[80,-37,-38,-39,-40,80,80,80,-42,80,80,80,-43,-45,80,-44,]),'AND':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[81,-37,-38,-39,-40,81,81,81,-42,81,81,81,-43,-45,81,-44,]),'OR':([47,48,49,50,51,57,60,66,84,85,92,104,106,107,109,117,],[82,-37,-38,-39,-40,82,82,82,-42,82,82,82,-43,-45,82,-44,]),'TO':([48,49,50,51,58,66,84,104,106,107,117,],[-37,-38,-39,-40,88,-26,-42,-41,-43,-45,-44,]),')':([48,49,50,51,59,63,83,84,85,86,89,90,91,92,95,96,98,99,100,101,104,105,106,107,117,119,120,122,],[-37,-38,-39,-40,-71,-71,-71,-42,106,107,110,-62,-63,-64,-69,-70,114,-13,-14,-16,-41,117,-43,-45,-44,-65,-17,-15,]),',':([48,49,50,51,84,92,95,96,101,104,106,107,117,120,],[-37,-38,-39,-40,-42,111,-69,-70,115,-41,-43,-45,-44,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ProgramHeader':([0,],[2,]),'ProgramBody':([2,],[4,]),'FuncDecls':([2,7,],[5,20,]),'empty':([2,5,7,11,18,59,63,83,],[6,17,6,17,17,90,99,90,]),'Function':([2,7,],[7,7,]),'FunctionHeader':([2,7,],[8,8,]),'FunctionBody':([2,7,],[9,9,]),'FunctionType':([2,7,],[10,10,]),'VarDecls':([5,11,18,],[16,22,41,]),'VarDecl':([5,11,18,],[18,18,18,]),'Cmd':([16,22,40,65,67,87,118,],[24,45,45,45,103,108,124,]),'CmdAtrib':([16,22,36,40,65,67,87,118,],[25,25,58,25,25,25,25,25,]),'CmdIf':([16,22,40,65,67,87,118,],[26,26,26,26,26,26,26,]),'CmdWhile':([16,22,40,65,67,87,118,],[27,27,27,27,27,27,27,]),'CmdFor':([16,22,40,65,67,87,118,],[28,28,28,28,28,28,28,]),'CmdBreak':([16,22,40,65,67,87,118,],[29,29,29,29,29,29,29,]),'CmdPrint':([16,22,40,65,67,87,118,],[30,30,30,30,30,30,30,]),'CmdReturn':([16,22,40,65,67,87,118,],[31,31,31,31,31,31,31,]),'CmdSeq':([16,22,40,65,67,87,118,],[32,32,32,32,32,32,32,]),'CmdList':([22,40,65,],[44,61,102,]),'Expr':([34,35,39,46,52,53,59,68,83,88,111,],[47,57,60,66,84,85,92,104,92,109,92,]),'UnOp':([34,35,39,46,52,53,59,68,83,88,111,],[52,52,52,52,52,52,52,52,52,52,52,]),'BinOp':([47,57,60,66,84,85,92,104,109,],[68,68,68,68,68,68,68,68,68,]),'ExprList':([59,83,],[89,105,]),'ExprList1':([59,83,111,],[91,91,119,]),'Type':([62,113,],[94,120,]),'ParamList':([63,],[98,]),'ParamList1':([63,115,],[100,122,]),'Param':([63,115,],[101,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ProgramHeader ProgramBody','Program',2,'p_program','uptparser.py',21),
  ('ProgramHeader -> PROGRAM ID ;','ProgramHeader',3,'p_ProgramHeader','uptparser.py',27),
  ('ProgramBody -> FuncDecls VarDecls Cmd','ProgramBody',3,'p_ProgramBody','uptparser.py',33),
  ('FuncDecls -> empty','FuncDecls',1,'p_FuncDecls','uptparser.py',39),
  ('FuncDecls -> Function FuncDecls','FuncDecls',2,'p_FuncDecls','uptparser.py',40),
  ('Function -> FunctionHeader','Function',1,'p_Function','uptparser.py',49),
  ('Function -> FunctionBody','Function',1,'p_Function','uptparser.py',50),
  ('FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :','FunctionHeader',7,'p_FunctionHeader','uptparser.py',56),
  ('FunctionType -> INTEGER','FunctionType',1,'p_FunctionType','uptparser.py',62),
  ('FunctionType -> BOOL','FunctionType',1,'p_FunctionType','uptparser.py',63),
  ('FunctionType -> VOID','FunctionType',1,'p_FunctionType','uptparser.py',64),
  ('FunctionBody -> { VarDecls CmdList }','FunctionBody',4,'p_FunctionBody','uptparser.py',70),
  ('ParamList -> empty','ParamList',1,'p_ParamList','uptparser.py',76),
  ('ParamList -> ParamList1','ParamList',1,'p_ParamList','uptparser.py',77),
  ('ParamList1 -> Param , ParamList1','ParamList1',3,'p_ParamList1','uptparser.py',83),
  ('ParamList1 -> Param','ParamList1',1,'p_ParamList1','uptparser.py',84),
  ('Param -> ID : Type','Param',3,'p_Param','uptparser.py',94),
  ('Cmd -> CmdAtrib','Cmd',1,'p_Cmd','uptparser.py',102),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','uptparser.py',103),
  ('Cmd -> CmdWhile','Cmd',1,'p_Cmd','uptparser.py',104),
  ('Cmd -> CmdFor','Cmd',1,'p_Cmd','uptparser.py',105),
  ('Cmd -> CmdBreak','Cmd',1,'p_Cmd','uptparser.py',106),
  ('Cmd -> CmdPrint','Cmd',1,'p_Cmd','uptparser.py',107),
  ('Cmd -> CmdReturn','Cmd',1,'p_Cmd','uptparser.py',108),
  ('Cmd -> CmdSeq','Cmd',1,'p_Cmd','uptparser.py',109),
  ('CmdAtrib -> ID = Expr','CmdAtrib',3,'p_CmdAtrib','uptparser.py',115),
  ('CmdIf -> IF Expr : Cmd','CmdIf',4,'p_CmdIf','uptparser.py',121),
  ('CmdIf -> IF Expr : Cmd ELSE :','CmdIf',6,'p_CmdIf','uptparser.py',122),
  ('CmdWhile -> WHILE Expr : Cmd','CmdWhile',4,'p_CmdWhile','uptparser.py',128),
  ('CmdFor -> FOR CmdAtrib TO Expr : Cmd','CmdFor',6,'p_CmdFor','uptparser.py',134),
  ('CmdBreak -> BREAK','CmdBreak',1,'p_CmdBreak','uptparser.py',140),
  ('CmdPrint -> PRINT ( ExprList )','CmdPrint',4,'p_CmdPrint','uptparser.py',146),
  ('CmdReturn -> RETURN Expr','CmdReturn',2,'p_CmdReturn','uptparser.py',152),
  ('CmdSeq -> { CmdList }','CmdSeq',3,'p_CmdSeq','uptparser.py',158),
  ('CmdList -> Cmd ; CmdList','CmdList',3,'p_CmdList','uptparser.py',164),
  ('CmdList -> Cmd','CmdList',1,'p_CmdList','uptparser.py',165),
  ('Expr -> INT','Expr',1,'p_Expr','uptparser.py',176),
  ('Expr -> TRUE','Expr',1,'p_Expr','uptparser.py',177),
  ('Expr -> FALSE','Expr',1,'p_Expr','uptparser.py',178),
  ('Expr -> ID','Expr',1,'p_Expr','uptparser.py',179),
  ('Expr -> Expr BinOp Expr','Expr',3,'p_Expr','uptparser.py',180),
  ('Expr -> UnOp Expr','Expr',2,'p_Expr','uptparser.py',181),
  ('Expr -> ( Expr )','Expr',3,'p_Expr','uptparser.py',182),
  ('Expr -> ID ( ExprList )','Expr',4,'p_Expr','uptparser.py',183),
  ('Expr -> READ ( )','Expr',3,'p_Expr','uptparser.py',184),
  ('BinOp -> +','BinOp',1,'p_BinOp','uptparser.py',203),
  ('BinOp -> -','BinOp',1,'p_BinOp','uptparser.py',204),
  ('BinOp -> *','BinOp',1,'p_BinOp','uptparser.py',205),
  ('BinOp -> DIVIDE','BinOp',1,'p_BinOp','uptparser.py',206),
  ('BinOp -> EXP','BinOp',1,'p_BinOp','uptparser.py',207),
  ('BinOp -> %','BinOp',1,'p_BinOp','uptparser.py',208),
  ('BinOp -> EQUAL','BinOp',1,'p_BinOp','uptparser.py',209),
  ('BinOp -> NOTEQUAL','BinOp',1,'p_BinOp','uptparser.py',210),
  ('BinOp -> <','BinOp',1,'p_BinOp','uptparser.py',211),
  ('BinOp -> >','BinOp',1,'p_BinOp','uptparser.py',212),
  ('BinOp -> LESSEQUAL','BinOp',1,'p_BinOp','uptparser.py',213),
  ('BinOp -> GREATEREQUAL','BinOp',1,'p_BinOp','uptparser.py',214),
  ('BinOp -> AND','BinOp',1,'p_BinOp','uptparser.py',215),
  ('BinOp -> OR','BinOp',1,'p_BinOp','uptparser.py',216),
  ('UnOp -> -','UnOp',1,'p_UnOp','uptparser.py',222),
  ('UnOp -> NOT','UnOp',1,'p_UnOp','uptparser.py',223),
  ('ExprList -> empty','ExprList',1,'p_ExprList','uptparser.py',229),
  ('ExprList -> ExprList1','ExprList',1,'p_ExprList','uptparser.py',230),
  ('ExprList1 -> Expr','ExprList1',1,'p_ExprList1','uptparser.py',236),
  ('ExprList1 -> Expr , ExprList1','ExprList1',3,'p_ExprList1','uptparser.py',237),
  ('VarDecls -> empty','VarDecls',1,'p_VarDecls','uptparser.py',248),
  ('VarDecls -> VarDecl VarDecls','VarDecls',2,'p_VarDecls','uptparser.py',249),
  ('VarDecl -> VAR ID : Type ;','VarDecl',5,'p_VarDecl','uptparser.py',256),
  ('Type -> INTEGER','Type',1,'p_Type','uptparser.py',262),
  ('Type -> BOOL','Type',1,'p_Type','uptparser.py',263),
  ('empty -> <empty>','empty',0,'p_empty','uptparser.py',271),
]
