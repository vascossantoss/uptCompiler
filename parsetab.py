
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ProgramleftORleftANDnonassocEQUALNOTEQUAL<>LESSEQUALGREATEREQUALleft+-left*DIVIDE%rightEXPAND BOOL BREAK DIVIDE ELSE EQUAL EXP FALSE FOR FUNCTION GREATEREQUAL ID IF INT INTEGER LESSEQUAL NOT NOTEQUAL OR PRINT PROGRAM READ RETURN TO TRUE VAR VOID WHILEProgram : ProgramHeader \n              | ProgramBodyProgramHeader : PROGRAM ID ';' ProgramBody : FuncDecls VarDecls CmdFuncDecls : empty \n              | Function FuncDeclsFunction : FunctionHeader \n               | FunctionBodyFunctionHeader : FunctionType FUNCTION ID '(' ParamList ')' ':' FunctionType : INTEGER \n                   | BOOL\n                   | VOIDFunctionBody : '{' VarDecls CmdList '}' ParamList : empty \n                | ParamList1ParamList1 : Param ',' ParamList1 \n                 | ParamParam : ID ':' TypeCmd : CmdAtrib \n           | CmdIf\n           | CmdWhile\n           | CmdFor\n           | CmdBreak\n           | CmdPrint\n           | CmdReturn\n           | CmdSeq\n           CmdAtrib : ID \n                | ExprCmdIf : IF Expr ':' Cmd \n             | IF Expr ':' Cmd ELSE ':' CmdWhile : WHILE Expr ':' Cmd CmdFor : FOR CmdAtrib TO Expr ':' Cmd CmdBreak : BREAK CmdPrint : PRINT '(' ExprList ')' CmdReturn : RETURN Expr CmdSeq : '{' CmdList '}' CmdList : Cmd ';' CmdList \n               | CmdExpr : INT \n            | TRUE\n            | FALSE\n            | ID\n            | Expr BinOp Expr\n            | UnOp Expr\n            | '(' Expr ')'\n            | ID '(' ExprList ')'\n            | READ '(' ')'\n           BinOp : '+' \n             | '-'\n             | '*'\n             | DIVIDE\n             | EXP\n             | '%'\n             | EQUAL\n             | NOTEQUAL\n             | '<'\n             | '>'\n             | LESSEQUAL\n             | GREATEREQUAL\n             | AND\n             | OR\n           UnOp : '-' \n            | NOT \n            ExprList : empty \n                | ExprList1 ExprList1 : Expr\n                 | Expr ',' ExprList1 VarDecls : empty \n                | VarDecl VarDeclsVarDecl : VAR ID ':' Type ';' Type : INTEGER \n                | BOOLempty :"
    
_lr_action_items = {'PROGRAM':([0,],[4,]),'VAR':([0,5,6,7,8,9,11,18,20,83,112,120,],[-73,19,-5,-73,-7,-8,19,19,-6,-13,-70,-9,]),'ID':([0,4,5,6,7,8,9,11,16,17,18,19,20,21,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,82,83,84,90,91,92,107,112,115,118,120,],[-73,15,-73,-5,-73,-7,-8,-73,33,-68,-73,51,-6,52,33,72,72,33,72,72,33,72,-62,-63,-69,72,72,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,72,100,-13,33,33,33,72,72,-70,100,33,-9,]),'IF':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,35,-68,-73,-6,35,35,-69,-13,35,35,35,-70,35,-9,]),'WHILE':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,36,-68,-73,-6,36,36,-69,-13,36,36,36,-70,36,-9,]),'FOR':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,37,-68,-73,-6,37,37,-69,-13,37,37,37,-70,37,-9,]),'BREAK':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,38,-68,-73,-6,38,38,-69,-13,38,38,38,-70,38,-9,]),'PRINT':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,39,-68,-73,-6,39,39,-69,-13,39,39,39,-70,39,-9,]),'RETURN':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,41,-68,-73,-6,41,41,-69,-13,41,41,41,-70,41,-9,]),'{':([0,5,6,7,8,9,11,16,17,18,20,22,42,50,83,84,90,91,112,118,120,],[11,-73,-5,11,-7,-8,-73,42,-68,-73,-6,42,42,-69,-13,42,42,42,-70,42,-9,]),'INT':([0,5,6,7,8,9,11,16,17,18,20,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,43,-68,-73,-6,43,43,43,43,43,43,43,43,-62,-63,-69,43,43,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,43,-13,43,43,43,43,43,-70,43,-9,]),'TRUE':([0,5,6,7,8,9,11,16,17,18,20,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,44,-68,-73,-6,44,44,44,44,44,44,44,44,-62,-63,-69,44,44,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,44,-13,44,44,44,44,44,-70,44,-9,]),'FALSE':([0,5,6,7,8,9,11,16,17,18,20,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,45,-68,-73,-6,45,45,45,45,45,45,45,45,-62,-63,-69,45,45,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,45,-13,45,45,45,45,45,-70,45,-9,]),'(':([0,5,6,7,8,9,11,16,17,18,20,22,33,35,36,37,39,40,41,42,46,47,48,49,50,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,40,-68,-73,-6,40,55,40,40,40,75,40,40,40,40,80,-62,-63,-69,82,40,40,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,55,40,-13,40,40,40,40,40,-70,40,-9,]),'READ':([0,5,6,7,8,9,11,16,17,18,20,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,47,-68,-73,-6,47,47,47,47,47,47,47,47,-62,-63,-69,47,47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,47,-13,47,47,47,47,47,-70,47,-9,]),'-':([0,5,6,7,8,9,11,16,17,18,20,22,33,34,35,36,37,40,41,42,43,44,45,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,79,83,84,88,89,90,91,92,94,96,106,107,110,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,48,-68,-73,-6,48,-42,58,48,48,48,48,48,48,-39,-40,-41,48,-62,-63,-69,48,48,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,58,-42,58,48,58,58,58,-13,48,58,58,48,48,48,-45,-47,-46,48,58,-70,48,-9,]),'NOT':([0,5,6,7,8,9,11,16,17,18,20,22,35,36,37,40,41,42,46,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,83,84,90,91,92,107,112,118,120,],[-73,-73,-5,-73,-7,-8,-73,49,-68,-73,-6,49,49,49,49,49,49,49,49,-62,-63,-69,49,49,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,49,-13,49,49,49,49,49,-70,49,-9,]),'INTEGER':([0,7,8,9,81,83,113,120,],[12,12,-7,-8,98,-13,98,-9,]),'BOOL':([0,7,8,9,81,83,113,120,],[13,13,-7,-8,99,-13,99,-9,]),'VOID':([0,7,8,9,83,120,],[14,14,-7,-8,-13,-9,]),'$end':([1,2,3,23,24,25,26,27,28,29,30,31,32,33,34,38,43,44,45,72,77,79,89,94,95,96,106,108,109,111,122,123,],[0,-1,-2,-3,-4,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-39,-40,-41,-42,-35,-44,-43,-45,-36,-47,-46,-29,-31,-34,-30,-32,]),'FUNCTION':([10,12,13,14,],[21,-10,-11,-12,]),';':([15,25,26,27,28,29,30,31,32,33,34,38,43,44,45,54,72,77,79,89,94,95,96,97,98,99,106,108,109,111,122,123,],[23,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-39,-40,-41,84,-42,-35,-44,-43,-45,-36,-47,112,-71,-72,-46,-29,-31,-34,-30,-32,]),'}':([25,26,27,28,29,30,31,32,33,34,38,43,44,45,53,54,72,77,78,79,89,94,95,96,105,106,108,109,111,122,123,],[-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-39,-40,-41,83,-38,-42,-35,95,-44,-43,-45,-36,-47,-37,-46,-29,-31,-34,-30,-32,]),'ELSE':([25,26,27,28,29,30,31,32,33,34,38,43,44,45,72,77,79,89,94,95,96,106,108,109,111,122,123,],[-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-33,-39,-40,-41,-42,-35,-44,-43,-45,-36,-47,-46,117,-31,-34,-30,-32,]),'TO':([33,34,43,44,45,72,74,79,89,94,96,106,],[-27,-28,-39,-40,-41,-42,92,-44,-43,-45,-47,-46,]),'+':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,57,-39,-40,-41,57,-42,57,57,57,57,57,57,-45,-47,-46,57,]),'*':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,59,-39,-40,-41,59,-42,59,59,59,59,59,59,-45,-47,-46,59,]),'DIVIDE':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,60,-39,-40,-41,60,-42,60,60,60,60,60,60,-45,-47,-46,60,]),'EXP':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,61,-39,-40,-41,61,-42,61,61,61,61,61,61,-45,-47,-46,61,]),'%':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,62,-39,-40,-41,62,-42,62,62,62,62,62,62,-45,-47,-46,62,]),'EQUAL':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,63,-39,-40,-41,63,-42,63,63,63,63,63,63,-45,-47,-46,63,]),'NOTEQUAL':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,64,-39,-40,-41,64,-42,64,64,64,64,64,64,-45,-47,-46,64,]),'<':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,65,-39,-40,-41,65,-42,65,65,65,65,65,65,-45,-47,-46,65,]),'>':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,66,-39,-40,-41,66,-42,66,66,66,66,66,66,-45,-47,-46,66,]),'LESSEQUAL':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,67,-39,-40,-41,67,-42,67,67,67,67,67,67,-45,-47,-46,67,]),'GREATEREQUAL':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,68,-39,-40,-41,68,-42,68,68,68,68,68,68,-45,-47,-46,68,]),'AND':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,69,-39,-40,-41,69,-42,69,69,69,69,69,69,-45,-47,-46,69,]),'OR':([33,34,43,44,45,71,72,73,76,77,79,88,89,94,96,106,110,],[-42,70,-39,-40,-41,70,-42,70,70,70,70,70,70,-45,-47,-46,70,]),':':([43,44,45,51,71,72,73,79,89,94,96,100,106,110,114,117,],[-39,-40,-41,81,90,-42,91,-44,-43,-45,-47,113,-46,118,120,122,]),')':([43,44,45,55,72,75,76,79,80,82,85,86,87,88,89,93,94,96,98,99,101,102,103,104,106,116,119,121,],[-39,-40,-41,-73,-42,-73,94,-44,96,-73,106,-64,-65,-66,-43,111,-45,-47,-71,-72,114,-14,-15,-17,-46,-67,-18,-16,]),',':([43,44,45,72,79,88,89,94,96,98,99,104,106,119,],[-39,-40,-41,-42,-44,107,-43,-45,-47,-71,-72,115,-46,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ProgramHeader':([0,],[2,]),'ProgramBody':([0,],[3,]),'FuncDecls':([0,7,],[5,20,]),'empty':([0,5,7,11,18,55,75,82,],[6,17,6,17,17,86,86,102,]),'Function':([0,7,],[7,7,]),'FunctionHeader':([0,7,],[8,8,]),'FunctionBody':([0,7,],[9,9,]),'FunctionType':([0,7,],[10,10,]),'VarDecls':([5,11,18,],[16,22,50,]),'VarDecl':([5,11,18,],[18,18,18,]),'Cmd':([16,22,42,84,90,91,118,],[24,54,54,54,108,109,123,]),'CmdAtrib':([16,22,37,42,84,90,91,118,],[25,25,74,25,25,25,25,25,]),'CmdIf':([16,22,42,84,90,91,118,],[26,26,26,26,26,26,26,]),'CmdWhile':([16,22,42,84,90,91,118,],[27,27,27,27,27,27,27,]),'CmdFor':([16,22,42,84,90,91,118,],[28,28,28,28,28,28,28,]),'CmdBreak':([16,22,42,84,90,91,118,],[29,29,29,29,29,29,29,]),'CmdPrint':([16,22,42,84,90,91,118,],[30,30,30,30,30,30,30,]),'CmdReturn':([16,22,42,84,90,91,118,],[31,31,31,31,31,31,31,]),'CmdSeq':([16,22,42,84,90,91,118,],[32,32,32,32,32,32,32,]),'Expr':([16,22,35,36,37,40,41,42,46,55,56,75,84,90,91,92,107,118,],[34,34,71,73,34,76,77,34,79,88,89,88,34,34,34,110,88,34,]),'UnOp':([16,22,35,36,37,40,41,42,46,55,56,75,84,90,91,92,107,118,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CmdList':([22,42,84,],[53,78,105,]),'BinOp':([34,71,73,76,77,79,88,89,110,],[56,56,56,56,56,56,56,56,56,]),'ExprList':([55,75,],[85,93,]),'ExprList1':([55,75,107,],[87,87,116,]),'Type':([81,113,],[97,119,]),'ParamList':([82,],[101,]),'ParamList1':([82,115,],[103,121,]),'Param':([82,115,],[104,104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ProgramHeader','Program',1,'p_program','uptparser.py',20),
  ('Program -> ProgramBody','Program',1,'p_program','uptparser.py',21),
  ('ProgramHeader -> PROGRAM ID ;','ProgramHeader',3,'p_ProgramHeader','uptparser.py',24),
  ('ProgramBody -> FuncDecls VarDecls Cmd','ProgramBody',3,'p_ProgramBody','uptparser.py',27),
  ('FuncDecls -> empty','FuncDecls',1,'p_FuncDecls','uptparser.py',30),
  ('FuncDecls -> Function FuncDecls','FuncDecls',2,'p_FuncDecls','uptparser.py',31),
  ('Function -> FunctionHeader','Function',1,'p_Function','uptparser.py',36),
  ('Function -> FunctionBody','Function',1,'p_Function','uptparser.py',37),
  ('FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :','FunctionHeader',7,'p_FunctionHeader','uptparser.py',40),
  ('FunctionType -> INTEGER','FunctionType',1,'p_FunctionType','uptparser.py',43),
  ('FunctionType -> BOOL','FunctionType',1,'p_FunctionType','uptparser.py',44),
  ('FunctionType -> VOID','FunctionType',1,'p_FunctionType','uptparser.py',45),
  ('FunctionBody -> { VarDecls CmdList }','FunctionBody',4,'p_FunctionBody','uptparser.py',48),
  ('ParamList -> empty','ParamList',1,'p_ParamList','uptparser.py',51),
  ('ParamList -> ParamList1','ParamList',1,'p_ParamList','uptparser.py',52),
  ('ParamList1 -> Param , ParamList1','ParamList1',3,'p_ParamList1','uptparser.py',55),
  ('ParamList1 -> Param','ParamList1',1,'p_ParamList1','uptparser.py',56),
  ('Param -> ID : Type','Param',3,'p_Param','uptparser.py',59),
  ('Cmd -> CmdAtrib','Cmd',1,'p_Cmd','uptparser.py',64),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','uptparser.py',65),
  ('Cmd -> CmdWhile','Cmd',1,'p_Cmd','uptparser.py',66),
  ('Cmd -> CmdFor','Cmd',1,'p_Cmd','uptparser.py',67),
  ('Cmd -> CmdBreak','Cmd',1,'p_Cmd','uptparser.py',68),
  ('Cmd -> CmdPrint','Cmd',1,'p_Cmd','uptparser.py',69),
  ('Cmd -> CmdReturn','Cmd',1,'p_Cmd','uptparser.py',70),
  ('Cmd -> CmdSeq','Cmd',1,'p_Cmd','uptparser.py',71),
  ('CmdAtrib -> ID','CmdAtrib',1,'p_CmdAtrib','uptparser.py',75),
  ('CmdAtrib -> Expr','CmdAtrib',1,'p_CmdAtrib','uptparser.py',76),
  ('CmdIf -> IF Expr : Cmd','CmdIf',4,'p_CmdIf','uptparser.py',79),
  ('CmdIf -> IF Expr : Cmd ELSE :','CmdIf',6,'p_CmdIf','uptparser.py',80),
  ('CmdWhile -> WHILE Expr : Cmd','CmdWhile',4,'p_CmdWhile','uptparser.py',83),
  ('CmdFor -> FOR CmdAtrib TO Expr : Cmd','CmdFor',6,'p_CmdFor','uptparser.py',86),
  ('CmdBreak -> BREAK','CmdBreak',1,'p_CmdBreak','uptparser.py',89),
  ('CmdPrint -> PRINT ( ExprList )','CmdPrint',4,'p_CmdPrint','uptparser.py',92),
  ('CmdReturn -> RETURN Expr','CmdReturn',2,'p_CmdReturn','uptparser.py',95),
  ('CmdSeq -> { CmdList }','CmdSeq',3,'p_CmdSeq','uptparser.py',98),
  ('CmdList -> Cmd ; CmdList','CmdList',3,'p_CmdList','uptparser.py',101),
  ('CmdList -> Cmd','CmdList',1,'p_CmdList','uptparser.py',102),
  ('Expr -> INT','Expr',1,'p_Expr','uptparser.py',107),
  ('Expr -> TRUE','Expr',1,'p_Expr','uptparser.py',108),
  ('Expr -> FALSE','Expr',1,'p_Expr','uptparser.py',109),
  ('Expr -> ID','Expr',1,'p_Expr','uptparser.py',110),
  ('Expr -> Expr BinOp Expr','Expr',3,'p_Expr','uptparser.py',111),
  ('Expr -> UnOp Expr','Expr',2,'p_Expr','uptparser.py',112),
  ('Expr -> ( Expr )','Expr',3,'p_Expr','uptparser.py',113),
  ('Expr -> ID ( ExprList )','Expr',4,'p_Expr','uptparser.py',114),
  ('Expr -> READ ( )','Expr',3,'p_Expr','uptparser.py',115),
  ('BinOp -> +','BinOp',1,'p_BinOp','uptparser.py',119),
  ('BinOp -> -','BinOp',1,'p_BinOp','uptparser.py',120),
  ('BinOp -> *','BinOp',1,'p_BinOp','uptparser.py',121),
  ('BinOp -> DIVIDE','BinOp',1,'p_BinOp','uptparser.py',122),
  ('BinOp -> EXP','BinOp',1,'p_BinOp','uptparser.py',123),
  ('BinOp -> %','BinOp',1,'p_BinOp','uptparser.py',124),
  ('BinOp -> EQUAL','BinOp',1,'p_BinOp','uptparser.py',125),
  ('BinOp -> NOTEQUAL','BinOp',1,'p_BinOp','uptparser.py',126),
  ('BinOp -> <','BinOp',1,'p_BinOp','uptparser.py',127),
  ('BinOp -> >','BinOp',1,'p_BinOp','uptparser.py',128),
  ('BinOp -> LESSEQUAL','BinOp',1,'p_BinOp','uptparser.py',129),
  ('BinOp -> GREATEREQUAL','BinOp',1,'p_BinOp','uptparser.py',130),
  ('BinOp -> AND','BinOp',1,'p_BinOp','uptparser.py',131),
  ('BinOp -> OR','BinOp',1,'p_BinOp','uptparser.py',132),
  ('UnOp -> -','UnOp',1,'p_UnOp','uptparser.py',136),
  ('UnOp -> NOT','UnOp',1,'p_UnOp','uptparser.py',137),
  ('ExprList -> empty','ExprList',1,'p_ExprList','uptparser.py',141),
  ('ExprList -> ExprList1','ExprList',1,'p_ExprList','uptparser.py',142),
  ('ExprList1 -> Expr','ExprList1',1,'p_ExprList1','uptparser.py',145),
  ('ExprList1 -> Expr , ExprList1','ExprList1',3,'p_ExprList1','uptparser.py',146),
  ('VarDecls -> empty','VarDecls',1,'p_VarDecls','uptparser.py',153),
  ('VarDecls -> VarDecl VarDecls','VarDecls',2,'p_VarDecls','uptparser.py',154),
  ('VarDecl -> VAR ID : Type ;','VarDecl',5,'p_VarDecl','uptparser.py',158),
  ('Type -> INTEGER','Type',1,'p_Type','uptparser.py',161),
  ('Type -> BOOL','Type',1,'p_Type','uptparser.py',162),
  ('empty -> <empty>','empty',0,'p_empty','uptparser.py',196),
]
