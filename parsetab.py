
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ProgramleftORleftANDrightNOTnonassocEQUALNOTEQUAL<>LESSEQUALGREATEREQUALleft+-left*/%rightEXPrightUMINUSAND BOOL BREAK ELSE EQUAL EXP FALSE FOR FUNCTION GREATEREQUAL ID IF INT INTEGER LESSEQUAL NOT NOTEQUAL OR PRINT PROGRAM READ RETURN TO TRUE VAR VOID WHILE\n   Program : ProgramHeader ProgramBody\n   \n   ProgramHeader : PROGRAM ID ';' \n   \n   ProgramBody : FuncDecls VarDecls Cmd\n   \n   FuncDecls : empty \n             | Function FuncDecls\n   \n   Function : FunctionHeader  FunctionBody\n   \n   FunctionHeader : FunctionType FUNCTION ID '(' ParamList ')' ':' \n   \n   FunctionType : INTEGER \n                | BOOL\n                | VOID\n   \n   FunctionBody : '{' VarDecls CmdList '}' \n   \n   ParamList : empty \n             | ParamList1\n   \n   ParamList1 : Param ',' ParamList1 \n              | Param\n   \n   Param : ID ':' Type\n   \n    Cmd : CmdAtrib \n        | CmdIf\n        | CmdWhile\n        | CmdFor\n        | CmdBreak\n        | CmdPrint\n        | CmdReturn\n        | CmdSeq\n    \n    CmdAtrib : ID \n             | Expr\n    \n    CmdIf : IF Expr ':' Cmd \n          | IF Expr ':' Cmd ELSE ':' \n    \n    CmdWhile : WHILE Expr ':' Cmd \n    \n    CmdFor : FOR CmdAtrib TO Expr ':' Cmd \n    \n    CmdBreak : BREAK \n    \n    CmdPrint : PRINT '(' ExprList ')' \n    \n    CmdReturn : RETURN Expr \n    \n    CmdSeq : '{' CmdList '}' \n    \n    CmdList : Cmd ';' CmdList \n            | Cmd\n    \n    Expr : INT \n         | TRUE\n         | FALSE\n         | ID\n         | Expr BinOp Expr\n         | UnOp Expr  %prec UMINUS\n         | '(' Expr ')'\n         | ID '(' ExprList ')'\n         | READ '(' ')'\n    \n    BinOp : '+' \n          | '-'\n          | '*'\n          | '/'\n          | EXP\n          | '%'\n          | '='\n          | EQUAL\n          | NOTEQUAL\n          | '<'\n          | '>'\n          | LESSEQUAL\n          | GREATEREQUAL\n          | AND\n          | OR\n    \n    UnOp : '-' \n         | NOT \n    \n    ExprList : empty \n             | ExprList1 \n    \n    ExprList1 : Expr\n              | Expr ',' ExprList1 \n    \n    VarDecls : empty \n             | VarDecl VarDecls\n    \n    VarDecl : VAR ID ':' Type ';' \n    \n    Type : INTEGER \n         | BOOL\n    \n    empty :\n    "
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,4,23,24,25,26,27,28,29,30,31,32,33,37,42,43,44,71,76,79,88,93,94,96,106,108,109,111,123,124,],[0,-1,-3,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-31,-37,-38,-39,-40,-33,-42,-41,-43,-34,-45,-44,-27,-29,-32,-28,-30,]),'VAR':([2,5,6,7,16,18,19,20,22,100,113,],[-72,17,-4,-72,17,-5,-6,17,-2,-11,-69,]),'ID':([2,3,5,6,7,14,15,16,17,18,19,20,21,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,83,89,90,91,95,100,107,113,116,119,],[-72,13,-72,-4,-72,32,-67,-72,50,-5,-6,-72,52,-2,71,71,32,71,71,32,71,-61,-62,-68,32,71,71,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,71,101,32,32,71,32,-11,71,-69,101,32,]),'IF':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,34,-67,-72,-5,-6,-72,-2,34,-68,34,34,34,34,-11,-69,34,]),'WHILE':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,35,-67,-72,-5,-6,-72,-2,35,-68,35,35,35,35,-11,-69,35,]),'FOR':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,36,-67,-72,-5,-6,-72,-2,36,-68,36,36,36,36,-11,-69,36,]),'BREAK':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,37,-67,-72,-5,-6,-72,-2,37,-68,37,37,37,37,-11,-69,37,]),'PRINT':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,38,-67,-72,-5,-6,-72,-2,38,-68,38,38,38,38,-11,-69,38,]),'RETURN':([2,5,6,7,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,],[-72,-72,-4,-72,40,-67,-72,-5,-6,-72,-2,40,-68,40,40,40,40,-11,-69,40,]),'{':([2,5,6,7,8,14,15,16,18,19,20,22,41,49,51,89,90,95,100,113,119,121,],[-72,-72,-4,-72,20,41,-67,-72,-5,-6,-72,-2,41,-68,41,41,41,41,-11,-69,41,-7,]),'INT':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,42,-67,-72,-5,-6,-72,-2,42,42,42,42,42,42,42,-61,-62,-68,42,42,42,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,42,42,42,42,42,-11,42,-69,42,]),'TRUE':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,43,-67,-72,-5,-6,-72,-2,43,43,43,43,43,43,43,-61,-62,-68,43,43,43,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,43,43,43,43,43,-11,43,-69,43,]),'FALSE':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,44,-67,-72,-5,-6,-72,-2,44,44,44,44,44,44,44,-61,-62,-68,44,44,44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,44,44,44,44,44,-11,44,-69,44,]),'(':([2,5,6,7,14,15,16,18,19,20,22,32,34,35,36,38,39,40,41,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,39,-67,-72,-5,-6,-72,-2,53,39,39,39,74,39,39,39,39,80,-61,-62,-68,39,83,39,39,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,53,39,39,39,39,39,-11,39,-69,39,]),'READ':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,46,-67,-72,-5,-6,-72,-2,46,46,46,46,46,46,46,-61,-62,-68,46,46,46,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,46,46,46,46,46,-11,46,-69,46,]),'-':([2,5,6,7,14,15,16,18,19,20,22,32,33,34,35,36,39,40,41,42,43,44,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,79,87,88,89,90,91,93,95,96,100,106,107,110,113,119,],[-72,-72,-4,-72,47,-67,-72,-5,-6,-72,-2,-40,56,47,47,47,47,47,47,-37,-38,-39,47,-61,-62,-68,47,47,47,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,56,-40,56,47,56,56,-42,56,56,47,47,47,-43,47,-45,-11,-44,47,56,-69,47,]),'NOT':([2,5,6,7,14,15,16,18,19,20,22,34,35,36,39,40,41,45,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,89,90,91,95,100,107,113,119,],[-72,-72,-4,-72,48,-67,-72,-5,-6,-72,-2,48,48,48,48,48,48,48,-61,-62,-68,48,48,48,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,48,48,48,48,48,-11,48,-69,48,]),'INTEGER':([2,7,19,22,81,100,114,],[10,10,-6,-2,98,-11,98,]),'BOOL':([2,7,19,22,81,100,114,],[11,11,-6,-2,99,-11,99,]),'VOID':([2,7,19,22,100,],[12,12,-6,-2,-11,]),'FUNCTION':([9,10,11,12,],[21,-8,-9,-10,]),';':([13,24,25,26,27,28,29,30,31,32,33,37,42,43,44,71,76,78,79,88,93,94,96,97,98,99,106,108,109,111,123,124,],[22,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-31,-37,-38,-39,-40,-33,95,-42,-41,-43,-34,-45,113,-70,-71,-44,-27,-29,-32,-28,-30,]),'}':([24,25,26,27,28,29,30,31,32,33,37,42,43,44,71,76,77,78,79,82,88,93,94,96,106,108,109,111,112,123,124,],[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-31,-37,-38,-39,-40,-33,94,-36,-42,100,-41,-43,-34,-45,-44,-27,-29,-32,-35,-28,-30,]),'ELSE':([24,25,26,27,28,29,30,31,32,33,37,42,43,44,71,76,79,88,93,94,96,106,108,109,111,123,124,],[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-31,-37,-38,-39,-40,-33,-42,-41,-43,-34,-45,-44,118,-29,-32,-28,-30,]),'TO':([32,33,42,43,44,71,73,79,88,93,96,106,],[-25,-26,-37,-38,-39,-40,91,-42,-41,-43,-45,-44,]),'+':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,55,-37,-38,-39,55,-40,55,55,55,-42,55,55,-43,-45,-44,55,]),'*':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,57,-37,-38,-39,57,-40,57,57,57,-42,57,57,-43,-45,-44,57,]),'/':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,58,-37,-38,-39,58,-40,58,58,58,-42,58,58,-43,-45,-44,58,]),'EXP':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,59,-37,-38,-39,59,-40,59,59,59,-42,59,59,-43,-45,-44,59,]),'%':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,60,-37,-38,-39,60,-40,60,60,60,-42,60,60,-43,-45,-44,60,]),'=':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,61,-37,-38,-39,61,-40,61,61,61,-42,61,61,-43,-45,-44,61,]),'EQUAL':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,62,-37,-38,-39,62,-40,62,62,62,-42,62,62,-43,-45,-44,62,]),'NOTEQUAL':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,63,-37,-38,-39,63,-40,63,63,63,-42,63,63,-43,-45,-44,63,]),'<':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,64,-37,-38,-39,64,-40,64,64,64,-42,64,64,-43,-45,-44,64,]),'>':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,65,-37,-38,-39,65,-40,65,65,65,-42,65,65,-43,-45,-44,65,]),'LESSEQUAL':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,66,-37,-38,-39,66,-40,66,66,66,-42,66,66,-43,-45,-44,66,]),'GREATEREQUAL':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,67,-37,-38,-39,67,-40,67,67,67,-42,67,67,-43,-45,-44,67,]),'AND':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,68,-37,-38,-39,68,-40,68,68,68,-42,68,68,-43,-45,-44,68,]),'OR':([32,33,42,43,44,70,71,72,75,76,79,87,88,93,96,106,110,],[-40,69,-37,-38,-39,69,-40,69,69,69,-42,69,69,-43,-45,-44,69,]),':':([42,43,44,50,70,71,72,79,88,93,96,101,106,110,115,118,],[-37,-38,-39,81,89,-40,90,-42,-41,-43,-45,114,-44,119,121,123,]),')':([42,43,44,53,71,74,75,79,80,83,84,85,86,87,88,92,93,96,98,99,102,103,104,105,106,117,120,122,],[-37,-38,-39,-72,-40,-72,93,-42,96,-72,106,-63,-64,-65,-41,111,-43,-45,-70,-71,115,-12,-13,-15,-44,-66,-16,-14,]),',':([42,43,44,71,79,87,88,93,96,98,99,105,106,120,],[-37,-38,-39,-40,-42,107,-41,-43,-45,-70,-71,116,-44,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'ProgramHeader':([0,],[2,]),'ProgramBody':([2,],[4,]),'FuncDecls':([2,7,],[5,18,]),'empty':([2,5,7,16,20,53,74,83,],[6,15,6,15,15,85,85,103,]),'Function':([2,7,],[7,7,]),'FunctionHeader':([2,7,],[8,8,]),'FunctionType':([2,7,],[9,9,]),'VarDecls':([5,16,20,],[14,49,51,]),'VarDecl':([5,16,20,],[16,16,16,]),'FunctionBody':([8,],[19,]),'Cmd':([14,41,51,89,90,95,119,],[23,78,78,108,109,78,124,]),'CmdAtrib':([14,36,41,51,89,90,95,119,],[24,73,24,24,24,24,24,24,]),'CmdIf':([14,41,51,89,90,95,119,],[25,25,25,25,25,25,25,]),'CmdWhile':([14,41,51,89,90,95,119,],[26,26,26,26,26,26,26,]),'CmdFor':([14,41,51,89,90,95,119,],[27,27,27,27,27,27,27,]),'CmdBreak':([14,41,51,89,90,95,119,],[28,28,28,28,28,28,28,]),'CmdPrint':([14,41,51,89,90,95,119,],[29,29,29,29,29,29,29,]),'CmdReturn':([14,41,51,89,90,95,119,],[30,30,30,30,30,30,30,]),'CmdSeq':([14,41,51,89,90,95,119,],[31,31,31,31,31,31,31,]),'Expr':([14,34,35,36,39,40,41,45,51,53,54,74,89,90,91,95,107,119,],[33,70,72,33,75,76,33,79,33,87,88,87,33,33,110,33,87,33,]),'UnOp':([14,34,35,36,39,40,41,45,51,53,54,74,89,90,91,95,107,119,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'BinOp':([33,70,72,75,76,79,87,88,110,],[54,54,54,54,54,54,54,54,54,]),'CmdList':([41,51,95,],[77,82,112,]),'ExprList':([53,74,],[84,92,]),'ExprList1':([53,74,107,],[86,86,117,]),'Type':([81,114,],[97,120,]),'ParamList':([83,],[102,]),'ParamList1':([83,116,],[104,122,]),'Param':([83,116,],[105,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> ProgramHeader ProgramBody','Program',2,'p_program','uptparser.py',43),
  ('ProgramHeader -> PROGRAM ID ;','ProgramHeader',3,'p_ProgramHeader','uptparser.py',49),
  ('ProgramBody -> FuncDecls VarDecls Cmd','ProgramBody',3,'p_ProgramBody','uptparser.py',55),
  ('FuncDecls -> empty','FuncDecls',1,'p_FuncDecls','uptparser.py',61),
  ('FuncDecls -> Function FuncDecls','FuncDecls',2,'p_FuncDecls','uptparser.py',62),
  ('Function -> FunctionHeader FunctionBody','Function',2,'p_Function','uptparser.py',73),
  ('FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :','FunctionHeader',7,'p_FunctionHeader','uptparser.py',79),
  ('FunctionType -> INTEGER','FunctionType',1,'p_FunctionType','uptparser.py',86),
  ('FunctionType -> BOOL','FunctionType',1,'p_FunctionType','uptparser.py',87),
  ('FunctionType -> VOID','FunctionType',1,'p_FunctionType','uptparser.py',88),
  ('FunctionBody -> { VarDecls CmdList }','FunctionBody',4,'p_FunctionBody','uptparser.py',94),
  ('ParamList -> empty','ParamList',1,'p_ParamList','uptparser.py',100),
  ('ParamList -> ParamList1','ParamList',1,'p_ParamList','uptparser.py',101),
  ('ParamList1 -> Param , ParamList1','ParamList1',3,'p_ParamList1','uptparser.py',107),
  ('ParamList1 -> Param','ParamList1',1,'p_ParamList1','uptparser.py',108),
  ('Param -> ID : Type','Param',3,'p_Param','uptparser.py',118),
  ('Cmd -> CmdAtrib','Cmd',1,'p_Cmd','uptparser.py',126),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','uptparser.py',127),
  ('Cmd -> CmdWhile','Cmd',1,'p_Cmd','uptparser.py',128),
  ('Cmd -> CmdFor','Cmd',1,'p_Cmd','uptparser.py',129),
  ('Cmd -> CmdBreak','Cmd',1,'p_Cmd','uptparser.py',130),
  ('Cmd -> CmdPrint','Cmd',1,'p_Cmd','uptparser.py',131),
  ('Cmd -> CmdReturn','Cmd',1,'p_Cmd','uptparser.py',132),
  ('Cmd -> CmdSeq','Cmd',1,'p_Cmd','uptparser.py',133),
  ('CmdAtrib -> ID','CmdAtrib',1,'p_CmdAtrib','uptparser.py',139),
  ('CmdAtrib -> Expr','CmdAtrib',1,'p_CmdAtrib','uptparser.py',140),
  ('CmdIf -> IF Expr : Cmd','CmdIf',4,'p_CmdIf','uptparser.py',148),
  ('CmdIf -> IF Expr : Cmd ELSE :','CmdIf',6,'p_CmdIf','uptparser.py',149),
  ('CmdWhile -> WHILE Expr : Cmd','CmdWhile',4,'p_CmdWhile','uptparser.py',158),
  ('CmdFor -> FOR CmdAtrib TO Expr : Cmd','CmdFor',6,'p_CmdFor','uptparser.py',164),
  ('CmdBreak -> BREAK','CmdBreak',1,'p_CmdBreak','uptparser.py',170),
  ('CmdPrint -> PRINT ( ExprList )','CmdPrint',4,'p_CmdPrint','uptparser.py',176),
  ('CmdReturn -> RETURN Expr','CmdReturn',2,'p_CmdReturn','uptparser.py',182),
  ('CmdSeq -> { CmdList }','CmdSeq',3,'p_CmdSeq','uptparser.py',188),
  ('CmdList -> Cmd ; CmdList','CmdList',3,'p_CmdList','uptparser.py',194),
  ('CmdList -> Cmd','CmdList',1,'p_CmdList','uptparser.py',195),
  ('Expr -> INT','Expr',1,'p_Expr','uptparser.py',206),
  ('Expr -> TRUE','Expr',1,'p_Expr','uptparser.py',207),
  ('Expr -> FALSE','Expr',1,'p_Expr','uptparser.py',208),
  ('Expr -> ID','Expr',1,'p_Expr','uptparser.py',209),
  ('Expr -> Expr BinOp Expr','Expr',3,'p_Expr','uptparser.py',210),
  ('Expr -> UnOp Expr','Expr',2,'p_Expr','uptparser.py',211),
  ('Expr -> ( Expr )','Expr',3,'p_Expr','uptparser.py',212),
  ('Expr -> ID ( ExprList )','Expr',4,'p_Expr','uptparser.py',213),
  ('Expr -> READ ( )','Expr',3,'p_Expr','uptparser.py',214),
  ('BinOp -> +','BinOp',1,'p_BinOp','uptparser.py',236),
  ('BinOp -> -','BinOp',1,'p_BinOp','uptparser.py',237),
  ('BinOp -> *','BinOp',1,'p_BinOp','uptparser.py',238),
  ('BinOp -> /','BinOp',1,'p_BinOp','uptparser.py',239),
  ('BinOp -> EXP','BinOp',1,'p_BinOp','uptparser.py',240),
  ('BinOp -> %','BinOp',1,'p_BinOp','uptparser.py',241),
  ('BinOp -> =','BinOp',1,'p_BinOp','uptparser.py',242),
  ('BinOp -> EQUAL','BinOp',1,'p_BinOp','uptparser.py',243),
  ('BinOp -> NOTEQUAL','BinOp',1,'p_BinOp','uptparser.py',244),
  ('BinOp -> <','BinOp',1,'p_BinOp','uptparser.py',245),
  ('BinOp -> >','BinOp',1,'p_BinOp','uptparser.py',246),
  ('BinOp -> LESSEQUAL','BinOp',1,'p_BinOp','uptparser.py',247),
  ('BinOp -> GREATEREQUAL','BinOp',1,'p_BinOp','uptparser.py',248),
  ('BinOp -> AND','BinOp',1,'p_BinOp','uptparser.py',249),
  ('BinOp -> OR','BinOp',1,'p_BinOp','uptparser.py',250),
  ('UnOp -> -','UnOp',1,'p_UnOp','uptparser.py',256),
  ('UnOp -> NOT','UnOp',1,'p_UnOp','uptparser.py',257),
  ('ExprList -> empty','ExprList',1,'p_ExprList','uptparser.py',263),
  ('ExprList -> ExprList1','ExprList',1,'p_ExprList','uptparser.py',264),
  ('ExprList1 -> Expr','ExprList1',1,'p_ExprList1','uptparser.py',270),
  ('ExprList1 -> Expr , ExprList1','ExprList1',3,'p_ExprList1','uptparser.py',271),
  ('VarDecls -> empty','VarDecls',1,'p_VarDecls','uptparser.py',282),
  ('VarDecls -> VarDecl VarDecls','VarDecls',2,'p_VarDecls','uptparser.py',283),
  ('VarDecl -> VAR ID : Type ;','VarDecl',5,'p_VarDecl','uptparser.py',292),
  ('Type -> INTEGER','Type',1,'p_Type','uptparser.py',299),
  ('Type -> BOOL','Type',1,'p_Type','uptparser.py',300),
  ('empty -> <empty>','empty',0,'p_empty','uptparser.py',308),
]
