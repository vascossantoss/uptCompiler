Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> ProgramHeader ProgramBody
Rule 2     ProgramHeader -> PROGRAM ID ;
Rule 3     ProgramBody -> FuncDecls VarDecls Cmd
Rule 4     FuncDecls -> empty
Rule 5     FuncDecls -> Function FuncDecls
Rule 6     Function -> FunctionHeader
Rule 7     Function -> FunctionBody
Rule 8     FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :
Rule 9     FunctionType -> INTEGER
Rule 10    FunctionType -> BOOL
Rule 11    FunctionType -> VOID
Rule 12    FunctionBody -> { VarDecls CmdList }
Rule 13    ParamList -> empty
Rule 14    ParamList -> ParamList1
Rule 15    ParamList1 -> Param , ParamList1
Rule 16    ParamList1 -> Param
Rule 17    Param -> ID : Type
Rule 18    Cmd -> CmdAtrib
Rule 19    Cmd -> CmdIf
Rule 20    Cmd -> CmdWhile
Rule 21    Cmd -> CmdFor
Rule 22    Cmd -> CmdBreak
Rule 23    Cmd -> CmdPrint
Rule 24    Cmd -> CmdReturn
Rule 25    Cmd -> CmdSeq
Rule 26    CmdAtrib -> ID = Expr
Rule 27    CmdIf -> IF Expr : Cmd
Rule 28    CmdIf -> IF Expr : Cmd ELSE :
Rule 29    CmdWhile -> WHILE Expr : Cmd
Rule 30    CmdFor -> FOR CmdAtrib TO Expr : Cmd
Rule 31    CmdBreak -> BREAK
Rule 32    CmdPrint -> PRINT ( ExprList )
Rule 33    CmdReturn -> RETURN Expr
Rule 34    CmdSeq -> { CmdList }
Rule 35    CmdList -> Cmd ; CmdList
Rule 36    CmdList -> Cmd
Rule 37    Expr -> INT
Rule 38    Expr -> TRUE
Rule 39    Expr -> FALSE
Rule 40    Expr -> ID
Rule 41    Expr -> Expr BinOp Expr
Rule 42    Expr -> UnOp Expr
Rule 43    Expr -> ( Expr )
Rule 44    Expr -> ID ( ExprList )
Rule 45    Expr -> READ ( )
Rule 46    BinOp -> +
Rule 47    BinOp -> -
Rule 48    BinOp -> *
Rule 49    BinOp -> DIVIDE
Rule 50    BinOp -> EXP
Rule 51    BinOp -> %
Rule 52    BinOp -> EQUAL
Rule 53    BinOp -> NOTEQUAL
Rule 54    BinOp -> <
Rule 55    BinOp -> >
Rule 56    BinOp -> LESSEQUAL
Rule 57    BinOp -> GREATEREQUAL
Rule 58    BinOp -> AND
Rule 59    BinOp -> OR
Rule 60    UnOp -> -
Rule 61    UnOp -> NOT
Rule 62    ExprList -> empty
Rule 63    ExprList -> ExprList1
Rule 64    ExprList1 -> Expr
Rule 65    ExprList1 -> Expr , ExprList1
Rule 66    VarDecls -> empty
Rule 67    VarDecls -> VarDecl VarDecls
Rule 68    VarDecl -> VAR ID : Type ;
Rule 69    Type -> INTEGER
Rule 70    Type -> BOOL
Rule 71    empty -> <empty>

Terminals, with rules where they appear

%                    : 51
(                    : 8 32 43 44 45
)                    : 8 32 43 44 45
*                    : 48
+                    : 46
,                    : 15 65
-                    : 47 60
:                    : 8 17 27 28 28 29 30 68
;                    : 2 35 68
<                    : 54
=                    : 26
>                    : 55
AND                  : 58
BOOL                 : 10 70
BREAK                : 31
DIVIDE               : 49
ELSE                 : 28
EQUAL                : 52
EXP                  : 50
FALSE                : 39
FOR                  : 30
FUNCTION             : 8
GREATEREQUAL         : 57
ID                   : 2 8 17 26 40 44 68
IF                   : 27 28
INT                  : 37
INTEGER              : 9 69
LESSEQUAL            : 56
NOT                  : 61
NOTEQUAL             : 53
OR                   : 59
PRINT                : 32
PROGRAM              : 2
READ                 : 45
RETURN               : 33
TO                   : 30
TRUE                 : 38
VAR                  : 68
VOID                 : 11
WHILE                : 29
error                : 
{                    : 12 34
}                    : 12 34

Nonterminals, with rules where they appear

BinOp                : 41
Cmd                  : 3 27 28 29 30 35 36
CmdAtrib             : 18 30
CmdBreak             : 22
CmdFor               : 21
CmdIf                : 19
CmdList              : 12 34 35
CmdPrint             : 23
CmdReturn            : 24
CmdSeq               : 25
CmdWhile             : 20
Expr                 : 26 27 28 29 30 33 41 41 42 43 64 65
ExprList             : 32 44
ExprList1            : 63 65
FuncDecls            : 3 5
Function             : 5
FunctionBody         : 7
FunctionHeader       : 6
FunctionType         : 8
Param                : 15 16
ParamList            : 8
ParamList1           : 14 15
Program              : 0
ProgramBody          : 1
ProgramHeader        : 1
Type                 : 17 68
UnOp                 : 42
VarDecl              : 67
VarDecls             : 3 12 67
empty                : 4 13 62 66

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . ProgramHeader ProgramBody
    (2) ProgramHeader -> . PROGRAM ID ;

    PROGRAM         shift and go to state 3

    Program                        shift and go to state 1
    ProgramHeader                  shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> ProgramHeader . ProgramBody
    (3) ProgramBody -> . FuncDecls VarDecls Cmd
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (71) empty -> .
    (6) Function -> . FunctionHeader
    (7) Function -> . FunctionBody
    (8) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (12) FunctionBody -> . { VarDecls CmdList }
    (9) FunctionType -> . INTEGER
    (10) FunctionType -> . BOOL
    (11) FunctionType -> . VOID

  ! shift/reduce conflict for { resolved as shift
    VAR             reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    BREAK           reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    {               shift and go to state 11
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

  ! {               [ reduce using rule 71 (empty -> .) ]

    ProgramBody                    shift and go to state 4
    FuncDecls                      shift and go to state 5
    empty                          shift and go to state 6
    Function                       shift and go to state 7
    FunctionHeader                 shift and go to state 8
    FunctionBody                   shift and go to state 9
    FunctionType                   shift and go to state 10

state 3

    (2) ProgramHeader -> PROGRAM . ID ;

    ID              shift and go to state 15


state 4

    (1) Program -> ProgramHeader ProgramBody .

    $end            reduce using rule 1 (Program -> ProgramHeader ProgramBody .)


state 5

    (3) ProgramBody -> FuncDecls . VarDecls Cmd
    (66) VarDecls -> . empty
    (67) VarDecls -> . VarDecl VarDecls
    (71) empty -> .
    (68) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    BREAK           reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    {               reduce using rule 71 (empty -> .)
    VAR             shift and go to state 19

    VarDecls                       shift and go to state 16
    empty                          shift and go to state 17
    VarDecl                        shift and go to state 18

state 6

    (4) FuncDecls -> empty .

    VAR             reduce using rule 4 (FuncDecls -> empty .)
    ID              reduce using rule 4 (FuncDecls -> empty .)
    IF              reduce using rule 4 (FuncDecls -> empty .)
    WHILE           reduce using rule 4 (FuncDecls -> empty .)
    FOR             reduce using rule 4 (FuncDecls -> empty .)
    BREAK           reduce using rule 4 (FuncDecls -> empty .)
    PRINT           reduce using rule 4 (FuncDecls -> empty .)
    RETURN          reduce using rule 4 (FuncDecls -> empty .)
    {               reduce using rule 4 (FuncDecls -> empty .)


state 7

    (5) FuncDecls -> Function . FuncDecls
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (71) empty -> .
    (6) Function -> . FunctionHeader
    (7) Function -> . FunctionBody
    (8) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (12) FunctionBody -> . { VarDecls CmdList }
    (9) FunctionType -> . INTEGER
    (10) FunctionType -> . BOOL
    (11) FunctionType -> . VOID

  ! shift/reduce conflict for { resolved as shift
    VAR             reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    BREAK           reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    {               shift and go to state 11
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

  ! {               [ reduce using rule 71 (empty -> .) ]

    Function                       shift and go to state 7
    FuncDecls                      shift and go to state 20
    empty                          shift and go to state 6
    FunctionHeader                 shift and go to state 8
    FunctionBody                   shift and go to state 9
    FunctionType                   shift and go to state 10

state 8

    (6) Function -> FunctionHeader .

    {               reduce using rule 6 (Function -> FunctionHeader .)
    INTEGER         reduce using rule 6 (Function -> FunctionHeader .)
    BOOL            reduce using rule 6 (Function -> FunctionHeader .)
    VOID            reduce using rule 6 (Function -> FunctionHeader .)
    VAR             reduce using rule 6 (Function -> FunctionHeader .)
    ID              reduce using rule 6 (Function -> FunctionHeader .)
    IF              reduce using rule 6 (Function -> FunctionHeader .)
    WHILE           reduce using rule 6 (Function -> FunctionHeader .)
    FOR             reduce using rule 6 (Function -> FunctionHeader .)
    BREAK           reduce using rule 6 (Function -> FunctionHeader .)
    PRINT           reduce using rule 6 (Function -> FunctionHeader .)
    RETURN          reduce using rule 6 (Function -> FunctionHeader .)


state 9

    (7) Function -> FunctionBody .

    {               reduce using rule 7 (Function -> FunctionBody .)
    INTEGER         reduce using rule 7 (Function -> FunctionBody .)
    BOOL            reduce using rule 7 (Function -> FunctionBody .)
    VOID            reduce using rule 7 (Function -> FunctionBody .)
    VAR             reduce using rule 7 (Function -> FunctionBody .)
    ID              reduce using rule 7 (Function -> FunctionBody .)
    IF              reduce using rule 7 (Function -> FunctionBody .)
    WHILE           reduce using rule 7 (Function -> FunctionBody .)
    FOR             reduce using rule 7 (Function -> FunctionBody .)
    BREAK           reduce using rule 7 (Function -> FunctionBody .)
    PRINT           reduce using rule 7 (Function -> FunctionBody .)
    RETURN          reduce using rule 7 (Function -> FunctionBody .)


state 10

    (8) FunctionHeader -> FunctionType . FUNCTION ID ( ParamList ) :

    FUNCTION        shift and go to state 21


state 11

    (12) FunctionBody -> { . VarDecls CmdList }
    (66) VarDecls -> . empty
    (67) VarDecls -> . VarDecl VarDecls
    (71) empty -> .
    (68) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    BREAK           reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    {               reduce using rule 71 (empty -> .)
    VAR             shift and go to state 19

    VarDecls                       shift and go to state 22
    empty                          shift and go to state 17
    VarDecl                        shift and go to state 18

state 12

    (9) FunctionType -> INTEGER .

    FUNCTION        reduce using rule 9 (FunctionType -> INTEGER .)


state 13

    (10) FunctionType -> BOOL .

    FUNCTION        reduce using rule 10 (FunctionType -> BOOL .)


state 14

    (11) FunctionType -> VOID .

    FUNCTION        reduce using rule 11 (FunctionType -> VOID .)


state 15

    (2) ProgramHeader -> PROGRAM ID . ;

    ;               shift and go to state 23


state 16

    (3) ProgramBody -> FuncDecls VarDecls . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    Cmd                            shift and go to state 24
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 17

    (66) VarDecls -> empty .

    ID              reduce using rule 66 (VarDecls -> empty .)
    IF              reduce using rule 66 (VarDecls -> empty .)
    WHILE           reduce using rule 66 (VarDecls -> empty .)
    FOR             reduce using rule 66 (VarDecls -> empty .)
    BREAK           reduce using rule 66 (VarDecls -> empty .)
    PRINT           reduce using rule 66 (VarDecls -> empty .)
    RETURN          reduce using rule 66 (VarDecls -> empty .)
    {               reduce using rule 66 (VarDecls -> empty .)


state 18

    (67) VarDecls -> VarDecl . VarDecls
    (66) VarDecls -> . empty
    (67) VarDecls -> . VarDecl VarDecls
    (71) empty -> .
    (68) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    BREAK           reduce using rule 71 (empty -> .)
    PRINT           reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    {               reduce using rule 71 (empty -> .)
    VAR             shift and go to state 19

    VarDecl                        shift and go to state 18
    VarDecls                       shift and go to state 41
    empty                          shift and go to state 17

state 19

    (68) VarDecl -> VAR . ID : Type ;

    ID              shift and go to state 42


state 20

    (5) FuncDecls -> Function FuncDecls .

    VAR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    ID              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    IF              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    WHILE           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    FOR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    BREAK           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    PRINT           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    RETURN          reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    {               reduce using rule 5 (FuncDecls -> Function FuncDecls .)


state 21

    (8) FunctionHeader -> FunctionType FUNCTION . ID ( ParamList ) :

    ID              shift and go to state 43


state 22

    (12) FunctionBody -> { VarDecls . CmdList }
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    CmdList                        shift and go to state 44
    Cmd                            shift and go to state 45
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 23

    (2) ProgramHeader -> PROGRAM ID ; .

    {               reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    INTEGER         reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BOOL            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VOID            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VAR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    ID              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    IF              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    WHILE           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    FOR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BREAK           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    PRINT           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    RETURN          reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)


state 24

    (3) ProgramBody -> FuncDecls VarDecls Cmd .

    $end            reduce using rule 3 (ProgramBody -> FuncDecls VarDecls Cmd .)


state 25

    (18) Cmd -> CmdAtrib .

    $end            reduce using rule 18 (Cmd -> CmdAtrib .)
    ;               reduce using rule 18 (Cmd -> CmdAtrib .)
    }               reduce using rule 18 (Cmd -> CmdAtrib .)
    ELSE            reduce using rule 18 (Cmd -> CmdAtrib .)


state 26

    (19) Cmd -> CmdIf .

    $end            reduce using rule 19 (Cmd -> CmdIf .)
    ;               reduce using rule 19 (Cmd -> CmdIf .)
    }               reduce using rule 19 (Cmd -> CmdIf .)
    ELSE            reduce using rule 19 (Cmd -> CmdIf .)


state 27

    (20) Cmd -> CmdWhile .

    $end            reduce using rule 20 (Cmd -> CmdWhile .)
    ;               reduce using rule 20 (Cmd -> CmdWhile .)
    }               reduce using rule 20 (Cmd -> CmdWhile .)
    ELSE            reduce using rule 20 (Cmd -> CmdWhile .)


state 28

    (21) Cmd -> CmdFor .

    $end            reduce using rule 21 (Cmd -> CmdFor .)
    ;               reduce using rule 21 (Cmd -> CmdFor .)
    }               reduce using rule 21 (Cmd -> CmdFor .)
    ELSE            reduce using rule 21 (Cmd -> CmdFor .)


state 29

    (22) Cmd -> CmdBreak .

    $end            reduce using rule 22 (Cmd -> CmdBreak .)
    ;               reduce using rule 22 (Cmd -> CmdBreak .)
    }               reduce using rule 22 (Cmd -> CmdBreak .)
    ELSE            reduce using rule 22 (Cmd -> CmdBreak .)


state 30

    (23) Cmd -> CmdPrint .

    $end            reduce using rule 23 (Cmd -> CmdPrint .)
    ;               reduce using rule 23 (Cmd -> CmdPrint .)
    }               reduce using rule 23 (Cmd -> CmdPrint .)
    ELSE            reduce using rule 23 (Cmd -> CmdPrint .)


state 31

    (24) Cmd -> CmdReturn .

    $end            reduce using rule 24 (Cmd -> CmdReturn .)
    ;               reduce using rule 24 (Cmd -> CmdReturn .)
    }               reduce using rule 24 (Cmd -> CmdReturn .)
    ELSE            reduce using rule 24 (Cmd -> CmdReturn .)


state 32

    (25) Cmd -> CmdSeq .

    $end            reduce using rule 25 (Cmd -> CmdSeq .)
    ;               reduce using rule 25 (Cmd -> CmdSeq .)
    }               reduce using rule 25 (Cmd -> CmdSeq .)
    ELSE            reduce using rule 25 (Cmd -> CmdSeq .)


state 33

    (26) CmdAtrib -> ID . = Expr

    =               shift and go to state 46


state 34

    (27) CmdIf -> IF . Expr : Cmd
    (28) CmdIf -> IF . Expr : Cmd ELSE :
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 47
    UnOp                           shift and go to state 52

state 35

    (29) CmdWhile -> WHILE . Expr : Cmd
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 57
    UnOp                           shift and go to state 52

state 36

    (30) CmdFor -> FOR . CmdAtrib TO Expr : Cmd
    (26) CmdAtrib -> . ID = Expr

    ID              shift and go to state 33

    CmdAtrib                       shift and go to state 58

state 37

    (31) CmdBreak -> BREAK .

    $end            reduce using rule 31 (CmdBreak -> BREAK .)
    ;               reduce using rule 31 (CmdBreak -> BREAK .)
    }               reduce using rule 31 (CmdBreak -> BREAK .)
    ELSE            reduce using rule 31 (CmdBreak -> BREAK .)


state 38

    (32) CmdPrint -> PRINT . ( ExprList )

    (               shift and go to state 59


state 39

    (33) CmdReturn -> RETURN . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 60
    UnOp                           shift and go to state 52

state 40

    (34) CmdSeq -> { . CmdList }
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    CmdList                        shift and go to state 61
    Cmd                            shift and go to state 45
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 41

    (67) VarDecls -> VarDecl VarDecls .

    ID              reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    IF              reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    WHILE           reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    FOR             reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    BREAK           reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    PRINT           reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    RETURN          reduce using rule 67 (VarDecls -> VarDecl VarDecls .)
    {               reduce using rule 67 (VarDecls -> VarDecl VarDecls .)


state 42

    (68) VarDecl -> VAR ID . : Type ;

    :               shift and go to state 62


state 43

    (8) FunctionHeader -> FunctionType FUNCTION ID . ( ParamList ) :

    (               shift and go to state 63


state 44

    (12) FunctionBody -> { VarDecls CmdList . }

    }               shift and go to state 64


state 45

    (35) CmdList -> Cmd . ; CmdList
    (36) CmdList -> Cmd .

    ;               shift and go to state 65
    }               reduce using rule 36 (CmdList -> Cmd .)


state 46

    (26) CmdAtrib -> ID = . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 66
    UnOp                           shift and go to state 52

state 47

    (27) CmdIf -> IF Expr . : Cmd
    (28) CmdIf -> IF Expr . : Cmd ELSE :
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    :               shift and go to state 67
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 48

    (37) Expr -> INT .

    :               reduce using rule 37 (Expr -> INT .)
    +               reduce using rule 37 (Expr -> INT .)
    -               reduce using rule 37 (Expr -> INT .)
    *               reduce using rule 37 (Expr -> INT .)
    DIVIDE          reduce using rule 37 (Expr -> INT .)
    EXP             reduce using rule 37 (Expr -> INT .)
    %               reduce using rule 37 (Expr -> INT .)
    EQUAL           reduce using rule 37 (Expr -> INT .)
    NOTEQUAL        reduce using rule 37 (Expr -> INT .)
    <               reduce using rule 37 (Expr -> INT .)
    >               reduce using rule 37 (Expr -> INT .)
    LESSEQUAL       reduce using rule 37 (Expr -> INT .)
    GREATEREQUAL    reduce using rule 37 (Expr -> INT .)
    AND             reduce using rule 37 (Expr -> INT .)
    OR              reduce using rule 37 (Expr -> INT .)
    $end            reduce using rule 37 (Expr -> INT .)
    ;               reduce using rule 37 (Expr -> INT .)
    }               reduce using rule 37 (Expr -> INT .)
    ELSE            reduce using rule 37 (Expr -> INT .)
    TO              reduce using rule 37 (Expr -> INT .)
    )               reduce using rule 37 (Expr -> INT .)
    ,               reduce using rule 37 (Expr -> INT .)


state 49

    (38) Expr -> TRUE .

    :               reduce using rule 38 (Expr -> TRUE .)
    +               reduce using rule 38 (Expr -> TRUE .)
    -               reduce using rule 38 (Expr -> TRUE .)
    *               reduce using rule 38 (Expr -> TRUE .)
    DIVIDE          reduce using rule 38 (Expr -> TRUE .)
    EXP             reduce using rule 38 (Expr -> TRUE .)
    %               reduce using rule 38 (Expr -> TRUE .)
    EQUAL           reduce using rule 38 (Expr -> TRUE .)
    NOTEQUAL        reduce using rule 38 (Expr -> TRUE .)
    <               reduce using rule 38 (Expr -> TRUE .)
    >               reduce using rule 38 (Expr -> TRUE .)
    LESSEQUAL       reduce using rule 38 (Expr -> TRUE .)
    GREATEREQUAL    reduce using rule 38 (Expr -> TRUE .)
    AND             reduce using rule 38 (Expr -> TRUE .)
    OR              reduce using rule 38 (Expr -> TRUE .)
    $end            reduce using rule 38 (Expr -> TRUE .)
    ;               reduce using rule 38 (Expr -> TRUE .)
    }               reduce using rule 38 (Expr -> TRUE .)
    ELSE            reduce using rule 38 (Expr -> TRUE .)
    TO              reduce using rule 38 (Expr -> TRUE .)
    )               reduce using rule 38 (Expr -> TRUE .)
    ,               reduce using rule 38 (Expr -> TRUE .)


state 50

    (39) Expr -> FALSE .

    :               reduce using rule 39 (Expr -> FALSE .)
    +               reduce using rule 39 (Expr -> FALSE .)
    -               reduce using rule 39 (Expr -> FALSE .)
    *               reduce using rule 39 (Expr -> FALSE .)
    DIVIDE          reduce using rule 39 (Expr -> FALSE .)
    EXP             reduce using rule 39 (Expr -> FALSE .)
    %               reduce using rule 39 (Expr -> FALSE .)
    EQUAL           reduce using rule 39 (Expr -> FALSE .)
    NOTEQUAL        reduce using rule 39 (Expr -> FALSE .)
    <               reduce using rule 39 (Expr -> FALSE .)
    >               reduce using rule 39 (Expr -> FALSE .)
    LESSEQUAL       reduce using rule 39 (Expr -> FALSE .)
    GREATEREQUAL    reduce using rule 39 (Expr -> FALSE .)
    AND             reduce using rule 39 (Expr -> FALSE .)
    OR              reduce using rule 39 (Expr -> FALSE .)
    $end            reduce using rule 39 (Expr -> FALSE .)
    ;               reduce using rule 39 (Expr -> FALSE .)
    }               reduce using rule 39 (Expr -> FALSE .)
    ELSE            reduce using rule 39 (Expr -> FALSE .)
    TO              reduce using rule 39 (Expr -> FALSE .)
    )               reduce using rule 39 (Expr -> FALSE .)
    ,               reduce using rule 39 (Expr -> FALSE .)


state 51

    (40) Expr -> ID .
    (44) Expr -> ID . ( ExprList )

    :               reduce using rule 40 (Expr -> ID .)
    +               reduce using rule 40 (Expr -> ID .)
    -               reduce using rule 40 (Expr -> ID .)
    *               reduce using rule 40 (Expr -> ID .)
    DIVIDE          reduce using rule 40 (Expr -> ID .)
    EXP             reduce using rule 40 (Expr -> ID .)
    %               reduce using rule 40 (Expr -> ID .)
    EQUAL           reduce using rule 40 (Expr -> ID .)
    NOTEQUAL        reduce using rule 40 (Expr -> ID .)
    <               reduce using rule 40 (Expr -> ID .)
    >               reduce using rule 40 (Expr -> ID .)
    LESSEQUAL       reduce using rule 40 (Expr -> ID .)
    GREATEREQUAL    reduce using rule 40 (Expr -> ID .)
    AND             reduce using rule 40 (Expr -> ID .)
    OR              reduce using rule 40 (Expr -> ID .)
    $end            reduce using rule 40 (Expr -> ID .)
    ;               reduce using rule 40 (Expr -> ID .)
    }               reduce using rule 40 (Expr -> ID .)
    ELSE            reduce using rule 40 (Expr -> ID .)
    TO              reduce using rule 40 (Expr -> ID .)
    )               reduce using rule 40 (Expr -> ID .)
    ,               reduce using rule 40 (Expr -> ID .)
    (               shift and go to state 83


state 52

    (42) Expr -> UnOp . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    UnOp                           shift and go to state 52
    Expr                           shift and go to state 84

state 53

    (43) Expr -> ( . Expr )
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 85
    UnOp                           shift and go to state 52

state 54

    (45) Expr -> READ . ( )

    (               shift and go to state 86


state 55

    (60) UnOp -> - .

    INT             reduce using rule 60 (UnOp -> - .)
    TRUE            reduce using rule 60 (UnOp -> - .)
    FALSE           reduce using rule 60 (UnOp -> - .)
    ID              reduce using rule 60 (UnOp -> - .)
    (               reduce using rule 60 (UnOp -> - .)
    READ            reduce using rule 60 (UnOp -> - .)
    -               reduce using rule 60 (UnOp -> - .)
    NOT             reduce using rule 60 (UnOp -> - .)


state 56

    (61) UnOp -> NOT .

    INT             reduce using rule 61 (UnOp -> NOT .)
    TRUE            reduce using rule 61 (UnOp -> NOT .)
    FALSE           reduce using rule 61 (UnOp -> NOT .)
    ID              reduce using rule 61 (UnOp -> NOT .)
    (               reduce using rule 61 (UnOp -> NOT .)
    READ            reduce using rule 61 (UnOp -> NOT .)
    -               reduce using rule 61 (UnOp -> NOT .)
    NOT             reduce using rule 61 (UnOp -> NOT .)


state 57

    (29) CmdWhile -> WHILE Expr . : Cmd
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    :               shift and go to state 87
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 58

    (30) CmdFor -> FOR CmdAtrib . TO Expr : Cmd

    TO              shift and go to state 88


state 59

    (32) CmdPrint -> PRINT ( . ExprList )
    (62) ExprList -> . empty
    (63) ExprList -> . ExprList1
    (71) empty -> .
    (64) ExprList1 -> . Expr
    (65) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    )               reduce using rule 71 (empty -> .)
    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    ExprList                       shift and go to state 89
    empty                          shift and go to state 90
    ExprList1                      shift and go to state 91
    Expr                           shift and go to state 92
    UnOp                           shift and go to state 52

state 60

    (33) CmdReturn -> RETURN Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    $end            reduce using rule 33 (CmdReturn -> RETURN Expr .)
    ;               reduce using rule 33 (CmdReturn -> RETURN Expr .)
    }               reduce using rule 33 (CmdReturn -> RETURN Expr .)
    ELSE            reduce using rule 33 (CmdReturn -> RETURN Expr .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 61

    (34) CmdSeq -> { CmdList . }

    }               shift and go to state 93


state 62

    (68) VarDecl -> VAR ID : . Type ;
    (69) Type -> . INTEGER
    (70) Type -> . BOOL

    INTEGER         shift and go to state 95
    BOOL            shift and go to state 96

    Type                           shift and go to state 94

state 63

    (8) FunctionHeader -> FunctionType FUNCTION ID ( . ParamList ) :
    (13) ParamList -> . empty
    (14) ParamList -> . ParamList1
    (71) empty -> .
    (15) ParamList1 -> . Param , ParamList1
    (16) ParamList1 -> . Param
    (17) Param -> . ID : Type

    )               reduce using rule 71 (empty -> .)
    ID              shift and go to state 97

    ParamList                      shift and go to state 98
    empty                          shift and go to state 99
    ParamList1                     shift and go to state 100
    Param                          shift and go to state 101

state 64

    (12) FunctionBody -> { VarDecls CmdList } .

    {               reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    INTEGER         reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    BOOL            reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    VOID            reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    VAR             reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    ID              reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    IF              reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    WHILE           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    FOR             reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    BREAK           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    PRINT           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    RETURN          reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)


state 65

    (35) CmdList -> Cmd ; . CmdList
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    Cmd                            shift and go to state 45
    CmdList                        shift and go to state 102
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 66

    (26) CmdAtrib -> ID = Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    $end            reduce using rule 26 (CmdAtrib -> ID = Expr .)
    ;               reduce using rule 26 (CmdAtrib -> ID = Expr .)
    }               reduce using rule 26 (CmdAtrib -> ID = Expr .)
    TO              reduce using rule 26 (CmdAtrib -> ID = Expr .)
    ELSE            reduce using rule 26 (CmdAtrib -> ID = Expr .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 67

    (27) CmdIf -> IF Expr : . Cmd
    (28) CmdIf -> IF Expr : . Cmd ELSE :
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    Cmd                            shift and go to state 103
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 68

    (41) Expr -> Expr BinOp . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 104
    UnOp                           shift and go to state 52

state 69

    (46) BinOp -> + .

    INT             reduce using rule 46 (BinOp -> + .)
    TRUE            reduce using rule 46 (BinOp -> + .)
    FALSE           reduce using rule 46 (BinOp -> + .)
    ID              reduce using rule 46 (BinOp -> + .)
    (               reduce using rule 46 (BinOp -> + .)
    READ            reduce using rule 46 (BinOp -> + .)
    -               reduce using rule 46 (BinOp -> + .)
    NOT             reduce using rule 46 (BinOp -> + .)


state 70

    (47) BinOp -> - .

    INT             reduce using rule 47 (BinOp -> - .)
    TRUE            reduce using rule 47 (BinOp -> - .)
    FALSE           reduce using rule 47 (BinOp -> - .)
    ID              reduce using rule 47 (BinOp -> - .)
    (               reduce using rule 47 (BinOp -> - .)
    READ            reduce using rule 47 (BinOp -> - .)
    -               reduce using rule 47 (BinOp -> - .)
    NOT             reduce using rule 47 (BinOp -> - .)


state 71

    (48) BinOp -> * .

    INT             reduce using rule 48 (BinOp -> * .)
    TRUE            reduce using rule 48 (BinOp -> * .)
    FALSE           reduce using rule 48 (BinOp -> * .)
    ID              reduce using rule 48 (BinOp -> * .)
    (               reduce using rule 48 (BinOp -> * .)
    READ            reduce using rule 48 (BinOp -> * .)
    -               reduce using rule 48 (BinOp -> * .)
    NOT             reduce using rule 48 (BinOp -> * .)


state 72

    (49) BinOp -> DIVIDE .

    INT             reduce using rule 49 (BinOp -> DIVIDE .)
    TRUE            reduce using rule 49 (BinOp -> DIVIDE .)
    FALSE           reduce using rule 49 (BinOp -> DIVIDE .)
    ID              reduce using rule 49 (BinOp -> DIVIDE .)
    (               reduce using rule 49 (BinOp -> DIVIDE .)
    READ            reduce using rule 49 (BinOp -> DIVIDE .)
    -               reduce using rule 49 (BinOp -> DIVIDE .)
    NOT             reduce using rule 49 (BinOp -> DIVIDE .)


state 73

    (50) BinOp -> EXP .

    INT             reduce using rule 50 (BinOp -> EXP .)
    TRUE            reduce using rule 50 (BinOp -> EXP .)
    FALSE           reduce using rule 50 (BinOp -> EXP .)
    ID              reduce using rule 50 (BinOp -> EXP .)
    (               reduce using rule 50 (BinOp -> EXP .)
    READ            reduce using rule 50 (BinOp -> EXP .)
    -               reduce using rule 50 (BinOp -> EXP .)
    NOT             reduce using rule 50 (BinOp -> EXP .)


state 74

    (51) BinOp -> % .

    INT             reduce using rule 51 (BinOp -> % .)
    TRUE            reduce using rule 51 (BinOp -> % .)
    FALSE           reduce using rule 51 (BinOp -> % .)
    ID              reduce using rule 51 (BinOp -> % .)
    (               reduce using rule 51 (BinOp -> % .)
    READ            reduce using rule 51 (BinOp -> % .)
    -               reduce using rule 51 (BinOp -> % .)
    NOT             reduce using rule 51 (BinOp -> % .)


state 75

    (52) BinOp -> EQUAL .

    INT             reduce using rule 52 (BinOp -> EQUAL .)
    TRUE            reduce using rule 52 (BinOp -> EQUAL .)
    FALSE           reduce using rule 52 (BinOp -> EQUAL .)
    ID              reduce using rule 52 (BinOp -> EQUAL .)
    (               reduce using rule 52 (BinOp -> EQUAL .)
    READ            reduce using rule 52 (BinOp -> EQUAL .)
    -               reduce using rule 52 (BinOp -> EQUAL .)
    NOT             reduce using rule 52 (BinOp -> EQUAL .)


state 76

    (53) BinOp -> NOTEQUAL .

    INT             reduce using rule 53 (BinOp -> NOTEQUAL .)
    TRUE            reduce using rule 53 (BinOp -> NOTEQUAL .)
    FALSE           reduce using rule 53 (BinOp -> NOTEQUAL .)
    ID              reduce using rule 53 (BinOp -> NOTEQUAL .)
    (               reduce using rule 53 (BinOp -> NOTEQUAL .)
    READ            reduce using rule 53 (BinOp -> NOTEQUAL .)
    -               reduce using rule 53 (BinOp -> NOTEQUAL .)
    NOT             reduce using rule 53 (BinOp -> NOTEQUAL .)


state 77

    (54) BinOp -> < .

    INT             reduce using rule 54 (BinOp -> < .)
    TRUE            reduce using rule 54 (BinOp -> < .)
    FALSE           reduce using rule 54 (BinOp -> < .)
    ID              reduce using rule 54 (BinOp -> < .)
    (               reduce using rule 54 (BinOp -> < .)
    READ            reduce using rule 54 (BinOp -> < .)
    -               reduce using rule 54 (BinOp -> < .)
    NOT             reduce using rule 54 (BinOp -> < .)


state 78

    (55) BinOp -> > .

    INT             reduce using rule 55 (BinOp -> > .)
    TRUE            reduce using rule 55 (BinOp -> > .)
    FALSE           reduce using rule 55 (BinOp -> > .)
    ID              reduce using rule 55 (BinOp -> > .)
    (               reduce using rule 55 (BinOp -> > .)
    READ            reduce using rule 55 (BinOp -> > .)
    -               reduce using rule 55 (BinOp -> > .)
    NOT             reduce using rule 55 (BinOp -> > .)


state 79

    (56) BinOp -> LESSEQUAL .

    INT             reduce using rule 56 (BinOp -> LESSEQUAL .)
    TRUE            reduce using rule 56 (BinOp -> LESSEQUAL .)
    FALSE           reduce using rule 56 (BinOp -> LESSEQUAL .)
    ID              reduce using rule 56 (BinOp -> LESSEQUAL .)
    (               reduce using rule 56 (BinOp -> LESSEQUAL .)
    READ            reduce using rule 56 (BinOp -> LESSEQUAL .)
    -               reduce using rule 56 (BinOp -> LESSEQUAL .)
    NOT             reduce using rule 56 (BinOp -> LESSEQUAL .)


state 80

    (57) BinOp -> GREATEREQUAL .

    INT             reduce using rule 57 (BinOp -> GREATEREQUAL .)
    TRUE            reduce using rule 57 (BinOp -> GREATEREQUAL .)
    FALSE           reduce using rule 57 (BinOp -> GREATEREQUAL .)
    ID              reduce using rule 57 (BinOp -> GREATEREQUAL .)
    (               reduce using rule 57 (BinOp -> GREATEREQUAL .)
    READ            reduce using rule 57 (BinOp -> GREATEREQUAL .)
    -               reduce using rule 57 (BinOp -> GREATEREQUAL .)
    NOT             reduce using rule 57 (BinOp -> GREATEREQUAL .)


state 81

    (58) BinOp -> AND .

    INT             reduce using rule 58 (BinOp -> AND .)
    TRUE            reduce using rule 58 (BinOp -> AND .)
    FALSE           reduce using rule 58 (BinOp -> AND .)
    ID              reduce using rule 58 (BinOp -> AND .)
    (               reduce using rule 58 (BinOp -> AND .)
    READ            reduce using rule 58 (BinOp -> AND .)
    -               reduce using rule 58 (BinOp -> AND .)
    NOT             reduce using rule 58 (BinOp -> AND .)


state 82

    (59) BinOp -> OR .

    INT             reduce using rule 59 (BinOp -> OR .)
    TRUE            reduce using rule 59 (BinOp -> OR .)
    FALSE           reduce using rule 59 (BinOp -> OR .)
    ID              reduce using rule 59 (BinOp -> OR .)
    (               reduce using rule 59 (BinOp -> OR .)
    READ            reduce using rule 59 (BinOp -> OR .)
    -               reduce using rule 59 (BinOp -> OR .)
    NOT             reduce using rule 59 (BinOp -> OR .)


state 83

    (44) Expr -> ID ( . ExprList )
    (62) ExprList -> . empty
    (63) ExprList -> . ExprList1
    (71) empty -> .
    (64) ExprList1 -> . Expr
    (65) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    )               reduce using rule 71 (empty -> .)
    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    ExprList                       shift and go to state 105
    empty                          shift and go to state 90
    ExprList1                      shift and go to state 91
    Expr                           shift and go to state 92
    UnOp                           shift and go to state 52

state 84

    (42) Expr -> UnOp Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    :               reduce using rule 42 (Expr -> UnOp Expr .)
    +               reduce using rule 42 (Expr -> UnOp Expr .)
    -               reduce using rule 42 (Expr -> UnOp Expr .)
    *               reduce using rule 42 (Expr -> UnOp Expr .)
    DIVIDE          reduce using rule 42 (Expr -> UnOp Expr .)
    EXP             reduce using rule 42 (Expr -> UnOp Expr .)
    %               reduce using rule 42 (Expr -> UnOp Expr .)
    EQUAL           reduce using rule 42 (Expr -> UnOp Expr .)
    NOTEQUAL        reduce using rule 42 (Expr -> UnOp Expr .)
    <               reduce using rule 42 (Expr -> UnOp Expr .)
    >               reduce using rule 42 (Expr -> UnOp Expr .)
    LESSEQUAL       reduce using rule 42 (Expr -> UnOp Expr .)
    GREATEREQUAL    reduce using rule 42 (Expr -> UnOp Expr .)
    AND             reduce using rule 42 (Expr -> UnOp Expr .)
    OR              reduce using rule 42 (Expr -> UnOp Expr .)
    $end            reduce using rule 42 (Expr -> UnOp Expr .)
    ;               reduce using rule 42 (Expr -> UnOp Expr .)
    }               reduce using rule 42 (Expr -> UnOp Expr .)
    ELSE            reduce using rule 42 (Expr -> UnOp Expr .)
    TO              reduce using rule 42 (Expr -> UnOp Expr .)
    )               reduce using rule 42 (Expr -> UnOp Expr .)
    ,               reduce using rule 42 (Expr -> UnOp Expr .)

  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 72 ]
  ! EXP             [ shift and go to state 73 ]
  ! %               [ shift and go to state 74 ]
  ! EQUAL           [ shift and go to state 75 ]
  ! NOTEQUAL        [ shift and go to state 76 ]
  ! <               [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! LESSEQUAL       [ shift and go to state 79 ]
  ! GREATEREQUAL    [ shift and go to state 80 ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]

    BinOp                          shift and go to state 68

state 85

    (43) Expr -> ( Expr . )
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    )               shift and go to state 106
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 86

    (45) Expr -> READ ( . )

    )               shift and go to state 107


state 87

    (29) CmdWhile -> WHILE Expr : . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    Cmd                            shift and go to state 108
    CmdAtrib                       shift and go to state 25
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 88

    (30) CmdFor -> FOR CmdAtrib TO . Expr : Cmd
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 109
    UnOp                           shift and go to state 52

state 89

    (32) CmdPrint -> PRINT ( ExprList . )

    )               shift and go to state 110


state 90

    (62) ExprList -> empty .

    )               reduce using rule 62 (ExprList -> empty .)


state 91

    (63) ExprList -> ExprList1 .

    )               reduce using rule 63 (ExprList -> ExprList1 .)


state 92

    (64) ExprList1 -> Expr .
    (65) ExprList1 -> Expr . , ExprList1
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    )               reduce using rule 64 (ExprList1 -> Expr .)
    ,               shift and go to state 111
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 93

    (34) CmdSeq -> { CmdList } .

    $end            reduce using rule 34 (CmdSeq -> { CmdList } .)
    ;               reduce using rule 34 (CmdSeq -> { CmdList } .)
    }               reduce using rule 34 (CmdSeq -> { CmdList } .)
    ELSE            reduce using rule 34 (CmdSeq -> { CmdList } .)


state 94

    (68) VarDecl -> VAR ID : Type . ;

    ;               shift and go to state 112


state 95

    (69) Type -> INTEGER .

    ;               reduce using rule 69 (Type -> INTEGER .)
    ,               reduce using rule 69 (Type -> INTEGER .)
    )               reduce using rule 69 (Type -> INTEGER .)


state 96

    (70) Type -> BOOL .

    ;               reduce using rule 70 (Type -> BOOL .)
    ,               reduce using rule 70 (Type -> BOOL .)
    )               reduce using rule 70 (Type -> BOOL .)


state 97

    (17) Param -> ID . : Type

    :               shift and go to state 113


state 98

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList . ) :

    )               shift and go to state 114


state 99

    (13) ParamList -> empty .

    )               reduce using rule 13 (ParamList -> empty .)


state 100

    (14) ParamList -> ParamList1 .

    )               reduce using rule 14 (ParamList -> ParamList1 .)


state 101

    (15) ParamList1 -> Param . , ParamList1
    (16) ParamList1 -> Param .

    ,               shift and go to state 115
    )               reduce using rule 16 (ParamList1 -> Param .)


state 102

    (35) CmdList -> Cmd ; CmdList .

    }               reduce using rule 35 (CmdList -> Cmd ; CmdList .)


state 103

    (27) CmdIf -> IF Expr : Cmd .
    (28) CmdIf -> IF Expr : Cmd . ELSE :

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    ;               reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    }               reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    ELSE            shift and go to state 116

  ! ELSE            [ reduce using rule 27 (CmdIf -> IF Expr : Cmd .) ]


state 104

    (41) Expr -> Expr BinOp Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    :               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    $end            reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ;               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    }               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ELSE            reduce using rule 41 (Expr -> Expr BinOp Expr .)
    TO              reduce using rule 41 (Expr -> Expr BinOp Expr .)
    )               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ,               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

  ! +               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! -               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! *               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! DIVIDE          [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! EXP             [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! %               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! EQUAL           [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! NOTEQUAL        [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! <               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! >               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! LESSEQUAL       [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! AND             [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! OR              [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]

    BinOp                          shift and go to state 68

state 105

    (44) Expr -> ID ( ExprList . )

    )               shift and go to state 117


state 106

    (43) Expr -> ( Expr ) .

    :               reduce using rule 43 (Expr -> ( Expr ) .)
    +               reduce using rule 43 (Expr -> ( Expr ) .)
    -               reduce using rule 43 (Expr -> ( Expr ) .)
    *               reduce using rule 43 (Expr -> ( Expr ) .)
    DIVIDE          reduce using rule 43 (Expr -> ( Expr ) .)
    EXP             reduce using rule 43 (Expr -> ( Expr ) .)
    %               reduce using rule 43 (Expr -> ( Expr ) .)
    EQUAL           reduce using rule 43 (Expr -> ( Expr ) .)
    NOTEQUAL        reduce using rule 43 (Expr -> ( Expr ) .)
    <               reduce using rule 43 (Expr -> ( Expr ) .)
    >               reduce using rule 43 (Expr -> ( Expr ) .)
    LESSEQUAL       reduce using rule 43 (Expr -> ( Expr ) .)
    GREATEREQUAL    reduce using rule 43 (Expr -> ( Expr ) .)
    AND             reduce using rule 43 (Expr -> ( Expr ) .)
    OR              reduce using rule 43 (Expr -> ( Expr ) .)
    $end            reduce using rule 43 (Expr -> ( Expr ) .)
    ;               reduce using rule 43 (Expr -> ( Expr ) .)
    }               reduce using rule 43 (Expr -> ( Expr ) .)
    ELSE            reduce using rule 43 (Expr -> ( Expr ) .)
    TO              reduce using rule 43 (Expr -> ( Expr ) .)
    )               reduce using rule 43 (Expr -> ( Expr ) .)
    ,               reduce using rule 43 (Expr -> ( Expr ) .)


state 107

    (45) Expr -> READ ( ) .

    :               reduce using rule 45 (Expr -> READ ( ) .)
    +               reduce using rule 45 (Expr -> READ ( ) .)
    -               reduce using rule 45 (Expr -> READ ( ) .)
    *               reduce using rule 45 (Expr -> READ ( ) .)
    DIVIDE          reduce using rule 45 (Expr -> READ ( ) .)
    EXP             reduce using rule 45 (Expr -> READ ( ) .)
    %               reduce using rule 45 (Expr -> READ ( ) .)
    EQUAL           reduce using rule 45 (Expr -> READ ( ) .)
    NOTEQUAL        reduce using rule 45 (Expr -> READ ( ) .)
    <               reduce using rule 45 (Expr -> READ ( ) .)
    >               reduce using rule 45 (Expr -> READ ( ) .)
    LESSEQUAL       reduce using rule 45 (Expr -> READ ( ) .)
    GREATEREQUAL    reduce using rule 45 (Expr -> READ ( ) .)
    AND             reduce using rule 45 (Expr -> READ ( ) .)
    OR              reduce using rule 45 (Expr -> READ ( ) .)
    $end            reduce using rule 45 (Expr -> READ ( ) .)
    ;               reduce using rule 45 (Expr -> READ ( ) .)
    }               reduce using rule 45 (Expr -> READ ( ) .)
    ELSE            reduce using rule 45 (Expr -> READ ( ) .)
    TO              reduce using rule 45 (Expr -> READ ( ) .)
    )               reduce using rule 45 (Expr -> READ ( ) .)
    ,               reduce using rule 45 (Expr -> READ ( ) .)


state 108

    (29) CmdWhile -> WHILE Expr : Cmd .

    $end            reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    ;               reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    }               reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    ELSE            reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)


state 109

    (30) CmdFor -> FOR CmdAtrib TO Expr . : Cmd
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . DIVIDE
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . EQUAL
    (53) BinOp -> . NOTEQUAL
    (54) BinOp -> . <
    (55) BinOp -> . >
    (56) BinOp -> . LESSEQUAL
    (57) BinOp -> . GREATEREQUAL
    (58) BinOp -> . AND
    (59) BinOp -> . OR

    :               shift and go to state 118
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    DIVIDE          shift and go to state 72
    EXP             shift and go to state 73
    %               shift and go to state 74
    EQUAL           shift and go to state 75
    NOTEQUAL        shift and go to state 76
    <               shift and go to state 77
    >               shift and go to state 78
    LESSEQUAL       shift and go to state 79
    GREATEREQUAL    shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82

    BinOp                          shift and go to state 68

state 110

    (32) CmdPrint -> PRINT ( ExprList ) .

    $end            reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    ;               reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    }               reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    ELSE            reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)


state 111

    (65) ExprList1 -> Expr , . ExprList1
    (64) ExprList1 -> . Expr
    (65) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (60) UnOp -> . -
    (61) UnOp -> . NOT

    INT             shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51
    (               shift and go to state 53
    READ            shift and go to state 54
    -               shift and go to state 55
    NOT             shift and go to state 56

    Expr                           shift and go to state 92
    ExprList1                      shift and go to state 119
    UnOp                           shift and go to state 52

state 112

    (68) VarDecl -> VAR ID : Type ; .

    VAR             reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    ID              reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    IF              reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    WHILE           reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    FOR             reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    BREAK           reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    PRINT           reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    RETURN          reduce using rule 68 (VarDecl -> VAR ID : Type ; .)
    {               reduce using rule 68 (VarDecl -> VAR ID : Type ; .)


state 113

    (17) Param -> ID : . Type
    (69) Type -> . INTEGER
    (70) Type -> . BOOL

    INTEGER         shift and go to state 95
    BOOL            shift and go to state 96

    Type                           shift and go to state 120

state 114

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) . :

    :               shift and go to state 121


state 115

    (15) ParamList1 -> Param , . ParamList1
    (15) ParamList1 -> . Param , ParamList1
    (16) ParamList1 -> . Param
    (17) Param -> . ID : Type

    ID              shift and go to state 97

    Param                          shift and go to state 101
    ParamList1                     shift and go to state 122

state 116

    (28) CmdIf -> IF Expr : Cmd ELSE . :

    :               shift and go to state 123


state 117

    (44) Expr -> ID ( ExprList ) .

    :               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    +               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    -               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    *               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    DIVIDE          reduce using rule 44 (Expr -> ID ( ExprList ) .)
    EXP             reduce using rule 44 (Expr -> ID ( ExprList ) .)
    %               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    EQUAL           reduce using rule 44 (Expr -> ID ( ExprList ) .)
    NOTEQUAL        reduce using rule 44 (Expr -> ID ( ExprList ) .)
    <               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    >               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    LESSEQUAL       reduce using rule 44 (Expr -> ID ( ExprList ) .)
    GREATEREQUAL    reduce using rule 44 (Expr -> ID ( ExprList ) .)
    AND             reduce using rule 44 (Expr -> ID ( ExprList ) .)
    OR              reduce using rule 44 (Expr -> ID ( ExprList ) .)
    $end            reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ;               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    }               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ELSE            reduce using rule 44 (Expr -> ID ( ExprList ) .)
    TO              reduce using rule 44 (Expr -> ID ( ExprList ) .)
    )               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ,               reduce using rule 44 (Expr -> ID ( ExprList ) .)


state 118

    (30) CmdFor -> FOR CmdAtrib TO Expr : . Cmd
    (18) Cmd -> . CmdAtrib
    (19) Cmd -> . CmdIf
    (20) Cmd -> . CmdWhile
    (21) Cmd -> . CmdFor
    (22) Cmd -> . CmdBreak
    (23) Cmd -> . CmdPrint
    (24) Cmd -> . CmdReturn
    (25) Cmd -> . CmdSeq
    (26) CmdAtrib -> . ID = Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }

    ID              shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 39
    {               shift and go to state 40

    CmdAtrib                       shift and go to state 25
    Cmd                            shift and go to state 124
    CmdIf                          shift and go to state 26
    CmdWhile                       shift and go to state 27
    CmdFor                         shift and go to state 28
    CmdBreak                       shift and go to state 29
    CmdPrint                       shift and go to state 30
    CmdReturn                      shift and go to state 31
    CmdSeq                         shift and go to state 32

state 119

    (65) ExprList1 -> Expr , ExprList1 .

    )               reduce using rule 65 (ExprList1 -> Expr , ExprList1 .)


state 120

    (17) Param -> ID : Type .

    ,               reduce using rule 17 (Param -> ID : Type .)
    )               reduce using rule 17 (Param -> ID : Type .)


state 121

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .

    {               reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    INTEGER         reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    BOOL            reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    VOID            reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    VAR             reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    ID              reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    IF              reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    WHILE           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    FOR             reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    BREAK           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    PRINT           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    RETURN          reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)


state 122

    (15) ParamList1 -> Param , ParamList1 .

    )               reduce using rule 15 (ParamList1 -> Param , ParamList1 .)


state 123

    (28) CmdIf -> IF Expr : Cmd ELSE : .

    $end            reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    ;               reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    }               reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    ELSE            reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)


state 124

    (30) CmdFor -> FOR CmdAtrib TO Expr : Cmd .

    $end            reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ;               reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    }               reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ELSE            reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for { in state 2 resolved as shift
WARNING: shift/reduce conflict for { in state 7 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 103 resolved as shift
WARNING: shift/reduce conflict for + in state 104 resolved as shift
WARNING: shift/reduce conflict for - in state 104 resolved as shift
WARNING: shift/reduce conflict for * in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for EXP in state 104 resolved as shift
WARNING: shift/reduce conflict for % in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for < in state 104 resolved as shift
WARNING: shift/reduce conflict for > in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
