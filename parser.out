Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> ProgramHeader ProgramBody
Rule 2     ProgramHeader -> PROGRAM ID ;
Rule 3     ProgramBody -> FuncDecls VarDecls Cmds
Rule 4     FuncDecls -> empty
Rule 5     FuncDecls -> Function FuncDecls
Rule 6     Function -> FunctionHeader
Rule 7     Function -> FunctionBody
Rule 8     FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :
Rule 9     FunctionType -> INTEGER
Rule 10    FunctionType -> BOOL
Rule 11    FunctionType -> VOID
Rule 12    FunctionBody -> { VarDecls CmdList }
Rule 13    ParamList -> empty
Rule 14    ParamList -> ParamList1
Rule 15    ParamList1 -> Param , ParamList1
Rule 16    ParamList1 -> Param
Rule 17    Param -> ID : Type
Rule 18    Cmds -> CmdSeq
Rule 19    Cmds -> Cmd
Rule 20    Cmd -> CmdAtrib
Rule 21    Cmd -> CmdIf
Rule 22    Cmd -> CmdWhile
Rule 23    Cmd -> CmdFor
Rule 24    Cmd -> CmdBreak
Rule 25    Cmd -> CmdPrint
Rule 26    Cmd -> CmdReturn
Rule 27    Cmd -> CmdSeq
Rule 28    CmdAtrib -> ID = Expr
Rule 29    CmdIf -> IF Expr : Cmd
Rule 30    CmdIf -> IF Expr : Cmd ELSE :
Rule 31    CmdWhile -> WHILE Expr : Cmds
Rule 32    CmdFor -> FOR CmdAtrib TO Expr : Cmd
Rule 33    CmdBreak -> BREAK
Rule 34    CmdPrint -> PRINT ( ExprList )
Rule 35    CmdReturn -> RETURN Expr
Rule 36    CmdSeq -> { CmdList }
Rule 37    CmdList -> Cmd ; CmdList
Rule 38    CmdList -> Cmd
Rule 39    Expr -> INT
Rule 40    Expr -> TRUE
Rule 41    Expr -> FALSE
Rule 42    Expr -> ID
Rule 43    Expr -> Expr BinOp Expr
Rule 44    Expr -> UnOp Expr
Rule 45    Expr -> ( Expr )
Rule 46    Expr -> ID ( ExprList )
Rule 47    Expr -> READ ( )
Rule 48    BinOp -> +
Rule 49    BinOp -> -
Rule 50    BinOp -> *
Rule 51    BinOp -> DIVIDE
Rule 52    BinOp -> EXP
Rule 53    BinOp -> %
Rule 54    BinOp -> EQUAL
Rule 55    BinOp -> NOTEQUAL
Rule 56    BinOp -> <
Rule 57    BinOp -> >
Rule 58    BinOp -> LESSEQUAL
Rule 59    BinOp -> GREATEREQUAL
Rule 60    BinOp -> AND
Rule 61    BinOp -> OR
Rule 62    UnOp -> -
Rule 63    UnOp -> NOT
Rule 64    ExprList -> empty
Rule 65    ExprList -> ExprList1
Rule 66    ExprList1 -> Expr
Rule 67    ExprList1 -> Expr , ExprList1
Rule 68    VarDecls -> empty
Rule 69    VarDecls -> VarDecl VarDecls
Rule 70    VarDecl -> VAR ID : Type ;
Rule 71    Type -> INTEGER
Rule 72    Type -> BOOL
Rule 73    empty -> <empty>

Terminals, with rules where they appear

%                    : 53
(                    : 8 34 45 46 47
)                    : 8 34 45 46 47
*                    : 50
+                    : 48
,                    : 15 67
-                    : 49 62
:                    : 8 17 29 30 30 31 32 70
;                    : 2 37 70
<                    : 56
=                    : 28
>                    : 57
AND                  : 60
BOOL                 : 10 72
BREAK                : 33
DIVIDE               : 51
ELSE                 : 30
EQUAL                : 54
EXP                  : 52
FALSE                : 41
FOR                  : 32
FUNCTION             : 8
GREATEREQUAL         : 59
ID                   : 2 8 17 28 42 46 70
IF                   : 29 30
INT                  : 39
INTEGER              : 9 71
LESSEQUAL            : 58
NOT                  : 63
NOTEQUAL             : 55
OR                   : 61
PRINT                : 34
PROGRAM              : 2
READ                 : 47
RETURN               : 35
TO                   : 32
TRUE                 : 40
VAR                  : 70
VOID                 : 11
WHILE                : 31
error                : 
{                    : 12 36
}                    : 12 36

Nonterminals, with rules where they appear

BinOp                : 43
Cmd                  : 19 29 30 32 37 38
CmdAtrib             : 20 32
CmdBreak             : 24
CmdFor               : 23
CmdIf                : 21
CmdList              : 12 36 37
CmdPrint             : 25
CmdReturn            : 26
CmdSeq               : 18 27
CmdWhile             : 22
Cmds                 : 3 31
Expr                 : 28 29 30 31 32 35 43 43 44 45 66 67
ExprList             : 34 46
ExprList1            : 65 67
FuncDecls            : 3 5
Function             : 5
FunctionBody         : 7
FunctionHeader       : 6
FunctionType         : 8
Param                : 15 16
ParamList            : 8
ParamList1           : 14 15
Program              : 0
ProgramBody          : 1
ProgramHeader        : 1
Type                 : 17 70
UnOp                 : 44
VarDecl              : 69
VarDecls             : 3 12 69
empty                : 4 13 64 68

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . ProgramHeader ProgramBody
    (2) ProgramHeader -> . PROGRAM ID ;

    PROGRAM         shift and go to state 3

    Program                        shift and go to state 1
    ProgramHeader                  shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> ProgramHeader . ProgramBody
    (3) ProgramBody -> . FuncDecls VarDecls Cmds
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (73) empty -> .
    (6) Function -> . FunctionHeader
    (7) Function -> . FunctionBody
    (8) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (12) FunctionBody -> . { VarDecls CmdList }
    (9) FunctionType -> . INTEGER
    (10) FunctionType -> . BOOL
    (11) FunctionType -> . VOID

  ! shift/reduce conflict for { resolved as shift
    VAR             reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    {               shift and go to state 11
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

  ! {               [ reduce using rule 73 (empty -> .) ]

    ProgramBody                    shift and go to state 4
    FuncDecls                      shift and go to state 5
    empty                          shift and go to state 6
    Function                       shift and go to state 7
    FunctionHeader                 shift and go to state 8
    FunctionBody                   shift and go to state 9
    FunctionType                   shift and go to state 10

state 3

    (2) ProgramHeader -> PROGRAM . ID ;

    ID              shift and go to state 15


state 4

    (1) Program -> ProgramHeader ProgramBody .

    $end            reduce using rule 1 (Program -> ProgramHeader ProgramBody .)


state 5

    (3) ProgramBody -> FuncDecls . VarDecls Cmds
    (68) VarDecls -> . empty
    (69) VarDecls -> . VarDecl VarDecls
    (73) empty -> .
    (70) VarDecl -> . VAR ID : Type ;

    {               reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    VAR             shift and go to state 19

    VarDecls                       shift and go to state 16
    empty                          shift and go to state 17
    VarDecl                        shift and go to state 18

state 6

    (4) FuncDecls -> empty .

    VAR             reduce using rule 4 (FuncDecls -> empty .)
    {               reduce using rule 4 (FuncDecls -> empty .)
    ID              reduce using rule 4 (FuncDecls -> empty .)
    IF              reduce using rule 4 (FuncDecls -> empty .)
    WHILE           reduce using rule 4 (FuncDecls -> empty .)
    FOR             reduce using rule 4 (FuncDecls -> empty .)
    BREAK           reduce using rule 4 (FuncDecls -> empty .)
    PRINT           reduce using rule 4 (FuncDecls -> empty .)
    RETURN          reduce using rule 4 (FuncDecls -> empty .)


state 7

    (5) FuncDecls -> Function . FuncDecls
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (73) empty -> .
    (6) Function -> . FunctionHeader
    (7) Function -> . FunctionBody
    (8) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (12) FunctionBody -> . { VarDecls CmdList }
    (9) FunctionType -> . INTEGER
    (10) FunctionType -> . BOOL
    (11) FunctionType -> . VOID

  ! shift/reduce conflict for { resolved as shift
    VAR             reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    {               shift and go to state 11
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

  ! {               [ reduce using rule 73 (empty -> .) ]

    Function                       shift and go to state 7
    FuncDecls                      shift and go to state 20
    empty                          shift and go to state 6
    FunctionHeader                 shift and go to state 8
    FunctionBody                   shift and go to state 9
    FunctionType                   shift and go to state 10

state 8

    (6) Function -> FunctionHeader .

    {               reduce using rule 6 (Function -> FunctionHeader .)
    INTEGER         reduce using rule 6 (Function -> FunctionHeader .)
    BOOL            reduce using rule 6 (Function -> FunctionHeader .)
    VOID            reduce using rule 6 (Function -> FunctionHeader .)
    VAR             reduce using rule 6 (Function -> FunctionHeader .)
    ID              reduce using rule 6 (Function -> FunctionHeader .)
    IF              reduce using rule 6 (Function -> FunctionHeader .)
    WHILE           reduce using rule 6 (Function -> FunctionHeader .)
    FOR             reduce using rule 6 (Function -> FunctionHeader .)
    BREAK           reduce using rule 6 (Function -> FunctionHeader .)
    PRINT           reduce using rule 6 (Function -> FunctionHeader .)
    RETURN          reduce using rule 6 (Function -> FunctionHeader .)


state 9

    (7) Function -> FunctionBody .

    {               reduce using rule 7 (Function -> FunctionBody .)
    INTEGER         reduce using rule 7 (Function -> FunctionBody .)
    BOOL            reduce using rule 7 (Function -> FunctionBody .)
    VOID            reduce using rule 7 (Function -> FunctionBody .)
    VAR             reduce using rule 7 (Function -> FunctionBody .)
    ID              reduce using rule 7 (Function -> FunctionBody .)
    IF              reduce using rule 7 (Function -> FunctionBody .)
    WHILE           reduce using rule 7 (Function -> FunctionBody .)
    FOR             reduce using rule 7 (Function -> FunctionBody .)
    BREAK           reduce using rule 7 (Function -> FunctionBody .)
    PRINT           reduce using rule 7 (Function -> FunctionBody .)
    RETURN          reduce using rule 7 (Function -> FunctionBody .)


state 10

    (8) FunctionHeader -> FunctionType . FUNCTION ID ( ParamList ) :

    FUNCTION        shift and go to state 21


state 11

    (12) FunctionBody -> { . VarDecls CmdList }
    (68) VarDecls -> . empty
    (69) VarDecls -> . VarDecl VarDecls
    (73) empty -> .
    (70) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    {               reduce using rule 73 (empty -> .)
    VAR             shift and go to state 19

    VarDecls                       shift and go to state 22
    empty                          shift and go to state 17
    VarDecl                        shift and go to state 18

state 12

    (9) FunctionType -> INTEGER .

    FUNCTION        reduce using rule 9 (FunctionType -> INTEGER .)


state 13

    (10) FunctionType -> BOOL .

    FUNCTION        reduce using rule 10 (FunctionType -> BOOL .)


state 14

    (11) FunctionType -> VOID .

    FUNCTION        reduce using rule 11 (FunctionType -> VOID .)


state 15

    (2) ProgramHeader -> PROGRAM ID . ;

    ;               shift and go to state 23


state 16

    (3) ProgramBody -> FuncDecls VarDecls . Cmds
    (18) Cmds -> . CmdSeq
    (19) Cmds -> . Cmd
    (36) CmdSeq -> . { CmdList }
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr

    {               shift and go to state 27
    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41

    Cmds                           shift and go to state 24
    CmdSeq                         shift and go to state 25
    Cmd                            shift and go to state 26
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34

state 17

    (68) VarDecls -> empty .

    {               reduce using rule 68 (VarDecls -> empty .)
    ID              reduce using rule 68 (VarDecls -> empty .)
    IF              reduce using rule 68 (VarDecls -> empty .)
    WHILE           reduce using rule 68 (VarDecls -> empty .)
    FOR             reduce using rule 68 (VarDecls -> empty .)
    BREAK           reduce using rule 68 (VarDecls -> empty .)
    PRINT           reduce using rule 68 (VarDecls -> empty .)
    RETURN          reduce using rule 68 (VarDecls -> empty .)


state 18

    (69) VarDecls -> VarDecl . VarDecls
    (68) VarDecls -> . empty
    (69) VarDecls -> . VarDecl VarDecls
    (73) empty -> .
    (70) VarDecl -> . VAR ID : Type ;

    {               reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    FOR             reduce using rule 73 (empty -> .)
    BREAK           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    VAR             shift and go to state 19

    VarDecl                        shift and go to state 18
    VarDecls                       shift and go to state 42
    empty                          shift and go to state 17

state 19

    (70) VarDecl -> VAR . ID : Type ;

    ID              shift and go to state 43


state 20

    (5) FuncDecls -> Function FuncDecls .

    VAR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    {               reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    ID              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    IF              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    WHILE           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    FOR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    BREAK           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    PRINT           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    RETURN          reduce using rule 5 (FuncDecls -> Function FuncDecls .)


state 21

    (8) FunctionHeader -> FunctionType FUNCTION . ID ( ParamList ) :

    ID              shift and go to state 44


state 22

    (12) FunctionBody -> { VarDecls . CmdList }
    (37) CmdList -> . Cmd ; CmdList
    (38) CmdList -> . Cmd
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr
    (36) CmdSeq -> . { CmdList }

    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41
    {               shift and go to state 27

    CmdList                        shift and go to state 45
    Cmd                            shift and go to state 46
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34
    CmdSeq                         shift and go to state 47

state 23

    (2) ProgramHeader -> PROGRAM ID ; .

    {               reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    INTEGER         reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BOOL            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VOID            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VAR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    ID              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    IF              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    WHILE           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    FOR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BREAK           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    PRINT           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    RETURN          reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)


state 24

    (3) ProgramBody -> FuncDecls VarDecls Cmds .

    $end            reduce using rule 3 (ProgramBody -> FuncDecls VarDecls Cmds .)


state 25

    (18) Cmds -> CmdSeq .
    (27) Cmd -> CmdSeq .

  ! reduce/reduce conflict for $end resolved using rule 18 (Cmds -> CmdSeq .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (Cmds -> CmdSeq .)
  ! reduce/reduce conflict for ; resolved using rule 18 (Cmds -> CmdSeq .)
  ! reduce/reduce conflict for } resolved using rule 18 (Cmds -> CmdSeq .)
    $end            reduce using rule 18 (Cmds -> CmdSeq .)
    ELSE            reduce using rule 18 (Cmds -> CmdSeq .)
    ;               reduce using rule 18 (Cmds -> CmdSeq .)
    }               reduce using rule 18 (Cmds -> CmdSeq .)

  ! $end            [ reduce using rule 27 (Cmd -> CmdSeq .) ]
  ! ELSE            [ reduce using rule 27 (Cmd -> CmdSeq .) ]
  ! ;               [ reduce using rule 27 (Cmd -> CmdSeq .) ]
  ! }               [ reduce using rule 27 (Cmd -> CmdSeq .) ]


state 26

    (19) Cmds -> Cmd .

    $end            reduce using rule 19 (Cmds -> Cmd .)
    ELSE            reduce using rule 19 (Cmds -> Cmd .)
    ;               reduce using rule 19 (Cmds -> Cmd .)
    }               reduce using rule 19 (Cmds -> Cmd .)


state 27

    (36) CmdSeq -> { . CmdList }
    (37) CmdList -> . Cmd ; CmdList
    (38) CmdList -> . Cmd
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr
    (36) CmdSeq -> . { CmdList }

    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41
    {               shift and go to state 27

    CmdList                        shift and go to state 48
    Cmd                            shift and go to state 46
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34
    CmdSeq                         shift and go to state 47

state 28

    (20) Cmd -> CmdAtrib .

    $end            reduce using rule 20 (Cmd -> CmdAtrib .)
    ;               reduce using rule 20 (Cmd -> CmdAtrib .)
    }               reduce using rule 20 (Cmd -> CmdAtrib .)
    ELSE            reduce using rule 20 (Cmd -> CmdAtrib .)


state 29

    (21) Cmd -> CmdIf .

    $end            reduce using rule 21 (Cmd -> CmdIf .)
    ;               reduce using rule 21 (Cmd -> CmdIf .)
    }               reduce using rule 21 (Cmd -> CmdIf .)
    ELSE            reduce using rule 21 (Cmd -> CmdIf .)


state 30

    (22) Cmd -> CmdWhile .

    $end            reduce using rule 22 (Cmd -> CmdWhile .)
    ;               reduce using rule 22 (Cmd -> CmdWhile .)
    }               reduce using rule 22 (Cmd -> CmdWhile .)
    ELSE            reduce using rule 22 (Cmd -> CmdWhile .)


state 31

    (23) Cmd -> CmdFor .

    $end            reduce using rule 23 (Cmd -> CmdFor .)
    ;               reduce using rule 23 (Cmd -> CmdFor .)
    }               reduce using rule 23 (Cmd -> CmdFor .)
    ELSE            reduce using rule 23 (Cmd -> CmdFor .)


state 32

    (24) Cmd -> CmdBreak .

    $end            reduce using rule 24 (Cmd -> CmdBreak .)
    ;               reduce using rule 24 (Cmd -> CmdBreak .)
    }               reduce using rule 24 (Cmd -> CmdBreak .)
    ELSE            reduce using rule 24 (Cmd -> CmdBreak .)


state 33

    (25) Cmd -> CmdPrint .

    $end            reduce using rule 25 (Cmd -> CmdPrint .)
    ;               reduce using rule 25 (Cmd -> CmdPrint .)
    }               reduce using rule 25 (Cmd -> CmdPrint .)
    ELSE            reduce using rule 25 (Cmd -> CmdPrint .)


state 34

    (26) Cmd -> CmdReturn .

    $end            reduce using rule 26 (Cmd -> CmdReturn .)
    ;               reduce using rule 26 (Cmd -> CmdReturn .)
    }               reduce using rule 26 (Cmd -> CmdReturn .)
    ELSE            reduce using rule 26 (Cmd -> CmdReturn .)


state 35

    (28) CmdAtrib -> ID . = Expr

    =               shift and go to state 49


state 36

    (29) CmdIf -> IF . Expr : Cmd
    (30) CmdIf -> IF . Expr : Cmd ELSE :
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 50
    UnOp                           shift and go to state 55

state 37

    (31) CmdWhile -> WHILE . Expr : Cmds
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 60
    UnOp                           shift and go to state 55

state 38

    (32) CmdFor -> FOR . CmdAtrib TO Expr : Cmd
    (28) CmdAtrib -> . ID = Expr

    ID              shift and go to state 35

    CmdAtrib                       shift and go to state 61

state 39

    (33) CmdBreak -> BREAK .

    $end            reduce using rule 33 (CmdBreak -> BREAK .)
    ;               reduce using rule 33 (CmdBreak -> BREAK .)
    }               reduce using rule 33 (CmdBreak -> BREAK .)
    ELSE            reduce using rule 33 (CmdBreak -> BREAK .)


state 40

    (34) CmdPrint -> PRINT . ( ExprList )

    (               shift and go to state 62


state 41

    (35) CmdReturn -> RETURN . Expr
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 63
    UnOp                           shift and go to state 55

state 42

    (69) VarDecls -> VarDecl VarDecls .

    {               reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    ID              reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    IF              reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    WHILE           reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    FOR             reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    BREAK           reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    PRINT           reduce using rule 69 (VarDecls -> VarDecl VarDecls .)
    RETURN          reduce using rule 69 (VarDecls -> VarDecl VarDecls .)


state 43

    (70) VarDecl -> VAR ID . : Type ;

    :               shift and go to state 64


state 44

    (8) FunctionHeader -> FunctionType FUNCTION ID . ( ParamList ) :

    (               shift and go to state 65


state 45

    (12) FunctionBody -> { VarDecls CmdList . }

    }               shift and go to state 66


state 46

    (37) CmdList -> Cmd . ; CmdList
    (38) CmdList -> Cmd .

    ;               shift and go to state 67
    }               reduce using rule 38 (CmdList -> Cmd .)


state 47

    (27) Cmd -> CmdSeq .

    ;               reduce using rule 27 (Cmd -> CmdSeq .)
    }               reduce using rule 27 (Cmd -> CmdSeq .)
    ELSE            reduce using rule 27 (Cmd -> CmdSeq .)
    $end            reduce using rule 27 (Cmd -> CmdSeq .)


state 48

    (36) CmdSeq -> { CmdList . }

    }               shift and go to state 68


state 49

    (28) CmdAtrib -> ID = . Expr
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 69
    UnOp                           shift and go to state 55

state 50

    (29) CmdIf -> IF Expr . : Cmd
    (30) CmdIf -> IF Expr . : Cmd ELSE :
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    :               shift and go to state 70
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 51

    (39) Expr -> INT .

    :               reduce using rule 39 (Expr -> INT .)
    +               reduce using rule 39 (Expr -> INT .)
    -               reduce using rule 39 (Expr -> INT .)
    *               reduce using rule 39 (Expr -> INT .)
    DIVIDE          reduce using rule 39 (Expr -> INT .)
    EXP             reduce using rule 39 (Expr -> INT .)
    %               reduce using rule 39 (Expr -> INT .)
    EQUAL           reduce using rule 39 (Expr -> INT .)
    NOTEQUAL        reduce using rule 39 (Expr -> INT .)
    <               reduce using rule 39 (Expr -> INT .)
    >               reduce using rule 39 (Expr -> INT .)
    LESSEQUAL       reduce using rule 39 (Expr -> INT .)
    GREATEREQUAL    reduce using rule 39 (Expr -> INT .)
    AND             reduce using rule 39 (Expr -> INT .)
    OR              reduce using rule 39 (Expr -> INT .)
    $end            reduce using rule 39 (Expr -> INT .)
    ;               reduce using rule 39 (Expr -> INT .)
    }               reduce using rule 39 (Expr -> INT .)
    ELSE            reduce using rule 39 (Expr -> INT .)
    TO              reduce using rule 39 (Expr -> INT .)
    )               reduce using rule 39 (Expr -> INT .)
    ,               reduce using rule 39 (Expr -> INT .)


state 52

    (40) Expr -> TRUE .

    :               reduce using rule 40 (Expr -> TRUE .)
    +               reduce using rule 40 (Expr -> TRUE .)
    -               reduce using rule 40 (Expr -> TRUE .)
    *               reduce using rule 40 (Expr -> TRUE .)
    DIVIDE          reduce using rule 40 (Expr -> TRUE .)
    EXP             reduce using rule 40 (Expr -> TRUE .)
    %               reduce using rule 40 (Expr -> TRUE .)
    EQUAL           reduce using rule 40 (Expr -> TRUE .)
    NOTEQUAL        reduce using rule 40 (Expr -> TRUE .)
    <               reduce using rule 40 (Expr -> TRUE .)
    >               reduce using rule 40 (Expr -> TRUE .)
    LESSEQUAL       reduce using rule 40 (Expr -> TRUE .)
    GREATEREQUAL    reduce using rule 40 (Expr -> TRUE .)
    AND             reduce using rule 40 (Expr -> TRUE .)
    OR              reduce using rule 40 (Expr -> TRUE .)
    $end            reduce using rule 40 (Expr -> TRUE .)
    ;               reduce using rule 40 (Expr -> TRUE .)
    }               reduce using rule 40 (Expr -> TRUE .)
    ELSE            reduce using rule 40 (Expr -> TRUE .)
    TO              reduce using rule 40 (Expr -> TRUE .)
    )               reduce using rule 40 (Expr -> TRUE .)
    ,               reduce using rule 40 (Expr -> TRUE .)


state 53

    (41) Expr -> FALSE .

    :               reduce using rule 41 (Expr -> FALSE .)
    +               reduce using rule 41 (Expr -> FALSE .)
    -               reduce using rule 41 (Expr -> FALSE .)
    *               reduce using rule 41 (Expr -> FALSE .)
    DIVIDE          reduce using rule 41 (Expr -> FALSE .)
    EXP             reduce using rule 41 (Expr -> FALSE .)
    %               reduce using rule 41 (Expr -> FALSE .)
    EQUAL           reduce using rule 41 (Expr -> FALSE .)
    NOTEQUAL        reduce using rule 41 (Expr -> FALSE .)
    <               reduce using rule 41 (Expr -> FALSE .)
    >               reduce using rule 41 (Expr -> FALSE .)
    LESSEQUAL       reduce using rule 41 (Expr -> FALSE .)
    GREATEREQUAL    reduce using rule 41 (Expr -> FALSE .)
    AND             reduce using rule 41 (Expr -> FALSE .)
    OR              reduce using rule 41 (Expr -> FALSE .)
    $end            reduce using rule 41 (Expr -> FALSE .)
    ;               reduce using rule 41 (Expr -> FALSE .)
    }               reduce using rule 41 (Expr -> FALSE .)
    ELSE            reduce using rule 41 (Expr -> FALSE .)
    TO              reduce using rule 41 (Expr -> FALSE .)
    )               reduce using rule 41 (Expr -> FALSE .)
    ,               reduce using rule 41 (Expr -> FALSE .)


state 54

    (42) Expr -> ID .
    (46) Expr -> ID . ( ExprList )

    :               reduce using rule 42 (Expr -> ID .)
    +               reduce using rule 42 (Expr -> ID .)
    -               reduce using rule 42 (Expr -> ID .)
    *               reduce using rule 42 (Expr -> ID .)
    DIVIDE          reduce using rule 42 (Expr -> ID .)
    EXP             reduce using rule 42 (Expr -> ID .)
    %               reduce using rule 42 (Expr -> ID .)
    EQUAL           reduce using rule 42 (Expr -> ID .)
    NOTEQUAL        reduce using rule 42 (Expr -> ID .)
    <               reduce using rule 42 (Expr -> ID .)
    >               reduce using rule 42 (Expr -> ID .)
    LESSEQUAL       reduce using rule 42 (Expr -> ID .)
    GREATEREQUAL    reduce using rule 42 (Expr -> ID .)
    AND             reduce using rule 42 (Expr -> ID .)
    OR              reduce using rule 42 (Expr -> ID .)
    $end            reduce using rule 42 (Expr -> ID .)
    ;               reduce using rule 42 (Expr -> ID .)
    }               reduce using rule 42 (Expr -> ID .)
    ELSE            reduce using rule 42 (Expr -> ID .)
    TO              reduce using rule 42 (Expr -> ID .)
    )               reduce using rule 42 (Expr -> ID .)
    ,               reduce using rule 42 (Expr -> ID .)
    (               shift and go to state 86


state 55

    (44) Expr -> UnOp . Expr
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    UnOp                           shift and go to state 55
    Expr                           shift and go to state 87

state 56

    (45) Expr -> ( . Expr )
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 88
    UnOp                           shift and go to state 55

state 57

    (47) Expr -> READ . ( )

    (               shift and go to state 89


state 58

    (62) UnOp -> - .

    INT             reduce using rule 62 (UnOp -> - .)
    TRUE            reduce using rule 62 (UnOp -> - .)
    FALSE           reduce using rule 62 (UnOp -> - .)
    ID              reduce using rule 62 (UnOp -> - .)
    (               reduce using rule 62 (UnOp -> - .)
    READ            reduce using rule 62 (UnOp -> - .)
    -               reduce using rule 62 (UnOp -> - .)
    NOT             reduce using rule 62 (UnOp -> - .)


state 59

    (63) UnOp -> NOT .

    INT             reduce using rule 63 (UnOp -> NOT .)
    TRUE            reduce using rule 63 (UnOp -> NOT .)
    FALSE           reduce using rule 63 (UnOp -> NOT .)
    ID              reduce using rule 63 (UnOp -> NOT .)
    (               reduce using rule 63 (UnOp -> NOT .)
    READ            reduce using rule 63 (UnOp -> NOT .)
    -               reduce using rule 63 (UnOp -> NOT .)
    NOT             reduce using rule 63 (UnOp -> NOT .)


state 60

    (31) CmdWhile -> WHILE Expr . : Cmds
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    :               shift and go to state 90
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 61

    (32) CmdFor -> FOR CmdAtrib . TO Expr : Cmd

    TO              shift and go to state 91


state 62

    (34) CmdPrint -> PRINT ( . ExprList )
    (64) ExprList -> . empty
    (65) ExprList -> . ExprList1
    (73) empty -> .
    (66) ExprList1 -> . Expr
    (67) ExprList1 -> . Expr , ExprList1
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    )               reduce using rule 73 (empty -> .)
    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    ExprList                       shift and go to state 92
    empty                          shift and go to state 93
    ExprList1                      shift and go to state 94
    Expr                           shift and go to state 95
    UnOp                           shift and go to state 55

state 63

    (35) CmdReturn -> RETURN Expr .
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    $end            reduce using rule 35 (CmdReturn -> RETURN Expr .)
    ;               reduce using rule 35 (CmdReturn -> RETURN Expr .)
    }               reduce using rule 35 (CmdReturn -> RETURN Expr .)
    ELSE            reduce using rule 35 (CmdReturn -> RETURN Expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 64

    (70) VarDecl -> VAR ID : . Type ;
    (71) Type -> . INTEGER
    (72) Type -> . BOOL

    INTEGER         shift and go to state 97
    BOOL            shift and go to state 98

    Type                           shift and go to state 96

state 65

    (8) FunctionHeader -> FunctionType FUNCTION ID ( . ParamList ) :
    (13) ParamList -> . empty
    (14) ParamList -> . ParamList1
    (73) empty -> .
    (15) ParamList1 -> . Param , ParamList1
    (16) ParamList1 -> . Param
    (17) Param -> . ID : Type

    )               reduce using rule 73 (empty -> .)
    ID              shift and go to state 99

    ParamList                      shift and go to state 100
    empty                          shift and go to state 101
    ParamList1                     shift and go to state 102
    Param                          shift and go to state 103

state 66

    (12) FunctionBody -> { VarDecls CmdList } .

    {               reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    INTEGER         reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    BOOL            reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    VOID            reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    VAR             reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    ID              reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    IF              reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    WHILE           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    FOR             reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    BREAK           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    PRINT           reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)
    RETURN          reduce using rule 12 (FunctionBody -> { VarDecls CmdList } .)


state 67

    (37) CmdList -> Cmd ; . CmdList
    (37) CmdList -> . Cmd ; CmdList
    (38) CmdList -> . Cmd
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr
    (36) CmdSeq -> . { CmdList }

    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41
    {               shift and go to state 27

    Cmd                            shift and go to state 46
    CmdList                        shift and go to state 104
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34
    CmdSeq                         shift and go to state 47

state 68

    (36) CmdSeq -> { CmdList } .

    $end            reduce using rule 36 (CmdSeq -> { CmdList } .)
    ;               reduce using rule 36 (CmdSeq -> { CmdList } .)
    }               reduce using rule 36 (CmdSeq -> { CmdList } .)
    ELSE            reduce using rule 36 (CmdSeq -> { CmdList } .)


state 69

    (28) CmdAtrib -> ID = Expr .
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    $end            reduce using rule 28 (CmdAtrib -> ID = Expr .)
    ;               reduce using rule 28 (CmdAtrib -> ID = Expr .)
    }               reduce using rule 28 (CmdAtrib -> ID = Expr .)
    TO              reduce using rule 28 (CmdAtrib -> ID = Expr .)
    ELSE            reduce using rule 28 (CmdAtrib -> ID = Expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 70

    (29) CmdIf -> IF Expr : . Cmd
    (30) CmdIf -> IF Expr : . Cmd ELSE :
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr
    (36) CmdSeq -> . { CmdList }

    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41
    {               shift and go to state 27

    Cmd                            shift and go to state 105
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34
    CmdSeq                         shift and go to state 47

state 71

    (43) Expr -> Expr BinOp . Expr
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 106
    UnOp                           shift and go to state 55

state 72

    (48) BinOp -> + .

    INT             reduce using rule 48 (BinOp -> + .)
    TRUE            reduce using rule 48 (BinOp -> + .)
    FALSE           reduce using rule 48 (BinOp -> + .)
    ID              reduce using rule 48 (BinOp -> + .)
    (               reduce using rule 48 (BinOp -> + .)
    READ            reduce using rule 48 (BinOp -> + .)
    -               reduce using rule 48 (BinOp -> + .)
    NOT             reduce using rule 48 (BinOp -> + .)


state 73

    (49) BinOp -> - .

    INT             reduce using rule 49 (BinOp -> - .)
    TRUE            reduce using rule 49 (BinOp -> - .)
    FALSE           reduce using rule 49 (BinOp -> - .)
    ID              reduce using rule 49 (BinOp -> - .)
    (               reduce using rule 49 (BinOp -> - .)
    READ            reduce using rule 49 (BinOp -> - .)
    -               reduce using rule 49 (BinOp -> - .)
    NOT             reduce using rule 49 (BinOp -> - .)


state 74

    (50) BinOp -> * .

    INT             reduce using rule 50 (BinOp -> * .)
    TRUE            reduce using rule 50 (BinOp -> * .)
    FALSE           reduce using rule 50 (BinOp -> * .)
    ID              reduce using rule 50 (BinOp -> * .)
    (               reduce using rule 50 (BinOp -> * .)
    READ            reduce using rule 50 (BinOp -> * .)
    -               reduce using rule 50 (BinOp -> * .)
    NOT             reduce using rule 50 (BinOp -> * .)


state 75

    (51) BinOp -> DIVIDE .

    INT             reduce using rule 51 (BinOp -> DIVIDE .)
    TRUE            reduce using rule 51 (BinOp -> DIVIDE .)
    FALSE           reduce using rule 51 (BinOp -> DIVIDE .)
    ID              reduce using rule 51 (BinOp -> DIVIDE .)
    (               reduce using rule 51 (BinOp -> DIVIDE .)
    READ            reduce using rule 51 (BinOp -> DIVIDE .)
    -               reduce using rule 51 (BinOp -> DIVIDE .)
    NOT             reduce using rule 51 (BinOp -> DIVIDE .)


state 76

    (52) BinOp -> EXP .

    INT             reduce using rule 52 (BinOp -> EXP .)
    TRUE            reduce using rule 52 (BinOp -> EXP .)
    FALSE           reduce using rule 52 (BinOp -> EXP .)
    ID              reduce using rule 52 (BinOp -> EXP .)
    (               reduce using rule 52 (BinOp -> EXP .)
    READ            reduce using rule 52 (BinOp -> EXP .)
    -               reduce using rule 52 (BinOp -> EXP .)
    NOT             reduce using rule 52 (BinOp -> EXP .)


state 77

    (53) BinOp -> % .

    INT             reduce using rule 53 (BinOp -> % .)
    TRUE            reduce using rule 53 (BinOp -> % .)
    FALSE           reduce using rule 53 (BinOp -> % .)
    ID              reduce using rule 53 (BinOp -> % .)
    (               reduce using rule 53 (BinOp -> % .)
    READ            reduce using rule 53 (BinOp -> % .)
    -               reduce using rule 53 (BinOp -> % .)
    NOT             reduce using rule 53 (BinOp -> % .)


state 78

    (54) BinOp -> EQUAL .

    INT             reduce using rule 54 (BinOp -> EQUAL .)
    TRUE            reduce using rule 54 (BinOp -> EQUAL .)
    FALSE           reduce using rule 54 (BinOp -> EQUAL .)
    ID              reduce using rule 54 (BinOp -> EQUAL .)
    (               reduce using rule 54 (BinOp -> EQUAL .)
    READ            reduce using rule 54 (BinOp -> EQUAL .)
    -               reduce using rule 54 (BinOp -> EQUAL .)
    NOT             reduce using rule 54 (BinOp -> EQUAL .)


state 79

    (55) BinOp -> NOTEQUAL .

    INT             reduce using rule 55 (BinOp -> NOTEQUAL .)
    TRUE            reduce using rule 55 (BinOp -> NOTEQUAL .)
    FALSE           reduce using rule 55 (BinOp -> NOTEQUAL .)
    ID              reduce using rule 55 (BinOp -> NOTEQUAL .)
    (               reduce using rule 55 (BinOp -> NOTEQUAL .)
    READ            reduce using rule 55 (BinOp -> NOTEQUAL .)
    -               reduce using rule 55 (BinOp -> NOTEQUAL .)
    NOT             reduce using rule 55 (BinOp -> NOTEQUAL .)


state 80

    (56) BinOp -> < .

    INT             reduce using rule 56 (BinOp -> < .)
    TRUE            reduce using rule 56 (BinOp -> < .)
    FALSE           reduce using rule 56 (BinOp -> < .)
    ID              reduce using rule 56 (BinOp -> < .)
    (               reduce using rule 56 (BinOp -> < .)
    READ            reduce using rule 56 (BinOp -> < .)
    -               reduce using rule 56 (BinOp -> < .)
    NOT             reduce using rule 56 (BinOp -> < .)


state 81

    (57) BinOp -> > .

    INT             reduce using rule 57 (BinOp -> > .)
    TRUE            reduce using rule 57 (BinOp -> > .)
    FALSE           reduce using rule 57 (BinOp -> > .)
    ID              reduce using rule 57 (BinOp -> > .)
    (               reduce using rule 57 (BinOp -> > .)
    READ            reduce using rule 57 (BinOp -> > .)
    -               reduce using rule 57 (BinOp -> > .)
    NOT             reduce using rule 57 (BinOp -> > .)


state 82

    (58) BinOp -> LESSEQUAL .

    INT             reduce using rule 58 (BinOp -> LESSEQUAL .)
    TRUE            reduce using rule 58 (BinOp -> LESSEQUAL .)
    FALSE           reduce using rule 58 (BinOp -> LESSEQUAL .)
    ID              reduce using rule 58 (BinOp -> LESSEQUAL .)
    (               reduce using rule 58 (BinOp -> LESSEQUAL .)
    READ            reduce using rule 58 (BinOp -> LESSEQUAL .)
    -               reduce using rule 58 (BinOp -> LESSEQUAL .)
    NOT             reduce using rule 58 (BinOp -> LESSEQUAL .)


state 83

    (59) BinOp -> GREATEREQUAL .

    INT             reduce using rule 59 (BinOp -> GREATEREQUAL .)
    TRUE            reduce using rule 59 (BinOp -> GREATEREQUAL .)
    FALSE           reduce using rule 59 (BinOp -> GREATEREQUAL .)
    ID              reduce using rule 59 (BinOp -> GREATEREQUAL .)
    (               reduce using rule 59 (BinOp -> GREATEREQUAL .)
    READ            reduce using rule 59 (BinOp -> GREATEREQUAL .)
    -               reduce using rule 59 (BinOp -> GREATEREQUAL .)
    NOT             reduce using rule 59 (BinOp -> GREATEREQUAL .)


state 84

    (60) BinOp -> AND .

    INT             reduce using rule 60 (BinOp -> AND .)
    TRUE            reduce using rule 60 (BinOp -> AND .)
    FALSE           reduce using rule 60 (BinOp -> AND .)
    ID              reduce using rule 60 (BinOp -> AND .)
    (               reduce using rule 60 (BinOp -> AND .)
    READ            reduce using rule 60 (BinOp -> AND .)
    -               reduce using rule 60 (BinOp -> AND .)
    NOT             reduce using rule 60 (BinOp -> AND .)


state 85

    (61) BinOp -> OR .

    INT             reduce using rule 61 (BinOp -> OR .)
    TRUE            reduce using rule 61 (BinOp -> OR .)
    FALSE           reduce using rule 61 (BinOp -> OR .)
    ID              reduce using rule 61 (BinOp -> OR .)
    (               reduce using rule 61 (BinOp -> OR .)
    READ            reduce using rule 61 (BinOp -> OR .)
    -               reduce using rule 61 (BinOp -> OR .)
    NOT             reduce using rule 61 (BinOp -> OR .)


state 86

    (46) Expr -> ID ( . ExprList )
    (64) ExprList -> . empty
    (65) ExprList -> . ExprList1
    (73) empty -> .
    (66) ExprList1 -> . Expr
    (67) ExprList1 -> . Expr , ExprList1
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    )               reduce using rule 73 (empty -> .)
    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    ExprList                       shift and go to state 107
    empty                          shift and go to state 93
    ExprList1                      shift and go to state 94
    Expr                           shift and go to state 95
    UnOp                           shift and go to state 55

state 87

    (44) Expr -> UnOp Expr .
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    :               reduce using rule 44 (Expr -> UnOp Expr .)
    +               reduce using rule 44 (Expr -> UnOp Expr .)
    -               reduce using rule 44 (Expr -> UnOp Expr .)
    *               reduce using rule 44 (Expr -> UnOp Expr .)
    DIVIDE          reduce using rule 44 (Expr -> UnOp Expr .)
    EXP             reduce using rule 44 (Expr -> UnOp Expr .)
    %               reduce using rule 44 (Expr -> UnOp Expr .)
    EQUAL           reduce using rule 44 (Expr -> UnOp Expr .)
    NOTEQUAL        reduce using rule 44 (Expr -> UnOp Expr .)
    <               reduce using rule 44 (Expr -> UnOp Expr .)
    >               reduce using rule 44 (Expr -> UnOp Expr .)
    LESSEQUAL       reduce using rule 44 (Expr -> UnOp Expr .)
    GREATEREQUAL    reduce using rule 44 (Expr -> UnOp Expr .)
    AND             reduce using rule 44 (Expr -> UnOp Expr .)
    OR              reduce using rule 44 (Expr -> UnOp Expr .)
    $end            reduce using rule 44 (Expr -> UnOp Expr .)
    ;               reduce using rule 44 (Expr -> UnOp Expr .)
    }               reduce using rule 44 (Expr -> UnOp Expr .)
    ELSE            reduce using rule 44 (Expr -> UnOp Expr .)
    TO              reduce using rule 44 (Expr -> UnOp Expr .)
    )               reduce using rule 44 (Expr -> UnOp Expr .)
    ,               reduce using rule 44 (Expr -> UnOp Expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! EXP             [ shift and go to state 76 ]
  ! %               [ shift and go to state 77 ]
  ! EQUAL           [ shift and go to state 78 ]
  ! NOTEQUAL        [ shift and go to state 79 ]
  ! <               [ shift and go to state 80 ]
  ! >               [ shift and go to state 81 ]
  ! LESSEQUAL       [ shift and go to state 82 ]
  ! GREATEREQUAL    [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]

    BinOp                          shift and go to state 71

state 88

    (45) Expr -> ( Expr . )
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    )               shift and go to state 108
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 89

    (47) Expr -> READ ( . )

    )               shift and go to state 109


state 90

    (31) CmdWhile -> WHILE Expr : . Cmds
    (18) Cmds -> . CmdSeq
    (19) Cmds -> . Cmd
    (36) CmdSeq -> . { CmdList }
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr

    {               shift and go to state 27
    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41

    Cmds                           shift and go to state 110
    CmdSeq                         shift and go to state 25
    Cmd                            shift and go to state 26
    CmdAtrib                       shift and go to state 28
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34

state 91

    (32) CmdFor -> FOR CmdAtrib TO . Expr : Cmd
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 111
    UnOp                           shift and go to state 55

state 92

    (34) CmdPrint -> PRINT ( ExprList . )

    )               shift and go to state 112


state 93

    (64) ExprList -> empty .

    )               reduce using rule 64 (ExprList -> empty .)


state 94

    (65) ExprList -> ExprList1 .

    )               reduce using rule 65 (ExprList -> ExprList1 .)


state 95

    (66) ExprList1 -> Expr .
    (67) ExprList1 -> Expr . , ExprList1
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    )               reduce using rule 66 (ExprList1 -> Expr .)
    ,               shift and go to state 113
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 96

    (70) VarDecl -> VAR ID : Type . ;

    ;               shift and go to state 114


state 97

    (71) Type -> INTEGER .

    ;               reduce using rule 71 (Type -> INTEGER .)
    ,               reduce using rule 71 (Type -> INTEGER .)
    )               reduce using rule 71 (Type -> INTEGER .)


state 98

    (72) Type -> BOOL .

    ;               reduce using rule 72 (Type -> BOOL .)
    ,               reduce using rule 72 (Type -> BOOL .)
    )               reduce using rule 72 (Type -> BOOL .)


state 99

    (17) Param -> ID . : Type

    :               shift and go to state 115


state 100

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList . ) :

    )               shift and go to state 116


state 101

    (13) ParamList -> empty .

    )               reduce using rule 13 (ParamList -> empty .)


state 102

    (14) ParamList -> ParamList1 .

    )               reduce using rule 14 (ParamList -> ParamList1 .)


state 103

    (15) ParamList1 -> Param . , ParamList1
    (16) ParamList1 -> Param .

    ,               shift and go to state 117
    )               reduce using rule 16 (ParamList1 -> Param .)


state 104

    (37) CmdList -> Cmd ; CmdList .

    }               reduce using rule 37 (CmdList -> Cmd ; CmdList .)


state 105

    (29) CmdIf -> IF Expr : Cmd .
    (30) CmdIf -> IF Expr : Cmd . ELSE :

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 29 (CmdIf -> IF Expr : Cmd .)
    ;               reduce using rule 29 (CmdIf -> IF Expr : Cmd .)
    }               reduce using rule 29 (CmdIf -> IF Expr : Cmd .)
    ELSE            shift and go to state 118

  ! ELSE            [ reduce using rule 29 (CmdIf -> IF Expr : Cmd .) ]


state 106

    (43) Expr -> Expr BinOp Expr .
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    :               reduce using rule 43 (Expr -> Expr BinOp Expr .)
    $end            reduce using rule 43 (Expr -> Expr BinOp Expr .)
    ;               reduce using rule 43 (Expr -> Expr BinOp Expr .)
    }               reduce using rule 43 (Expr -> Expr BinOp Expr .)
    ELSE            reduce using rule 43 (Expr -> Expr BinOp Expr .)
    TO              reduce using rule 43 (Expr -> Expr BinOp Expr .)
    )               reduce using rule 43 (Expr -> Expr BinOp Expr .)
    ,               reduce using rule 43 (Expr -> Expr BinOp Expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

  ! +               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! -               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! *               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! DIVIDE          [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! EXP             [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! %               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! EQUAL           [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! NOTEQUAL        [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! <               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! >               [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! LESSEQUAL       [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! AND             [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]
  ! OR              [ reduce using rule 43 (Expr -> Expr BinOp Expr .) ]

    BinOp                          shift and go to state 71

state 107

    (46) Expr -> ID ( ExprList . )

    )               shift and go to state 119


state 108

    (45) Expr -> ( Expr ) .

    :               reduce using rule 45 (Expr -> ( Expr ) .)
    +               reduce using rule 45 (Expr -> ( Expr ) .)
    -               reduce using rule 45 (Expr -> ( Expr ) .)
    *               reduce using rule 45 (Expr -> ( Expr ) .)
    DIVIDE          reduce using rule 45 (Expr -> ( Expr ) .)
    EXP             reduce using rule 45 (Expr -> ( Expr ) .)
    %               reduce using rule 45 (Expr -> ( Expr ) .)
    EQUAL           reduce using rule 45 (Expr -> ( Expr ) .)
    NOTEQUAL        reduce using rule 45 (Expr -> ( Expr ) .)
    <               reduce using rule 45 (Expr -> ( Expr ) .)
    >               reduce using rule 45 (Expr -> ( Expr ) .)
    LESSEQUAL       reduce using rule 45 (Expr -> ( Expr ) .)
    GREATEREQUAL    reduce using rule 45 (Expr -> ( Expr ) .)
    AND             reduce using rule 45 (Expr -> ( Expr ) .)
    OR              reduce using rule 45 (Expr -> ( Expr ) .)
    $end            reduce using rule 45 (Expr -> ( Expr ) .)
    ;               reduce using rule 45 (Expr -> ( Expr ) .)
    }               reduce using rule 45 (Expr -> ( Expr ) .)
    ELSE            reduce using rule 45 (Expr -> ( Expr ) .)
    TO              reduce using rule 45 (Expr -> ( Expr ) .)
    )               reduce using rule 45 (Expr -> ( Expr ) .)
    ,               reduce using rule 45 (Expr -> ( Expr ) .)


state 109

    (47) Expr -> READ ( ) .

    :               reduce using rule 47 (Expr -> READ ( ) .)
    +               reduce using rule 47 (Expr -> READ ( ) .)
    -               reduce using rule 47 (Expr -> READ ( ) .)
    *               reduce using rule 47 (Expr -> READ ( ) .)
    DIVIDE          reduce using rule 47 (Expr -> READ ( ) .)
    EXP             reduce using rule 47 (Expr -> READ ( ) .)
    %               reduce using rule 47 (Expr -> READ ( ) .)
    EQUAL           reduce using rule 47 (Expr -> READ ( ) .)
    NOTEQUAL        reduce using rule 47 (Expr -> READ ( ) .)
    <               reduce using rule 47 (Expr -> READ ( ) .)
    >               reduce using rule 47 (Expr -> READ ( ) .)
    LESSEQUAL       reduce using rule 47 (Expr -> READ ( ) .)
    GREATEREQUAL    reduce using rule 47 (Expr -> READ ( ) .)
    AND             reduce using rule 47 (Expr -> READ ( ) .)
    OR              reduce using rule 47 (Expr -> READ ( ) .)
    $end            reduce using rule 47 (Expr -> READ ( ) .)
    ;               reduce using rule 47 (Expr -> READ ( ) .)
    }               reduce using rule 47 (Expr -> READ ( ) .)
    ELSE            reduce using rule 47 (Expr -> READ ( ) .)
    TO              reduce using rule 47 (Expr -> READ ( ) .)
    )               reduce using rule 47 (Expr -> READ ( ) .)
    ,               reduce using rule 47 (Expr -> READ ( ) .)


state 110

    (31) CmdWhile -> WHILE Expr : Cmds .

    $end            reduce using rule 31 (CmdWhile -> WHILE Expr : Cmds .)
    ;               reduce using rule 31 (CmdWhile -> WHILE Expr : Cmds .)
    }               reduce using rule 31 (CmdWhile -> WHILE Expr : Cmds .)
    ELSE            reduce using rule 31 (CmdWhile -> WHILE Expr : Cmds .)


state 111

    (32) CmdFor -> FOR CmdAtrib TO Expr . : Cmd
    (43) Expr -> Expr . BinOp Expr
    (48) BinOp -> . +
    (49) BinOp -> . -
    (50) BinOp -> . *
    (51) BinOp -> . DIVIDE
    (52) BinOp -> . EXP
    (53) BinOp -> . %
    (54) BinOp -> . EQUAL
    (55) BinOp -> . NOTEQUAL
    (56) BinOp -> . <
    (57) BinOp -> . >
    (58) BinOp -> . LESSEQUAL
    (59) BinOp -> . GREATEREQUAL
    (60) BinOp -> . AND
    (61) BinOp -> . OR

    :               shift and go to state 120
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    DIVIDE          shift and go to state 75
    EXP             shift and go to state 76
    %               shift and go to state 77
    EQUAL           shift and go to state 78
    NOTEQUAL        shift and go to state 79
    <               shift and go to state 80
    >               shift and go to state 81
    LESSEQUAL       shift and go to state 82
    GREATEREQUAL    shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85

    BinOp                          shift and go to state 71

state 112

    (34) CmdPrint -> PRINT ( ExprList ) .

    $end            reduce using rule 34 (CmdPrint -> PRINT ( ExprList ) .)
    ;               reduce using rule 34 (CmdPrint -> PRINT ( ExprList ) .)
    }               reduce using rule 34 (CmdPrint -> PRINT ( ExprList ) .)
    ELSE            reduce using rule 34 (CmdPrint -> PRINT ( ExprList ) .)


state 113

    (67) ExprList1 -> Expr , . ExprList1
    (66) ExprList1 -> . Expr
    (67) ExprList1 -> . Expr , ExprList1
    (39) Expr -> . INT
    (40) Expr -> . TRUE
    (41) Expr -> . FALSE
    (42) Expr -> . ID
    (43) Expr -> . Expr BinOp Expr
    (44) Expr -> . UnOp Expr
    (45) Expr -> . ( Expr )
    (46) Expr -> . ID ( ExprList )
    (47) Expr -> . READ ( )
    (62) UnOp -> . -
    (63) UnOp -> . NOT

    INT             shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    ID              shift and go to state 54
    (               shift and go to state 56
    READ            shift and go to state 57
    -               shift and go to state 58
    NOT             shift and go to state 59

    Expr                           shift and go to state 95
    ExprList1                      shift and go to state 121
    UnOp                           shift and go to state 55

state 114

    (70) VarDecl -> VAR ID : Type ; .

    VAR             reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    {               reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    ID              reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    IF              reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    WHILE           reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    FOR             reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    BREAK           reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    PRINT           reduce using rule 70 (VarDecl -> VAR ID : Type ; .)
    RETURN          reduce using rule 70 (VarDecl -> VAR ID : Type ; .)


state 115

    (17) Param -> ID : . Type
    (71) Type -> . INTEGER
    (72) Type -> . BOOL

    INTEGER         shift and go to state 97
    BOOL            shift and go to state 98

    Type                           shift and go to state 122

state 116

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) . :

    :               shift and go to state 123


state 117

    (15) ParamList1 -> Param , . ParamList1
    (15) ParamList1 -> . Param , ParamList1
    (16) ParamList1 -> . Param
    (17) Param -> . ID : Type

    ID              shift and go to state 99

    Param                          shift and go to state 103
    ParamList1                     shift and go to state 124

state 118

    (30) CmdIf -> IF Expr : Cmd ELSE . :

    :               shift and go to state 125


state 119

    (46) Expr -> ID ( ExprList ) .

    :               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    +               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    -               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    *               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    DIVIDE          reduce using rule 46 (Expr -> ID ( ExprList ) .)
    EXP             reduce using rule 46 (Expr -> ID ( ExprList ) .)
    %               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    EQUAL           reduce using rule 46 (Expr -> ID ( ExprList ) .)
    NOTEQUAL        reduce using rule 46 (Expr -> ID ( ExprList ) .)
    <               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    >               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    LESSEQUAL       reduce using rule 46 (Expr -> ID ( ExprList ) .)
    GREATEREQUAL    reduce using rule 46 (Expr -> ID ( ExprList ) .)
    AND             reduce using rule 46 (Expr -> ID ( ExprList ) .)
    OR              reduce using rule 46 (Expr -> ID ( ExprList ) .)
    $end            reduce using rule 46 (Expr -> ID ( ExprList ) .)
    ;               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    }               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    ELSE            reduce using rule 46 (Expr -> ID ( ExprList ) .)
    TO              reduce using rule 46 (Expr -> ID ( ExprList ) .)
    )               reduce using rule 46 (Expr -> ID ( ExprList ) .)
    ,               reduce using rule 46 (Expr -> ID ( ExprList ) .)


state 120

    (32) CmdFor -> FOR CmdAtrib TO Expr : . Cmd
    (20) Cmd -> . CmdAtrib
    (21) Cmd -> . CmdIf
    (22) Cmd -> . CmdWhile
    (23) Cmd -> . CmdFor
    (24) Cmd -> . CmdBreak
    (25) Cmd -> . CmdPrint
    (26) Cmd -> . CmdReturn
    (27) Cmd -> . CmdSeq
    (28) CmdAtrib -> . ID = Expr
    (29) CmdIf -> . IF Expr : Cmd
    (30) CmdIf -> . IF Expr : Cmd ELSE :
    (31) CmdWhile -> . WHILE Expr : Cmds
    (32) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (33) CmdBreak -> . BREAK
    (34) CmdPrint -> . PRINT ( ExprList )
    (35) CmdReturn -> . RETURN Expr
    (36) CmdSeq -> . { CmdList }

    ID              shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    BREAK           shift and go to state 39
    PRINT           shift and go to state 40
    RETURN          shift and go to state 41
    {               shift and go to state 27

    CmdAtrib                       shift and go to state 28
    Cmd                            shift and go to state 126
    CmdIf                          shift and go to state 29
    CmdWhile                       shift and go to state 30
    CmdFor                         shift and go to state 31
    CmdBreak                       shift and go to state 32
    CmdPrint                       shift and go to state 33
    CmdReturn                      shift and go to state 34
    CmdSeq                         shift and go to state 47

state 121

    (67) ExprList1 -> Expr , ExprList1 .

    )               reduce using rule 67 (ExprList1 -> Expr , ExprList1 .)


state 122

    (17) Param -> ID : Type .

    ,               reduce using rule 17 (Param -> ID : Type .)
    )               reduce using rule 17 (Param -> ID : Type .)


state 123

    (8) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .

    {               reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    INTEGER         reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    BOOL            reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    VOID            reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    VAR             reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    ID              reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    IF              reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    WHILE           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    FOR             reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    BREAK           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    PRINT           reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)
    RETURN          reduce using rule 8 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)


state 124

    (15) ParamList1 -> Param , ParamList1 .

    )               reduce using rule 15 (ParamList1 -> Param , ParamList1 .)


state 125

    (30) CmdIf -> IF Expr : Cmd ELSE : .

    $end            reduce using rule 30 (CmdIf -> IF Expr : Cmd ELSE : .)
    ;               reduce using rule 30 (CmdIf -> IF Expr : Cmd ELSE : .)
    }               reduce using rule 30 (CmdIf -> IF Expr : Cmd ELSE : .)
    ELSE            reduce using rule 30 (CmdIf -> IF Expr : Cmd ELSE : .)


state 126

    (32) CmdFor -> FOR CmdAtrib TO Expr : Cmd .

    $end            reduce using rule 32 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ;               reduce using rule 32 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    }               reduce using rule 32 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ELSE            reduce using rule 32 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for { in state 2 resolved as shift
WARNING: shift/reduce conflict for { in state 7 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 105 resolved as shift
WARNING: shift/reduce conflict for + in state 106 resolved as shift
WARNING: shift/reduce conflict for - in state 106 resolved as shift
WARNING: shift/reduce conflict for * in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for EXP in state 106 resolved as shift
WARNING: shift/reduce conflict for % in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for < in state 106 resolved as shift
WARNING: shift/reduce conflict for > in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (Cmds -> CmdSeq)
WARNING: rejected rule (Cmd -> CmdSeq) in state 25
