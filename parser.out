Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> ProgramHeader ProgramBody
Rule 2     ProgramHeader -> PROGRAM ID ;
Rule 3     ProgramBody -> FuncDecls VarDecls Cmd
Rule 4     FuncDecls -> empty
Rule 5     FuncDecls -> Function FuncDecls
Rule 6     Function -> FunctionHeader FunctionBody
Rule 7     FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) :
Rule 8     FunctionType -> INTEGER
Rule 9     FunctionType -> BOOL
Rule 10    FunctionType -> VOID
Rule 11    FunctionBody -> { VarDecls CmdList }
Rule 12    ParamList -> empty
Rule 13    ParamList -> ParamList1
Rule 14    ParamList1 -> Param , ParamList1
Rule 15    ParamList1 -> Param
Rule 16    Param -> ID : Type
Rule 17    Cmd -> CmdAtrib
Rule 18    Cmd -> CmdIf
Rule 19    Cmd -> CmdWhile
Rule 20    Cmd -> CmdFor
Rule 21    Cmd -> CmdBreak
Rule 22    Cmd -> CmdPrint
Rule 23    Cmd -> CmdReturn
Rule 24    Cmd -> CmdSeq
Rule 25    CmdAtrib -> ID
Rule 26    CmdAtrib -> Expr
Rule 27    CmdIf -> IF Expr : Cmd
Rule 28    CmdIf -> IF Expr : Cmd ELSE :
Rule 29    CmdWhile -> WHILE Expr : Cmd
Rule 30    CmdFor -> FOR CmdAtrib TO Expr : Cmd
Rule 31    CmdBreak -> BREAK
Rule 32    CmdPrint -> PRINT ( ExprList )
Rule 33    CmdReturn -> RETURN Expr
Rule 34    CmdSeq -> { CmdList }
Rule 35    CmdList -> Cmd ; CmdList
Rule 36    CmdList -> Cmd
Rule 37    Expr -> INT
Rule 38    Expr -> TRUE
Rule 39    Expr -> FALSE
Rule 40    Expr -> ID
Rule 41    Expr -> Expr BinOp Expr
Rule 42    Expr -> UnOp Expr
Rule 43    Expr -> ( Expr )
Rule 44    Expr -> ID ( ExprList )
Rule 45    Expr -> READ ( )
Rule 46    BinOp -> +
Rule 47    BinOp -> -
Rule 48    BinOp -> *
Rule 49    BinOp -> /
Rule 50    BinOp -> EXP
Rule 51    BinOp -> %
Rule 52    BinOp -> =
Rule 53    BinOp -> EQUAL
Rule 54    BinOp -> NOTEQUAL
Rule 55    BinOp -> <
Rule 56    BinOp -> >
Rule 57    BinOp -> LESSEQUAL
Rule 58    BinOp -> GREATEREQUAL
Rule 59    BinOp -> AND
Rule 60    BinOp -> OR
Rule 61    UnOp -> -
Rule 62    UnOp -> NOT
Rule 63    ExprList -> empty
Rule 64    ExprList -> ExprList1
Rule 65    ExprList1 -> Expr
Rule 66    ExprList1 -> Expr , ExprList1
Rule 67    VarDecls -> empty
Rule 68    VarDecls -> VarDecl VarDecls
Rule 69    VarDecl -> VAR ID : Type ;
Rule 70    Type -> INTEGER
Rule 71    Type -> BOOL
Rule 72    empty -> <empty>

Terminals, with rules where they appear

%                    : 51
(                    : 7 32 43 44 45
)                    : 7 32 43 44 45
*                    : 48
+                    : 46
,                    : 14 66
-                    : 47 61
/                    : 49
:                    : 7 16 27 28 28 29 30 69
;                    : 2 35 69
<                    : 55
=                    : 52
>                    : 56
AND                  : 59
BOOL                 : 9 71
BREAK                : 31
ELSE                 : 28
EQUAL                : 53
EXP                  : 50
FALSE                : 39
FOR                  : 30
FUNCTION             : 7
GREATEREQUAL         : 58
ID                   : 2 7 16 25 40 44 69
IF                   : 27 28
INT                  : 37
INTEGER              : 8 70
LESSEQUAL            : 57
NOT                  : 62
NOTEQUAL             : 54
OR                   : 60
PRINT                : 32
PROGRAM              : 2
READ                 : 45
RETURN               : 33
TO                   : 30
TRUE                 : 38
VAR                  : 69
VOID                 : 10
WHILE                : 29
error                : 
{                    : 11 34
}                    : 11 34

Nonterminals, with rules where they appear

BinOp                : 41
Cmd                  : 3 27 28 29 30 35 36
CmdAtrib             : 17 30
CmdBreak             : 21
CmdFor               : 20
CmdIf                : 18
CmdList              : 11 34 35
CmdPrint             : 22
CmdReturn            : 23
CmdSeq               : 24
CmdWhile             : 19
Expr                 : 26 27 28 29 30 33 41 41 42 43 65 66
ExprList             : 32 44
ExprList1            : 64 66
FuncDecls            : 3 5
Function             : 5
FunctionBody         : 6
FunctionHeader       : 6
FunctionType         : 7
Param                : 14 15
ParamList            : 7
ParamList1           : 13 14
Program              : 0
ProgramBody          : 1
ProgramHeader        : 1
Type                 : 16 69
UnOp                 : 42
VarDecl              : 68
VarDecls             : 3 11 68
empty                : 4 12 63 67

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . ProgramHeader ProgramBody
    (2) ProgramHeader -> . PROGRAM ID ;

    PROGRAM         shift and go to state 3

    Program                        shift and go to state 1
    ProgramHeader                  shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> ProgramHeader . ProgramBody
    (3) ProgramBody -> . FuncDecls VarDecls Cmd
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (72) empty -> .
    (6) Function -> . FunctionHeader FunctionBody
    (7) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (8) FunctionType -> . INTEGER
    (9) FunctionType -> . BOOL
    (10) FunctionType -> . VOID

    VAR             reduce using rule 72 (empty -> .)
    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    BREAK           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    {               reduce using rule 72 (empty -> .)
    INT             reduce using rule 72 (empty -> .)
    TRUE            reduce using rule 72 (empty -> .)
    FALSE           reduce using rule 72 (empty -> .)
    (               reduce using rule 72 (empty -> .)
    READ            reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    VOID            shift and go to state 12

    ProgramBody                    shift and go to state 4
    FuncDecls                      shift and go to state 5
    empty                          shift and go to state 6
    Function                       shift and go to state 7
    FunctionHeader                 shift and go to state 8
    FunctionType                   shift and go to state 9

state 3

    (2) ProgramHeader -> PROGRAM . ID ;

    ID              shift and go to state 13


state 4

    (1) Program -> ProgramHeader ProgramBody .

    $end            reduce using rule 1 (Program -> ProgramHeader ProgramBody .)


state 5

    (3) ProgramBody -> FuncDecls . VarDecls Cmd
    (67) VarDecls -> . empty
    (68) VarDecls -> . VarDecl VarDecls
    (72) empty -> .
    (69) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    BREAK           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    {               reduce using rule 72 (empty -> .)
    INT             reduce using rule 72 (empty -> .)
    TRUE            reduce using rule 72 (empty -> .)
    FALSE           reduce using rule 72 (empty -> .)
    (               reduce using rule 72 (empty -> .)
    READ            reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    VAR             shift and go to state 17

    VarDecls                       shift and go to state 14
    empty                          shift and go to state 15
    VarDecl                        shift and go to state 16

state 6

    (4) FuncDecls -> empty .

    VAR             reduce using rule 4 (FuncDecls -> empty .)
    ID              reduce using rule 4 (FuncDecls -> empty .)
    IF              reduce using rule 4 (FuncDecls -> empty .)
    WHILE           reduce using rule 4 (FuncDecls -> empty .)
    FOR             reduce using rule 4 (FuncDecls -> empty .)
    BREAK           reduce using rule 4 (FuncDecls -> empty .)
    PRINT           reduce using rule 4 (FuncDecls -> empty .)
    RETURN          reduce using rule 4 (FuncDecls -> empty .)
    {               reduce using rule 4 (FuncDecls -> empty .)
    INT             reduce using rule 4 (FuncDecls -> empty .)
    TRUE            reduce using rule 4 (FuncDecls -> empty .)
    FALSE           reduce using rule 4 (FuncDecls -> empty .)
    (               reduce using rule 4 (FuncDecls -> empty .)
    READ            reduce using rule 4 (FuncDecls -> empty .)
    -               reduce using rule 4 (FuncDecls -> empty .)
    NOT             reduce using rule 4 (FuncDecls -> empty .)


state 7

    (5) FuncDecls -> Function . FuncDecls
    (4) FuncDecls -> . empty
    (5) FuncDecls -> . Function FuncDecls
    (72) empty -> .
    (6) Function -> . FunctionHeader FunctionBody
    (7) FunctionHeader -> . FunctionType FUNCTION ID ( ParamList ) :
    (8) FunctionType -> . INTEGER
    (9) FunctionType -> . BOOL
    (10) FunctionType -> . VOID

    VAR             reduce using rule 72 (empty -> .)
    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    BREAK           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    {               reduce using rule 72 (empty -> .)
    INT             reduce using rule 72 (empty -> .)
    TRUE            reduce using rule 72 (empty -> .)
    FALSE           reduce using rule 72 (empty -> .)
    (               reduce using rule 72 (empty -> .)
    READ            reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    VOID            shift and go to state 12

    Function                       shift and go to state 7
    FuncDecls                      shift and go to state 18
    empty                          shift and go to state 6
    FunctionHeader                 shift and go to state 8
    FunctionType                   shift and go to state 9

state 8

    (6) Function -> FunctionHeader . FunctionBody
    (11) FunctionBody -> . { VarDecls CmdList }

    {               shift and go to state 20

    FunctionBody                   shift and go to state 19

state 9

    (7) FunctionHeader -> FunctionType . FUNCTION ID ( ParamList ) :

    FUNCTION        shift and go to state 21


state 10

    (8) FunctionType -> INTEGER .

    FUNCTION        reduce using rule 8 (FunctionType -> INTEGER .)


state 11

    (9) FunctionType -> BOOL .

    FUNCTION        reduce using rule 9 (FunctionType -> BOOL .)


state 12

    (10) FunctionType -> VOID .

    FUNCTION        reduce using rule 10 (FunctionType -> VOID .)


state 13

    (2) ProgramHeader -> PROGRAM ID . ;

    ;               shift and go to state 22


state 14

    (3) ProgramBody -> FuncDecls VarDecls . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Cmd                            shift and go to state 23
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    Expr                           shift and go to state 33
    UnOp                           shift and go to state 45

state 15

    (67) VarDecls -> empty .

    ID              reduce using rule 67 (VarDecls -> empty .)
    IF              reduce using rule 67 (VarDecls -> empty .)
    WHILE           reduce using rule 67 (VarDecls -> empty .)
    FOR             reduce using rule 67 (VarDecls -> empty .)
    BREAK           reduce using rule 67 (VarDecls -> empty .)
    PRINT           reduce using rule 67 (VarDecls -> empty .)
    RETURN          reduce using rule 67 (VarDecls -> empty .)
    {               reduce using rule 67 (VarDecls -> empty .)
    INT             reduce using rule 67 (VarDecls -> empty .)
    TRUE            reduce using rule 67 (VarDecls -> empty .)
    FALSE           reduce using rule 67 (VarDecls -> empty .)
    (               reduce using rule 67 (VarDecls -> empty .)
    READ            reduce using rule 67 (VarDecls -> empty .)
    -               reduce using rule 67 (VarDecls -> empty .)
    NOT             reduce using rule 67 (VarDecls -> empty .)


state 16

    (68) VarDecls -> VarDecl . VarDecls
    (67) VarDecls -> . empty
    (68) VarDecls -> . VarDecl VarDecls
    (72) empty -> .
    (69) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    BREAK           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    {               reduce using rule 72 (empty -> .)
    INT             reduce using rule 72 (empty -> .)
    TRUE            reduce using rule 72 (empty -> .)
    FALSE           reduce using rule 72 (empty -> .)
    (               reduce using rule 72 (empty -> .)
    READ            reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    VAR             shift and go to state 17

    VarDecl                        shift and go to state 16
    VarDecls                       shift and go to state 49
    empty                          shift and go to state 15

state 17

    (69) VarDecl -> VAR . ID : Type ;

    ID              shift and go to state 50


state 18

    (5) FuncDecls -> Function FuncDecls .

    VAR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    ID              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    IF              reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    WHILE           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    FOR             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    BREAK           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    PRINT           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    RETURN          reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    {               reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    INT             reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    TRUE            reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    FALSE           reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    (               reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    READ            reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    -               reduce using rule 5 (FuncDecls -> Function FuncDecls .)
    NOT             reduce using rule 5 (FuncDecls -> Function FuncDecls .)


state 19

    (6) Function -> FunctionHeader FunctionBody .

    INTEGER         reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    BOOL            reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    VOID            reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    VAR             reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    ID              reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    IF              reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    WHILE           reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    FOR             reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    BREAK           reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    PRINT           reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    RETURN          reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    {               reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    INT             reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    TRUE            reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    FALSE           reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    (               reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    READ            reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    -               reduce using rule 6 (Function -> FunctionHeader FunctionBody .)
    NOT             reduce using rule 6 (Function -> FunctionHeader FunctionBody .)


state 20

    (11) FunctionBody -> { . VarDecls CmdList }
    (67) VarDecls -> . empty
    (68) VarDecls -> . VarDecl VarDecls
    (72) empty -> .
    (69) VarDecl -> . VAR ID : Type ;

    ID              reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    BREAK           reduce using rule 72 (empty -> .)
    PRINT           reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    {               reduce using rule 72 (empty -> .)
    INT             reduce using rule 72 (empty -> .)
    TRUE            reduce using rule 72 (empty -> .)
    FALSE           reduce using rule 72 (empty -> .)
    (               reduce using rule 72 (empty -> .)
    READ            reduce using rule 72 (empty -> .)
    -               reduce using rule 72 (empty -> .)
    NOT             reduce using rule 72 (empty -> .)
    VAR             shift and go to state 17

    VarDecls                       shift and go to state 51
    empty                          shift and go to state 15
    VarDecl                        shift and go to state 16

state 21

    (7) FunctionHeader -> FunctionType FUNCTION . ID ( ParamList ) :

    ID              shift and go to state 52


state 22

    (2) ProgramHeader -> PROGRAM ID ; .

    INTEGER         reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BOOL            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VOID            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    VAR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    ID              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    IF              reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    WHILE           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    FOR             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    BREAK           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    PRINT           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    RETURN          reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    {               reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    INT             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    TRUE            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    FALSE           reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    (               reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    READ            reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    -               reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)
    NOT             reduce using rule 2 (ProgramHeader -> PROGRAM ID ; .)


state 23

    (3) ProgramBody -> FuncDecls VarDecls Cmd .

    $end            reduce using rule 3 (ProgramBody -> FuncDecls VarDecls Cmd .)


state 24

    (17) Cmd -> CmdAtrib .

    $end            reduce using rule 17 (Cmd -> CmdAtrib .)
    ;               reduce using rule 17 (Cmd -> CmdAtrib .)
    }               reduce using rule 17 (Cmd -> CmdAtrib .)
    ELSE            reduce using rule 17 (Cmd -> CmdAtrib .)


state 25

    (18) Cmd -> CmdIf .

    $end            reduce using rule 18 (Cmd -> CmdIf .)
    ;               reduce using rule 18 (Cmd -> CmdIf .)
    }               reduce using rule 18 (Cmd -> CmdIf .)
    ELSE            reduce using rule 18 (Cmd -> CmdIf .)


state 26

    (19) Cmd -> CmdWhile .

    $end            reduce using rule 19 (Cmd -> CmdWhile .)
    ;               reduce using rule 19 (Cmd -> CmdWhile .)
    }               reduce using rule 19 (Cmd -> CmdWhile .)
    ELSE            reduce using rule 19 (Cmd -> CmdWhile .)


state 27

    (20) Cmd -> CmdFor .

    $end            reduce using rule 20 (Cmd -> CmdFor .)
    ;               reduce using rule 20 (Cmd -> CmdFor .)
    }               reduce using rule 20 (Cmd -> CmdFor .)
    ELSE            reduce using rule 20 (Cmd -> CmdFor .)


state 28

    (21) Cmd -> CmdBreak .

    $end            reduce using rule 21 (Cmd -> CmdBreak .)
    ;               reduce using rule 21 (Cmd -> CmdBreak .)
    }               reduce using rule 21 (Cmd -> CmdBreak .)
    ELSE            reduce using rule 21 (Cmd -> CmdBreak .)


state 29

    (22) Cmd -> CmdPrint .

    $end            reduce using rule 22 (Cmd -> CmdPrint .)
    ;               reduce using rule 22 (Cmd -> CmdPrint .)
    }               reduce using rule 22 (Cmd -> CmdPrint .)
    ELSE            reduce using rule 22 (Cmd -> CmdPrint .)


state 30

    (23) Cmd -> CmdReturn .

    $end            reduce using rule 23 (Cmd -> CmdReturn .)
    ;               reduce using rule 23 (Cmd -> CmdReturn .)
    }               reduce using rule 23 (Cmd -> CmdReturn .)
    ELSE            reduce using rule 23 (Cmd -> CmdReturn .)


state 31

    (24) Cmd -> CmdSeq .

    $end            reduce using rule 24 (Cmd -> CmdSeq .)
    ;               reduce using rule 24 (Cmd -> CmdSeq .)
    }               reduce using rule 24 (Cmd -> CmdSeq .)
    ELSE            reduce using rule 24 (Cmd -> CmdSeq .)


state 32

    (25) CmdAtrib -> ID .
    (40) Expr -> ID .
    (44) Expr -> ID . ( ExprList )

  ! reduce/reduce conflict for $end resolved using rule 25 (CmdAtrib -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 25 (CmdAtrib -> ID .)
  ! reduce/reduce conflict for ; resolved using rule 25 (CmdAtrib -> ID .)
  ! reduce/reduce conflict for } resolved using rule 25 (CmdAtrib -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (CmdAtrib -> ID .)
    $end            reduce using rule 25 (CmdAtrib -> ID .)
    TO              reduce using rule 25 (CmdAtrib -> ID .)
    ;               reduce using rule 25 (CmdAtrib -> ID .)
    }               reduce using rule 25 (CmdAtrib -> ID .)
    ELSE            reduce using rule 25 (CmdAtrib -> ID .)
    +               reduce using rule 40 (Expr -> ID .)
    -               reduce using rule 40 (Expr -> ID .)
    *               reduce using rule 40 (Expr -> ID .)
    /               reduce using rule 40 (Expr -> ID .)
    EXP             reduce using rule 40 (Expr -> ID .)
    %               reduce using rule 40 (Expr -> ID .)
    =               reduce using rule 40 (Expr -> ID .)
    EQUAL           reduce using rule 40 (Expr -> ID .)
    NOTEQUAL        reduce using rule 40 (Expr -> ID .)
    <               reduce using rule 40 (Expr -> ID .)
    >               reduce using rule 40 (Expr -> ID .)
    LESSEQUAL       reduce using rule 40 (Expr -> ID .)
    GREATEREQUAL    reduce using rule 40 (Expr -> ID .)
    AND             reduce using rule 40 (Expr -> ID .)
    OR              reduce using rule 40 (Expr -> ID .)
    (               shift and go to state 53

  ! $end            [ reduce using rule 40 (Expr -> ID .) ]
  ! TO              [ reduce using rule 40 (Expr -> ID .) ]
  ! ;               [ reduce using rule 40 (Expr -> ID .) ]
  ! }               [ reduce using rule 40 (Expr -> ID .) ]
  ! ELSE            [ reduce using rule 40 (Expr -> ID .) ]


state 33

    (26) CmdAtrib -> Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    $end            reduce using rule 26 (CmdAtrib -> Expr .)
    TO              reduce using rule 26 (CmdAtrib -> Expr .)
    ;               reduce using rule 26 (CmdAtrib -> Expr .)
    }               reduce using rule 26 (CmdAtrib -> Expr .)
    ELSE            reduce using rule 26 (CmdAtrib -> Expr .)
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 34

    (27) CmdIf -> IF . Expr : Cmd
    (28) CmdIf -> IF . Expr : Cmd ELSE :
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 70
    UnOp                           shift and go to state 45

state 35

    (29) CmdWhile -> WHILE . Expr : Cmd
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 72
    UnOp                           shift and go to state 45

state 36

    (30) CmdFor -> FOR . CmdAtrib TO Expr : Cmd
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    CmdAtrib                       shift and go to state 73
    Expr                           shift and go to state 33
    UnOp                           shift and go to state 45

state 37

    (31) CmdBreak -> BREAK .

    $end            reduce using rule 31 (CmdBreak -> BREAK .)
    ;               reduce using rule 31 (CmdBreak -> BREAK .)
    }               reduce using rule 31 (CmdBreak -> BREAK .)
    ELSE            reduce using rule 31 (CmdBreak -> BREAK .)


state 38

    (32) CmdPrint -> PRINT . ( ExprList )

    (               shift and go to state 74


state 39

    (43) Expr -> ( . Expr )
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 75
    UnOp                           shift and go to state 45

state 40

    (33) CmdReturn -> RETURN . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 76
    UnOp                           shift and go to state 45

state 41

    (34) CmdSeq -> { . CmdList }
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    CmdList                        shift and go to state 77
    Cmd                            shift and go to state 78
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    Expr                           shift and go to state 33
    UnOp                           shift and go to state 45

state 42

    (37) Expr -> INT .

    +               reduce using rule 37 (Expr -> INT .)
    -               reduce using rule 37 (Expr -> INT .)
    *               reduce using rule 37 (Expr -> INT .)
    /               reduce using rule 37 (Expr -> INT .)
    EXP             reduce using rule 37 (Expr -> INT .)
    %               reduce using rule 37 (Expr -> INT .)
    =               reduce using rule 37 (Expr -> INT .)
    EQUAL           reduce using rule 37 (Expr -> INT .)
    NOTEQUAL        reduce using rule 37 (Expr -> INT .)
    <               reduce using rule 37 (Expr -> INT .)
    >               reduce using rule 37 (Expr -> INT .)
    LESSEQUAL       reduce using rule 37 (Expr -> INT .)
    GREATEREQUAL    reduce using rule 37 (Expr -> INT .)
    AND             reduce using rule 37 (Expr -> INT .)
    OR              reduce using rule 37 (Expr -> INT .)
    $end            reduce using rule 37 (Expr -> INT .)
    :               reduce using rule 37 (Expr -> INT .)
    TO              reduce using rule 37 (Expr -> INT .)
    )               reduce using rule 37 (Expr -> INT .)
    ;               reduce using rule 37 (Expr -> INT .)
    }               reduce using rule 37 (Expr -> INT .)
    ELSE            reduce using rule 37 (Expr -> INT .)
    ,               reduce using rule 37 (Expr -> INT .)


state 43

    (38) Expr -> TRUE .

    +               reduce using rule 38 (Expr -> TRUE .)
    -               reduce using rule 38 (Expr -> TRUE .)
    *               reduce using rule 38 (Expr -> TRUE .)
    /               reduce using rule 38 (Expr -> TRUE .)
    EXP             reduce using rule 38 (Expr -> TRUE .)
    %               reduce using rule 38 (Expr -> TRUE .)
    =               reduce using rule 38 (Expr -> TRUE .)
    EQUAL           reduce using rule 38 (Expr -> TRUE .)
    NOTEQUAL        reduce using rule 38 (Expr -> TRUE .)
    <               reduce using rule 38 (Expr -> TRUE .)
    >               reduce using rule 38 (Expr -> TRUE .)
    LESSEQUAL       reduce using rule 38 (Expr -> TRUE .)
    GREATEREQUAL    reduce using rule 38 (Expr -> TRUE .)
    AND             reduce using rule 38 (Expr -> TRUE .)
    OR              reduce using rule 38 (Expr -> TRUE .)
    $end            reduce using rule 38 (Expr -> TRUE .)
    :               reduce using rule 38 (Expr -> TRUE .)
    TO              reduce using rule 38 (Expr -> TRUE .)
    )               reduce using rule 38 (Expr -> TRUE .)
    ;               reduce using rule 38 (Expr -> TRUE .)
    }               reduce using rule 38 (Expr -> TRUE .)
    ELSE            reduce using rule 38 (Expr -> TRUE .)
    ,               reduce using rule 38 (Expr -> TRUE .)


state 44

    (39) Expr -> FALSE .

    +               reduce using rule 39 (Expr -> FALSE .)
    -               reduce using rule 39 (Expr -> FALSE .)
    *               reduce using rule 39 (Expr -> FALSE .)
    /               reduce using rule 39 (Expr -> FALSE .)
    EXP             reduce using rule 39 (Expr -> FALSE .)
    %               reduce using rule 39 (Expr -> FALSE .)
    =               reduce using rule 39 (Expr -> FALSE .)
    EQUAL           reduce using rule 39 (Expr -> FALSE .)
    NOTEQUAL        reduce using rule 39 (Expr -> FALSE .)
    <               reduce using rule 39 (Expr -> FALSE .)
    >               reduce using rule 39 (Expr -> FALSE .)
    LESSEQUAL       reduce using rule 39 (Expr -> FALSE .)
    GREATEREQUAL    reduce using rule 39 (Expr -> FALSE .)
    AND             reduce using rule 39 (Expr -> FALSE .)
    OR              reduce using rule 39 (Expr -> FALSE .)
    $end            reduce using rule 39 (Expr -> FALSE .)
    :               reduce using rule 39 (Expr -> FALSE .)
    TO              reduce using rule 39 (Expr -> FALSE .)
    )               reduce using rule 39 (Expr -> FALSE .)
    ;               reduce using rule 39 (Expr -> FALSE .)
    }               reduce using rule 39 (Expr -> FALSE .)
    ELSE            reduce using rule 39 (Expr -> FALSE .)
    ,               reduce using rule 39 (Expr -> FALSE .)


state 45

    (42) Expr -> UnOp . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    UnOp                           shift and go to state 45
    Expr                           shift and go to state 79

state 46

    (45) Expr -> READ . ( )

    (               shift and go to state 80


state 47

    (61) UnOp -> - .

    INT             reduce using rule 61 (UnOp -> - .)
    TRUE            reduce using rule 61 (UnOp -> - .)
    FALSE           reduce using rule 61 (UnOp -> - .)
    ID              reduce using rule 61 (UnOp -> - .)
    (               reduce using rule 61 (UnOp -> - .)
    READ            reduce using rule 61 (UnOp -> - .)
    -               reduce using rule 61 (UnOp -> - .)
    NOT             reduce using rule 61 (UnOp -> - .)


state 48

    (62) UnOp -> NOT .

    INT             reduce using rule 62 (UnOp -> NOT .)
    TRUE            reduce using rule 62 (UnOp -> NOT .)
    FALSE           reduce using rule 62 (UnOp -> NOT .)
    ID              reduce using rule 62 (UnOp -> NOT .)
    (               reduce using rule 62 (UnOp -> NOT .)
    READ            reduce using rule 62 (UnOp -> NOT .)
    -               reduce using rule 62 (UnOp -> NOT .)
    NOT             reduce using rule 62 (UnOp -> NOT .)


state 49

    (68) VarDecls -> VarDecl VarDecls .

    ID              reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    IF              reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    WHILE           reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    FOR             reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    BREAK           reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    PRINT           reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    RETURN          reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    {               reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    INT             reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    TRUE            reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    FALSE           reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    (               reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    READ            reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    -               reduce using rule 68 (VarDecls -> VarDecl VarDecls .)
    NOT             reduce using rule 68 (VarDecls -> VarDecl VarDecls .)


state 50

    (69) VarDecl -> VAR ID . : Type ;

    :               shift and go to state 81


state 51

    (11) FunctionBody -> { VarDecls . CmdList }
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    CmdList                        shift and go to state 82
    Cmd                            shift and go to state 78
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    Expr                           shift and go to state 33
    UnOp                           shift and go to state 45

state 52

    (7) FunctionHeader -> FunctionType FUNCTION ID . ( ParamList ) :

    (               shift and go to state 83


state 53

    (44) Expr -> ID ( . ExprList )
    (63) ExprList -> . empty
    (64) ExprList -> . ExprList1
    (72) empty -> .
    (65) ExprList1 -> . Expr
    (66) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    )               reduce using rule 72 (empty -> .)
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    ExprList                       shift and go to state 84
    empty                          shift and go to state 85
    ExprList1                      shift and go to state 86
    Expr                           shift and go to state 87
    UnOp                           shift and go to state 45

state 54

    (41) Expr -> Expr BinOp . Expr
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 88
    UnOp                           shift and go to state 45

state 55

    (46) BinOp -> + .

    INT             reduce using rule 46 (BinOp -> + .)
    TRUE            reduce using rule 46 (BinOp -> + .)
    FALSE           reduce using rule 46 (BinOp -> + .)
    ID              reduce using rule 46 (BinOp -> + .)
    (               reduce using rule 46 (BinOp -> + .)
    READ            reduce using rule 46 (BinOp -> + .)
    -               reduce using rule 46 (BinOp -> + .)
    NOT             reduce using rule 46 (BinOp -> + .)


state 56

    (47) BinOp -> - .

    INT             reduce using rule 47 (BinOp -> - .)
    TRUE            reduce using rule 47 (BinOp -> - .)
    FALSE           reduce using rule 47 (BinOp -> - .)
    ID              reduce using rule 47 (BinOp -> - .)
    (               reduce using rule 47 (BinOp -> - .)
    READ            reduce using rule 47 (BinOp -> - .)
    -               reduce using rule 47 (BinOp -> - .)
    NOT             reduce using rule 47 (BinOp -> - .)


state 57

    (48) BinOp -> * .

    INT             reduce using rule 48 (BinOp -> * .)
    TRUE            reduce using rule 48 (BinOp -> * .)
    FALSE           reduce using rule 48 (BinOp -> * .)
    ID              reduce using rule 48 (BinOp -> * .)
    (               reduce using rule 48 (BinOp -> * .)
    READ            reduce using rule 48 (BinOp -> * .)
    -               reduce using rule 48 (BinOp -> * .)
    NOT             reduce using rule 48 (BinOp -> * .)


state 58

    (49) BinOp -> / .

    INT             reduce using rule 49 (BinOp -> / .)
    TRUE            reduce using rule 49 (BinOp -> / .)
    FALSE           reduce using rule 49 (BinOp -> / .)
    ID              reduce using rule 49 (BinOp -> / .)
    (               reduce using rule 49 (BinOp -> / .)
    READ            reduce using rule 49 (BinOp -> / .)
    -               reduce using rule 49 (BinOp -> / .)
    NOT             reduce using rule 49 (BinOp -> / .)


state 59

    (50) BinOp -> EXP .

    INT             reduce using rule 50 (BinOp -> EXP .)
    TRUE            reduce using rule 50 (BinOp -> EXP .)
    FALSE           reduce using rule 50 (BinOp -> EXP .)
    ID              reduce using rule 50 (BinOp -> EXP .)
    (               reduce using rule 50 (BinOp -> EXP .)
    READ            reduce using rule 50 (BinOp -> EXP .)
    -               reduce using rule 50 (BinOp -> EXP .)
    NOT             reduce using rule 50 (BinOp -> EXP .)


state 60

    (51) BinOp -> % .

    INT             reduce using rule 51 (BinOp -> % .)
    TRUE            reduce using rule 51 (BinOp -> % .)
    FALSE           reduce using rule 51 (BinOp -> % .)
    ID              reduce using rule 51 (BinOp -> % .)
    (               reduce using rule 51 (BinOp -> % .)
    READ            reduce using rule 51 (BinOp -> % .)
    -               reduce using rule 51 (BinOp -> % .)
    NOT             reduce using rule 51 (BinOp -> % .)


state 61

    (52) BinOp -> = .

    INT             reduce using rule 52 (BinOp -> = .)
    TRUE            reduce using rule 52 (BinOp -> = .)
    FALSE           reduce using rule 52 (BinOp -> = .)
    ID              reduce using rule 52 (BinOp -> = .)
    (               reduce using rule 52 (BinOp -> = .)
    READ            reduce using rule 52 (BinOp -> = .)
    -               reduce using rule 52 (BinOp -> = .)
    NOT             reduce using rule 52 (BinOp -> = .)


state 62

    (53) BinOp -> EQUAL .

    INT             reduce using rule 53 (BinOp -> EQUAL .)
    TRUE            reduce using rule 53 (BinOp -> EQUAL .)
    FALSE           reduce using rule 53 (BinOp -> EQUAL .)
    ID              reduce using rule 53 (BinOp -> EQUAL .)
    (               reduce using rule 53 (BinOp -> EQUAL .)
    READ            reduce using rule 53 (BinOp -> EQUAL .)
    -               reduce using rule 53 (BinOp -> EQUAL .)
    NOT             reduce using rule 53 (BinOp -> EQUAL .)


state 63

    (54) BinOp -> NOTEQUAL .

    INT             reduce using rule 54 (BinOp -> NOTEQUAL .)
    TRUE            reduce using rule 54 (BinOp -> NOTEQUAL .)
    FALSE           reduce using rule 54 (BinOp -> NOTEQUAL .)
    ID              reduce using rule 54 (BinOp -> NOTEQUAL .)
    (               reduce using rule 54 (BinOp -> NOTEQUAL .)
    READ            reduce using rule 54 (BinOp -> NOTEQUAL .)
    -               reduce using rule 54 (BinOp -> NOTEQUAL .)
    NOT             reduce using rule 54 (BinOp -> NOTEQUAL .)


state 64

    (55) BinOp -> < .

    INT             reduce using rule 55 (BinOp -> < .)
    TRUE            reduce using rule 55 (BinOp -> < .)
    FALSE           reduce using rule 55 (BinOp -> < .)
    ID              reduce using rule 55 (BinOp -> < .)
    (               reduce using rule 55 (BinOp -> < .)
    READ            reduce using rule 55 (BinOp -> < .)
    -               reduce using rule 55 (BinOp -> < .)
    NOT             reduce using rule 55 (BinOp -> < .)


state 65

    (56) BinOp -> > .

    INT             reduce using rule 56 (BinOp -> > .)
    TRUE            reduce using rule 56 (BinOp -> > .)
    FALSE           reduce using rule 56 (BinOp -> > .)
    ID              reduce using rule 56 (BinOp -> > .)
    (               reduce using rule 56 (BinOp -> > .)
    READ            reduce using rule 56 (BinOp -> > .)
    -               reduce using rule 56 (BinOp -> > .)
    NOT             reduce using rule 56 (BinOp -> > .)


state 66

    (57) BinOp -> LESSEQUAL .

    INT             reduce using rule 57 (BinOp -> LESSEQUAL .)
    TRUE            reduce using rule 57 (BinOp -> LESSEQUAL .)
    FALSE           reduce using rule 57 (BinOp -> LESSEQUAL .)
    ID              reduce using rule 57 (BinOp -> LESSEQUAL .)
    (               reduce using rule 57 (BinOp -> LESSEQUAL .)
    READ            reduce using rule 57 (BinOp -> LESSEQUAL .)
    -               reduce using rule 57 (BinOp -> LESSEQUAL .)
    NOT             reduce using rule 57 (BinOp -> LESSEQUAL .)


state 67

    (58) BinOp -> GREATEREQUAL .

    INT             reduce using rule 58 (BinOp -> GREATEREQUAL .)
    TRUE            reduce using rule 58 (BinOp -> GREATEREQUAL .)
    FALSE           reduce using rule 58 (BinOp -> GREATEREQUAL .)
    ID              reduce using rule 58 (BinOp -> GREATEREQUAL .)
    (               reduce using rule 58 (BinOp -> GREATEREQUAL .)
    READ            reduce using rule 58 (BinOp -> GREATEREQUAL .)
    -               reduce using rule 58 (BinOp -> GREATEREQUAL .)
    NOT             reduce using rule 58 (BinOp -> GREATEREQUAL .)


state 68

    (59) BinOp -> AND .

    INT             reduce using rule 59 (BinOp -> AND .)
    TRUE            reduce using rule 59 (BinOp -> AND .)
    FALSE           reduce using rule 59 (BinOp -> AND .)
    ID              reduce using rule 59 (BinOp -> AND .)
    (               reduce using rule 59 (BinOp -> AND .)
    READ            reduce using rule 59 (BinOp -> AND .)
    -               reduce using rule 59 (BinOp -> AND .)
    NOT             reduce using rule 59 (BinOp -> AND .)


state 69

    (60) BinOp -> OR .

    INT             reduce using rule 60 (BinOp -> OR .)
    TRUE            reduce using rule 60 (BinOp -> OR .)
    FALSE           reduce using rule 60 (BinOp -> OR .)
    ID              reduce using rule 60 (BinOp -> OR .)
    (               reduce using rule 60 (BinOp -> OR .)
    READ            reduce using rule 60 (BinOp -> OR .)
    -               reduce using rule 60 (BinOp -> OR .)
    NOT             reduce using rule 60 (BinOp -> OR .)


state 70

    (27) CmdIf -> IF Expr . : Cmd
    (28) CmdIf -> IF Expr . : Cmd ELSE :
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    :               shift and go to state 89
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 71

    (40) Expr -> ID .
    (44) Expr -> ID . ( ExprList )

    :               reduce using rule 40 (Expr -> ID .)
    +               reduce using rule 40 (Expr -> ID .)
    -               reduce using rule 40 (Expr -> ID .)
    *               reduce using rule 40 (Expr -> ID .)
    /               reduce using rule 40 (Expr -> ID .)
    EXP             reduce using rule 40 (Expr -> ID .)
    %               reduce using rule 40 (Expr -> ID .)
    =               reduce using rule 40 (Expr -> ID .)
    EQUAL           reduce using rule 40 (Expr -> ID .)
    NOTEQUAL        reduce using rule 40 (Expr -> ID .)
    <               reduce using rule 40 (Expr -> ID .)
    >               reduce using rule 40 (Expr -> ID .)
    LESSEQUAL       reduce using rule 40 (Expr -> ID .)
    GREATEREQUAL    reduce using rule 40 (Expr -> ID .)
    AND             reduce using rule 40 (Expr -> ID .)
    OR              reduce using rule 40 (Expr -> ID .)
    )               reduce using rule 40 (Expr -> ID .)
    $end            reduce using rule 40 (Expr -> ID .)
    ;               reduce using rule 40 (Expr -> ID .)
    }               reduce using rule 40 (Expr -> ID .)
    ELSE            reduce using rule 40 (Expr -> ID .)
    TO              reduce using rule 40 (Expr -> ID .)
    ,               reduce using rule 40 (Expr -> ID .)
    (               shift and go to state 53


state 72

    (29) CmdWhile -> WHILE Expr . : Cmd
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    :               shift and go to state 90
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 73

    (30) CmdFor -> FOR CmdAtrib . TO Expr : Cmd

    TO              shift and go to state 91


state 74

    (32) CmdPrint -> PRINT ( . ExprList )
    (63) ExprList -> . empty
    (64) ExprList -> . ExprList1
    (72) empty -> .
    (65) ExprList1 -> . Expr
    (66) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    )               reduce using rule 72 (empty -> .)
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    ExprList                       shift and go to state 92
    empty                          shift and go to state 85
    ExprList1                      shift and go to state 86
    Expr                           shift and go to state 87
    UnOp                           shift and go to state 45

state 75

    (43) Expr -> ( Expr . )
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    )               shift and go to state 93
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 76

    (33) CmdReturn -> RETURN Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    $end            reduce using rule 33 (CmdReturn -> RETURN Expr .)
    ;               reduce using rule 33 (CmdReturn -> RETURN Expr .)
    }               reduce using rule 33 (CmdReturn -> RETURN Expr .)
    ELSE            reduce using rule 33 (CmdReturn -> RETURN Expr .)
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 77

    (34) CmdSeq -> { CmdList . }

    }               shift and go to state 94


state 78

    (35) CmdList -> Cmd . ; CmdList
    (36) CmdList -> Cmd .

    ;               shift and go to state 95
    }               reduce using rule 36 (CmdList -> Cmd .)


state 79

    (42) Expr -> UnOp Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    +               reduce using rule 42 (Expr -> UnOp Expr .)
    -               reduce using rule 42 (Expr -> UnOp Expr .)
    *               reduce using rule 42 (Expr -> UnOp Expr .)
    /               reduce using rule 42 (Expr -> UnOp Expr .)
    EXP             reduce using rule 42 (Expr -> UnOp Expr .)
    %               reduce using rule 42 (Expr -> UnOp Expr .)
    =               reduce using rule 42 (Expr -> UnOp Expr .)
    EQUAL           reduce using rule 42 (Expr -> UnOp Expr .)
    NOTEQUAL        reduce using rule 42 (Expr -> UnOp Expr .)
    <               reduce using rule 42 (Expr -> UnOp Expr .)
    >               reduce using rule 42 (Expr -> UnOp Expr .)
    LESSEQUAL       reduce using rule 42 (Expr -> UnOp Expr .)
    GREATEREQUAL    reduce using rule 42 (Expr -> UnOp Expr .)
    AND             reduce using rule 42 (Expr -> UnOp Expr .)
    OR              reduce using rule 42 (Expr -> UnOp Expr .)
    $end            reduce using rule 42 (Expr -> UnOp Expr .)
    :               reduce using rule 42 (Expr -> UnOp Expr .)
    TO              reduce using rule 42 (Expr -> UnOp Expr .)
    )               reduce using rule 42 (Expr -> UnOp Expr .)
    ;               reduce using rule 42 (Expr -> UnOp Expr .)
    }               reduce using rule 42 (Expr -> UnOp Expr .)
    ELSE            reduce using rule 42 (Expr -> UnOp Expr .)
    ,               reduce using rule 42 (Expr -> UnOp Expr .)

  ! +               [ shift and go to state 55 ]
  ! -               [ shift and go to state 56 ]
  ! *               [ shift and go to state 57 ]
  ! /               [ shift and go to state 58 ]
  ! EXP             [ shift and go to state 59 ]
  ! %               [ shift and go to state 60 ]
  ! =               [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 62 ]
  ! NOTEQUAL        [ shift and go to state 63 ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 66 ]
  ! GREATEREQUAL    [ shift and go to state 67 ]
  ! AND             [ shift and go to state 68 ]
  ! OR              [ shift and go to state 69 ]

    BinOp                          shift and go to state 54

state 80

    (45) Expr -> READ ( . )

    )               shift and go to state 96


state 81

    (69) VarDecl -> VAR ID : . Type ;
    (70) Type -> . INTEGER
    (71) Type -> . BOOL

    INTEGER         shift and go to state 98
    BOOL            shift and go to state 99

    Type                           shift and go to state 97

state 82

    (11) FunctionBody -> { VarDecls CmdList . }

    }               shift and go to state 100


state 83

    (7) FunctionHeader -> FunctionType FUNCTION ID ( . ParamList ) :
    (12) ParamList -> . empty
    (13) ParamList -> . ParamList1
    (72) empty -> .
    (14) ParamList1 -> . Param , ParamList1
    (15) ParamList1 -> . Param
    (16) Param -> . ID : Type

    )               reduce using rule 72 (empty -> .)
    ID              shift and go to state 101

    ParamList                      shift and go to state 102
    empty                          shift and go to state 103
    ParamList1                     shift and go to state 104
    Param                          shift and go to state 105

state 84

    (44) Expr -> ID ( ExprList . )

    )               shift and go to state 106


state 85

    (63) ExprList -> empty .

    )               reduce using rule 63 (ExprList -> empty .)


state 86

    (64) ExprList -> ExprList1 .

    )               reduce using rule 64 (ExprList -> ExprList1 .)


state 87

    (65) ExprList1 -> Expr .
    (66) ExprList1 -> Expr . , ExprList1
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    )               reduce using rule 65 (ExprList1 -> Expr .)
    ,               shift and go to state 107
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 88

    (41) Expr -> Expr BinOp Expr .
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 41 (Expr -> Expr BinOp Expr .)
    :               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    TO              reduce using rule 41 (Expr -> Expr BinOp Expr .)
    )               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ;               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    }               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ELSE            reduce using rule 41 (Expr -> Expr BinOp Expr .)
    ,               reduce using rule 41 (Expr -> Expr BinOp Expr .)
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

  ! +               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! -               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! *               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! /               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! EXP             [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! %               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! =               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! EQUAL           [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! NOTEQUAL        [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! <               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! >               [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! LESSEQUAL       [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! AND             [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]
  ! OR              [ reduce using rule 41 (Expr -> Expr BinOp Expr .) ]

    BinOp                          shift and go to state 54

state 89

    (27) CmdIf -> IF Expr : . Cmd
    (28) CmdIf -> IF Expr : . Cmd ELSE :
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 33
    Cmd                            shift and go to state 108
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    UnOp                           shift and go to state 45

state 90

    (29) CmdWhile -> WHILE Expr : . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 33
    Cmd                            shift and go to state 109
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    UnOp                           shift and go to state 45

state 91

    (30) CmdFor -> FOR CmdAtrib TO . Expr : Cmd
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 110
    UnOp                           shift and go to state 45

state 92

    (32) CmdPrint -> PRINT ( ExprList . )

    )               shift and go to state 111


state 93

    (43) Expr -> ( Expr ) .

    +               reduce using rule 43 (Expr -> ( Expr ) .)
    -               reduce using rule 43 (Expr -> ( Expr ) .)
    *               reduce using rule 43 (Expr -> ( Expr ) .)
    /               reduce using rule 43 (Expr -> ( Expr ) .)
    EXP             reduce using rule 43 (Expr -> ( Expr ) .)
    %               reduce using rule 43 (Expr -> ( Expr ) .)
    =               reduce using rule 43 (Expr -> ( Expr ) .)
    EQUAL           reduce using rule 43 (Expr -> ( Expr ) .)
    NOTEQUAL        reduce using rule 43 (Expr -> ( Expr ) .)
    <               reduce using rule 43 (Expr -> ( Expr ) .)
    >               reduce using rule 43 (Expr -> ( Expr ) .)
    LESSEQUAL       reduce using rule 43 (Expr -> ( Expr ) .)
    GREATEREQUAL    reduce using rule 43 (Expr -> ( Expr ) .)
    AND             reduce using rule 43 (Expr -> ( Expr ) .)
    OR              reduce using rule 43 (Expr -> ( Expr ) .)
    $end            reduce using rule 43 (Expr -> ( Expr ) .)
    :               reduce using rule 43 (Expr -> ( Expr ) .)
    TO              reduce using rule 43 (Expr -> ( Expr ) .)
    )               reduce using rule 43 (Expr -> ( Expr ) .)
    ;               reduce using rule 43 (Expr -> ( Expr ) .)
    }               reduce using rule 43 (Expr -> ( Expr ) .)
    ELSE            reduce using rule 43 (Expr -> ( Expr ) .)
    ,               reduce using rule 43 (Expr -> ( Expr ) .)


state 94

    (34) CmdSeq -> { CmdList } .

    $end            reduce using rule 34 (CmdSeq -> { CmdList } .)
    ;               reduce using rule 34 (CmdSeq -> { CmdList } .)
    }               reduce using rule 34 (CmdSeq -> { CmdList } .)
    ELSE            reduce using rule 34 (CmdSeq -> { CmdList } .)


state 95

    (35) CmdList -> Cmd ; . CmdList
    (35) CmdList -> . Cmd ; CmdList
    (36) CmdList -> . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Cmd                            shift and go to state 78
    CmdList                        shift and go to state 112
    CmdAtrib                       shift and go to state 24
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    Expr                           shift and go to state 33
    UnOp                           shift and go to state 45

state 96

    (45) Expr -> READ ( ) .

    +               reduce using rule 45 (Expr -> READ ( ) .)
    -               reduce using rule 45 (Expr -> READ ( ) .)
    *               reduce using rule 45 (Expr -> READ ( ) .)
    /               reduce using rule 45 (Expr -> READ ( ) .)
    EXP             reduce using rule 45 (Expr -> READ ( ) .)
    %               reduce using rule 45 (Expr -> READ ( ) .)
    =               reduce using rule 45 (Expr -> READ ( ) .)
    EQUAL           reduce using rule 45 (Expr -> READ ( ) .)
    NOTEQUAL        reduce using rule 45 (Expr -> READ ( ) .)
    <               reduce using rule 45 (Expr -> READ ( ) .)
    >               reduce using rule 45 (Expr -> READ ( ) .)
    LESSEQUAL       reduce using rule 45 (Expr -> READ ( ) .)
    GREATEREQUAL    reduce using rule 45 (Expr -> READ ( ) .)
    AND             reduce using rule 45 (Expr -> READ ( ) .)
    OR              reduce using rule 45 (Expr -> READ ( ) .)
    $end            reduce using rule 45 (Expr -> READ ( ) .)
    :               reduce using rule 45 (Expr -> READ ( ) .)
    TO              reduce using rule 45 (Expr -> READ ( ) .)
    )               reduce using rule 45 (Expr -> READ ( ) .)
    ;               reduce using rule 45 (Expr -> READ ( ) .)
    }               reduce using rule 45 (Expr -> READ ( ) .)
    ELSE            reduce using rule 45 (Expr -> READ ( ) .)
    ,               reduce using rule 45 (Expr -> READ ( ) .)


state 97

    (69) VarDecl -> VAR ID : Type . ;

    ;               shift and go to state 113


state 98

    (70) Type -> INTEGER .

    ;               reduce using rule 70 (Type -> INTEGER .)
    ,               reduce using rule 70 (Type -> INTEGER .)
    )               reduce using rule 70 (Type -> INTEGER .)


state 99

    (71) Type -> BOOL .

    ;               reduce using rule 71 (Type -> BOOL .)
    ,               reduce using rule 71 (Type -> BOOL .)
    )               reduce using rule 71 (Type -> BOOL .)


state 100

    (11) FunctionBody -> { VarDecls CmdList } .

    INTEGER         reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    BOOL            reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    VOID            reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    VAR             reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    ID              reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    IF              reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    WHILE           reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    FOR             reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    BREAK           reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    PRINT           reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    RETURN          reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    {               reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    INT             reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    TRUE            reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    FALSE           reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    (               reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    READ            reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    -               reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)
    NOT             reduce using rule 11 (FunctionBody -> { VarDecls CmdList } .)


state 101

    (16) Param -> ID . : Type

    :               shift and go to state 114


state 102

    (7) FunctionHeader -> FunctionType FUNCTION ID ( ParamList . ) :

    )               shift and go to state 115


state 103

    (12) ParamList -> empty .

    )               reduce using rule 12 (ParamList -> empty .)


state 104

    (13) ParamList -> ParamList1 .

    )               reduce using rule 13 (ParamList -> ParamList1 .)


state 105

    (14) ParamList1 -> Param . , ParamList1
    (15) ParamList1 -> Param .

    ,               shift and go to state 116
    )               reduce using rule 15 (ParamList1 -> Param .)


state 106

    (44) Expr -> ID ( ExprList ) .

    +               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    -               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    *               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    /               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    EXP             reduce using rule 44 (Expr -> ID ( ExprList ) .)
    %               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    =               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    EQUAL           reduce using rule 44 (Expr -> ID ( ExprList ) .)
    NOTEQUAL        reduce using rule 44 (Expr -> ID ( ExprList ) .)
    <               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    >               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    LESSEQUAL       reduce using rule 44 (Expr -> ID ( ExprList ) .)
    GREATEREQUAL    reduce using rule 44 (Expr -> ID ( ExprList ) .)
    AND             reduce using rule 44 (Expr -> ID ( ExprList ) .)
    OR              reduce using rule 44 (Expr -> ID ( ExprList ) .)
    $end            reduce using rule 44 (Expr -> ID ( ExprList ) .)
    :               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    TO              reduce using rule 44 (Expr -> ID ( ExprList ) .)
    )               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ;               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    }               reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ELSE            reduce using rule 44 (Expr -> ID ( ExprList ) .)
    ,               reduce using rule 44 (Expr -> ID ( ExprList ) .)


state 107

    (66) ExprList1 -> Expr , . ExprList1
    (65) ExprList1 -> . Expr
    (66) ExprList1 -> . Expr , ExprList1
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    ID              shift and go to state 71
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    Expr                           shift and go to state 87
    ExprList1                      shift and go to state 117
    UnOp                           shift and go to state 45

state 108

    (27) CmdIf -> IF Expr : Cmd .
    (28) CmdIf -> IF Expr : Cmd . ELSE :

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    ;               reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    }               reduce using rule 27 (CmdIf -> IF Expr : Cmd .)
    ELSE            shift and go to state 118

  ! ELSE            [ reduce using rule 27 (CmdIf -> IF Expr : Cmd .) ]


state 109

    (29) CmdWhile -> WHILE Expr : Cmd .

    $end            reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    ;               reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    }               reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)
    ELSE            reduce using rule 29 (CmdWhile -> WHILE Expr : Cmd .)


state 110

    (30) CmdFor -> FOR CmdAtrib TO Expr . : Cmd
    (41) Expr -> Expr . BinOp Expr
    (46) BinOp -> . +
    (47) BinOp -> . -
    (48) BinOp -> . *
    (49) BinOp -> . /
    (50) BinOp -> . EXP
    (51) BinOp -> . %
    (52) BinOp -> . =
    (53) BinOp -> . EQUAL
    (54) BinOp -> . NOTEQUAL
    (55) BinOp -> . <
    (56) BinOp -> . >
    (57) BinOp -> . LESSEQUAL
    (58) BinOp -> . GREATEREQUAL
    (59) BinOp -> . AND
    (60) BinOp -> . OR

    :               shift and go to state 119
    +               shift and go to state 55
    -               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    EXP             shift and go to state 59
    %               shift and go to state 60
    =               shift and go to state 61
    EQUAL           shift and go to state 62
    NOTEQUAL        shift and go to state 63
    <               shift and go to state 64
    >               shift and go to state 65
    LESSEQUAL       shift and go to state 66
    GREATEREQUAL    shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69

    BinOp                          shift and go to state 54

state 111

    (32) CmdPrint -> PRINT ( ExprList ) .

    $end            reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    ;               reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    }               reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)
    ELSE            reduce using rule 32 (CmdPrint -> PRINT ( ExprList ) .)


state 112

    (35) CmdList -> Cmd ; CmdList .

    }               reduce using rule 35 (CmdList -> Cmd ; CmdList .)


state 113

    (69) VarDecl -> VAR ID : Type ; .

    VAR             reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    ID              reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    IF              reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    WHILE           reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    FOR             reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    BREAK           reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    PRINT           reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    RETURN          reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    {               reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    INT             reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    TRUE            reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    FALSE           reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    (               reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    READ            reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    -               reduce using rule 69 (VarDecl -> VAR ID : Type ; .)
    NOT             reduce using rule 69 (VarDecl -> VAR ID : Type ; .)


state 114

    (16) Param -> ID : . Type
    (70) Type -> . INTEGER
    (71) Type -> . BOOL

    INTEGER         shift and go to state 98
    BOOL            shift and go to state 99

    Type                           shift and go to state 120

state 115

    (7) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) . :

    :               shift and go to state 121


state 116

    (14) ParamList1 -> Param , . ParamList1
    (14) ParamList1 -> . Param , ParamList1
    (15) ParamList1 -> . Param
    (16) Param -> . ID : Type

    ID              shift and go to state 101

    Param                          shift and go to state 105
    ParamList1                     shift and go to state 122

state 117

    (66) ExprList1 -> Expr , ExprList1 .

    )               reduce using rule 66 (ExprList1 -> Expr , ExprList1 .)


state 118

    (28) CmdIf -> IF Expr : Cmd ELSE . :

    :               shift and go to state 123


state 119

    (30) CmdFor -> FOR CmdAtrib TO Expr : . Cmd
    (17) Cmd -> . CmdAtrib
    (18) Cmd -> . CmdIf
    (19) Cmd -> . CmdWhile
    (20) Cmd -> . CmdFor
    (21) Cmd -> . CmdBreak
    (22) Cmd -> . CmdPrint
    (23) Cmd -> . CmdReturn
    (24) Cmd -> . CmdSeq
    (25) CmdAtrib -> . ID
    (26) CmdAtrib -> . Expr
    (27) CmdIf -> . IF Expr : Cmd
    (28) CmdIf -> . IF Expr : Cmd ELSE :
    (29) CmdWhile -> . WHILE Expr : Cmd
    (30) CmdFor -> . FOR CmdAtrib TO Expr : Cmd
    (31) CmdBreak -> . BREAK
    (32) CmdPrint -> . PRINT ( ExprList )
    (33) CmdReturn -> . RETURN Expr
    (34) CmdSeq -> . { CmdList }
    (37) Expr -> . INT
    (38) Expr -> . TRUE
    (39) Expr -> . FALSE
    (40) Expr -> . ID
    (41) Expr -> . Expr BinOp Expr
    (42) Expr -> . UnOp Expr
    (43) Expr -> . ( Expr )
    (44) Expr -> . ID ( ExprList )
    (45) Expr -> . READ ( )
    (61) UnOp -> . -
    (62) UnOp -> . NOT

    ID              shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    PRINT           shift and go to state 38
    RETURN          shift and go to state 40
    {               shift and go to state 41
    INT             shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    (               shift and go to state 39
    READ            shift and go to state 46
    -               shift and go to state 47
    NOT             shift and go to state 48

    CmdAtrib                       shift and go to state 24
    Expr                           shift and go to state 33
    Cmd                            shift and go to state 124
    CmdIf                          shift and go to state 25
    CmdWhile                       shift and go to state 26
    CmdFor                         shift and go to state 27
    CmdBreak                       shift and go to state 28
    CmdPrint                       shift and go to state 29
    CmdReturn                      shift and go to state 30
    CmdSeq                         shift and go to state 31
    UnOp                           shift and go to state 45

state 120

    (16) Param -> ID : Type .

    ,               reduce using rule 16 (Param -> ID : Type .)
    )               reduce using rule 16 (Param -> ID : Type .)


state 121

    (7) FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .

    {               reduce using rule 7 (FunctionHeader -> FunctionType FUNCTION ID ( ParamList ) : .)


state 122

    (14) ParamList1 -> Param , ParamList1 .

    )               reduce using rule 14 (ParamList1 -> Param , ParamList1 .)


state 123

    (28) CmdIf -> IF Expr : Cmd ELSE : .

    $end            reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    ;               reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    }               reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)
    ELSE            reduce using rule 28 (CmdIf -> IF Expr : Cmd ELSE : .)


state 124

    (30) CmdFor -> FOR CmdAtrib TO Expr : Cmd .

    $end            reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ;               reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    }               reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)
    ELSE            reduce using rule 30 (CmdFor -> FOR CmdAtrib TO Expr : Cmd .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 88 resolved as shift
WARNING: shift/reduce conflict for - in state 88 resolved as shift
WARNING: shift/reduce conflict for * in state 88 resolved as shift
WARNING: shift/reduce conflict for / in state 88 resolved as shift
WARNING: shift/reduce conflict for EXP in state 88 resolved as shift
WARNING: shift/reduce conflict for % in state 88 resolved as shift
WARNING: shift/reduce conflict for = in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for < in state 88 resolved as shift
WARNING: shift/reduce conflict for > in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 108 resolved as shift
WARNING: reduce/reduce conflict in state 32 resolved using rule (CmdAtrib -> ID)
WARNING: rejected rule (Expr -> ID) in state 32
